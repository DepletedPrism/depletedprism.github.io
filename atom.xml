<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DepletedPrism&#39;s Blog</title>
  
  <subtitle>知其然而不知其所以然是可悲的.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://depletedprism.github.io/"/>
  <updated>2020-04-12T11:42:25.622Z</updated>
  <id>https://depletedprism.github.io/</id>
  
  <author>
    <name>DepletedPrism</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「置顶」算法教程合辑</title>
    <link href="https://depletedprism.github.io/%E7%AC%94%E8%AE%B0/compilation/"/>
    <id>https://depletedprism.github.io/%E7%AC%94%E8%AE%B0/compilation/</id>
    <published>9102-11-14T00:11:23.000Z</published>
    <updated>2020-04-12T11:42:25.622Z</updated>
    
    <content type="html"><![CDATA[<hr><p>这个 idea 来源于 <a href="https://www.cnblogs.com/mlystdcall/p/8078467.html" target="_blank" rel="noopener">__stdcall 的教程合辑</a>, 觉得这个很好, 所以学习了.</p><a id="more"></a><p><del>Hexo 博客的强制置顶</del></p><h4 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h4><ul><li><p>树状数组进阶</p><ul><li><a href="https://www.cnblogs.com/RabbitHu/p/BIT.html" target="_blank" rel="noopener">https://www.cnblogs.com/RabbitHu/p/BIT.html</a></li></ul></li></ul><h4 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h4><ul><li><p>网络流入门</p><ul><li><a href="https://www.xht37.com/二分图与网络流-学习笔记/" target="_blank" rel="noopener">https://www.xht37.com/二分图与网络流-学习笔记/</a></li></ul></li><li><p>上下界网络流</p><ul><li><a href="https://www.cnblogs.com/mlystdcall/p/6734852.html" target="_blank" rel="noopener">https://www.cnblogs.com/mlystdcall/p/6734852.html</a></li></ul></li><li><p>基于 Capacity Scaling 的弱多项式复杂度最小费用流算法</p><ul><li><a href="https://ouuan.github.io/post/%E5%9F%BA%E4%BA%8E-capacity-scaling-%E7%9A%84%E5%BC%B1%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%B5%81%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">https://ouuan.github.io/post/基于-capacity-scaling-的弱多项式复杂度最小费用流算法</a></li></ul></li></ul><h4 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h4><ul><li><p>基础构造</p><ul><li><a href="https://oi.men.ci/linear-basis-notes/" target="_blank" rel="noopener">https://oi.men.ci/linear-basis-notes/</a></li></ul></li><li><p>可重集 Kth 异或和</p><ul><li><a href="https://blog.csdn.net/qaq__qaq/article/details/53812883" target="_blank" rel="noopener">https://blog.csdn.net/qaq__qaq/article/details/53812883</a></li><li><a href="https://ouuan.github.io/post/%E7%BA%BF%E6%80%A7%E5%9F%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">https://ouuan.github.io/post/线性基学习笔记/</a></li></ul></li></ul><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><ul><li><p>四边形不等式优化</p><ul><li><a href="https://oi-wiki.org/dp/opt/quadrangle/" target="_blank" rel="noopener">https://oi-wiki.org/dp/opt/quadrangle/</a></li></ul></li></ul><h4 id="Link-Cut-Tree"><a href="#Link-Cut-Tree" class="headerlink" title="Link Cut Tree"></a>Link Cut Tree</h4><ul><li><p>应用 &amp; 题单</p><ul><li><a href="https://www.cnblogs.com/flashhu/p/9498517.html" target="_blank" rel="noopener">https://www.cnblogs.com/flashhu/p/9498517.html</a></li></ul></li></ul><h4 id="左偏树"><a href="#左偏树" class="headerlink" title="左偏树"></a>左偏树</h4><ul><li><p>特点及应用</p><ul><li><a href="https://files-cdn.cnblogs.com/files/shenben/算法合集之《左偏树的特点及其应用》.pdf" target="_blank" rel="noopener">https://files-cdn.cnblogs.com/files/shenben/算法合集之《左偏树的特点及其应用》.pdf</a></li></ul></li></ul><h4 id="Min-Max-容斥"><a href="#Min-Max-容斥" class="headerlink" title="Min-Max 容斥"></a>Min-Max 容斥</h4><ul><li><p>证明及应用</p><ul><li><a href="https://www.cnblogs.com/GXZlegend/p/11563330.html" target="_blank" rel="noopener">https://www.cnblogs.com/GXZlegend/p/11563330.html</a></li></ul></li></ul><h4 id="Stirling-数及-Stirling-反演"><a href="#Stirling-数及-Stirling-反演" class="headerlink" title="Stirling 数及 Stirling 反演"></a>Stirling 数及 Stirling 反演</h4><ul><li><p>性质及应用</p><ul><li><a href="https://www.cnblogs.com/y2823774827y/p/10700231.html" target="_blank" rel="noopener">https://www.cnblogs.com/y2823774827y/p/10700231.html</a></li></ul></li></ul><h4 id="二项式反演"><a href="#二项式反演" class="headerlink" title="二项式反演"></a>二项式反演</h4><ul><li><p>证明及应用</p><ul><li><a href="https://www.cnblogs.com/GXZlegend/p/11407185.html" target="_blank" rel="noopener">https://www.cnblogs.com/GXZlegend/p/11407185.html</a></li></ul></li></ul><h4 id="类欧几里得算法"><a href="#类欧几里得算法" class="headerlink" title="类欧几里得算法"></a>类欧几里得算法</h4><ul><li><p>推导及模板</p><ul><li><a href="https://oi-wiki.org/math/euclidean/" target="_blank" rel="noopener">https://oi-wiki.org/math/euclidean/</a></li></ul></li></ul><h4 id="生成函数"><a href="#生成函数" class="headerlink" title="生成函数"></a>生成函数</h4><ul><li><p>生成函数的运算和常见模型</p><ul><li>金策, &lt;生成函数的运算与组合计数问题&gt;. 国家集训队 2015 论文集.</li></ul></li><li><p>图的计数</p><ul><li>汪乐平, &lt;生成函数, 多项式算法与图的计数&gt;. 2019.1.28.</li></ul></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;这个 idea 来源于 &lt;a href=&quot;https://www.cnblogs.com/mlystdcall/p/8078467.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;__stdcall 的教程合辑&lt;/a&gt;, 觉得这个很好, 所以学习了.&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://depletedprism.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>「置顶」HAOI 2020 退役记</title>
    <link href="https://depletedprism.github.io/%E9%9A%8F%E7%AC%94/HAOI-2020/"/>
    <id>https://depletedprism.github.io/%E9%9A%8F%E7%AC%94/HAOI-2020/</id>
    <published>4096-03-27T16:21:14.000Z</published>
    <updated>2020-04-15T04:31:02.368Z</updated>
    
    <content type="html"><![CDATA[<hr><div style="text-align:center;"><img src="/images/HAOI-2020/=.png"> </div><p><em><p style="text-align:center;">图源网络, 进行了简单修改</p></em></p><p>省选未能如期举办, 我的青春结束了.</p><a id="more"></a><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/images/HAOI-2020/=.png&quot;&gt; &lt;/div&gt;

&lt;p&gt;&lt;em&gt;&lt;p style=&quot;text-align:center;&quot;&gt;图源网络, 进行了简单修改&lt;/p&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;省选未能如期举办, 我的青春结束了.&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://depletedprism.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>ZJOI 2015 大赏</title>
    <link href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/ZJOI-2015-sol/"/>
    <id>https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/ZJOI-2015-sol/</id>
    <published>2020-04-21T08:57:39.000Z</published>
    <updated>2020-04-24T13:47:12.525Z</updated>
    
    <content type="html"><![CDATA[<hr><p>做这套题纯粹是为了好玩… 结果惨遭吊打 = =</p><a id="more"></a><h3 id="「ZJOI2015」幻想乡战略游戏"><a href="#「ZJOI2015」幻想乡战略游戏" class="headerlink" title="「ZJOI2015」幻想乡战略游戏"></a>「ZJOI2015」幻想乡战略游戏</h3><h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2135" target="_blank" rel="noopener">https://loj.ac/problem/2135</a></li></ul><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p><del>点分树是不可能的, 这辈子不可能写的. 数据结构又不会, 只能写写模板这样子.</del></p><p>考虑重链剖分.</p><p>不妨钦定 $1$ 为根. 记 $s_u$ 为 $u$ 子树内 $d$ 值之和. 对于一条边 $(u, v)$, 如果选择 $v$ 比 $u$ 更优, 也就是最终花费的变化量为负, 即</p><p>$$ w(u, v) \cdot (s_u - s_v) - w(u, v) \cdot s_v &lt; 0 \\ 2 s_v &gt; s_u $$</p><p>因此有一个在线段树上二分 DFS 序, 找出最优点 $v$ 的做法.</p><p>同时记 $\text{dist}(u)$ 为点 $u$ 到根节点的距离, 那么最小花费可以表示为</p><p>$$\sum_{v = 1} ^ n d_v \cdot \text{dist}(u, v) = \sum_{v = 1} ^ n d_v \cdot \big(\text{dist}(u) + \text{dist}(v) - 2 \text{dist}(\text{LCA}(u, v))\big)$$</p><p>$$\text{dist}(u) \sum_{v = 1} ^ n d_v + \sum_{v = 1} ^ n d_v \cdot \text{dist}(v) - 2 \sum_{v = 1} ^ n d_v \cdot \text{dist}(\text{LCA}(u, v))$$</p><p>前两项很好维护, 记录 $d_v$ 和 $d_v \cdot \text{dist}(v)$ 的和即可.</p><p>注意到 $u$ 的子树内的点, 同 $u$ 的 LCA 一定是 $u$, 而其他点和 $u$ 的 LCA 一定在 $u$ 到根的路径上.</p><p>考虑使用重链剖分统计这些可能成为 LCA 的点对答案的贡献.</p><p>每次 $d_v$ 改变时, 从 $v$ 到根节点依次修改, 将变化量 $e$ 加入子树内包含 $v$ 的节点上. 设这些节点为 $u$, $u$ 的父亲节点为 $f$, 此时对答案贡献的变化即为 $e \cdot \big( \text{dist}(u) - \text{dist}(f) \big)$, 即 $u$ 到 $f$ 的边贡献的变化量. 用线段树维护就好了.</p><p>查询直接对统计的这些贡献求和即可.</p><p>时间复杂度 $O(n + q \log ^ 2 n)$.</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2135</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line">LL A[MAXN], dist[MAXN];</span><br><span class="line"><span class="keyword">int</span> dfn[MAXN], rnk[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to, w; &#125; edges[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to, w &#125;, head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SGT &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc (nd&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc (nd&lt;&lt;1|1)</span></span><br><span class="line">    LL s[MAXN &lt;&lt; <span class="number">2</span>], w[MAXN &lt;&lt; <span class="number">2</span>], datSum[MAXN &lt;&lt; <span class="number">2</span>], tagAdd[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> nd)</span> </span>&#123;</span><br><span class="line">        s[nd] = max(s[lc], s[rc]);</span><br><span class="line">        datSum[nd] = datSum[lc] + datSum[rc];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushAdd</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; nd, <span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">        s[nd] += v, tagAdd[nd] += v, datSum[nd] += w[nd] * v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> nd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tagAdd[nd] != <span class="number">0</span>)</span><br><span class="line">            pushAdd(lc, tagAdd[nd]), pushAdd(rc, tagAdd[nd]), tagAdd[nd] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> <span class="keyword">void</span>( w[nd] = A[L] );</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        build(lc, L, Mid), build(rc, Mid+<span class="number">1</span>, R);</span><br><span class="line">        w[nd] = w[lc] + w[rc];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR, <span class="keyword">const</span> <span class="keyword">int</span>&amp; d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= L &amp;&amp; R &lt;= opR) <span class="keyword">return</span> pushAdd(nd, d);</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        pushdown(nd);</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= Mid) Mdy(lc, L, Mid, opL, opR, d);</span><br><span class="line">        <span class="keyword">if</span> (opR &gt; Mid) Mdy(rc, Mid+<span class="number">1</span>, R, opL, opR, d);</span><br><span class="line">        maintain(nd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= L &amp;&amp; R &lt;= opR) <span class="keyword">return</span> datSum[nd];</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        pushdown(nd);</span><br><span class="line">        <span class="keyword">if</span> (opR &lt;= Mid) <span class="keyword">return</span> Qry(lc, L, Mid, opL, opR);</span><br><span class="line">        <span class="keyword">if</span> (opL &gt; Mid) <span class="keyword">return</span> Qry(rc, Mid+<span class="number">1</span>, R, opL, opR);</span><br><span class="line">        <span class="keyword">return</span> Qry(lc, L, Mid, opL, opR) + Qry(rc, Mid+<span class="number">1</span>, R, opL, opR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Qry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Mid, nd = <span class="number">1</span>, L = <span class="number">1</span>, R = n;</span><br><span class="line">        <span class="keyword">while</span> (L &lt; R) &#123;</span><br><span class="line">            Mid = (L + R) / <span class="number">2</span>, pushdown(nd);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span> * s[rc] &gt;= s[<span class="number">1</span>]) nd = rc, L = Mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> nd = lc, R = Mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rnk[L];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> lc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> HLD &#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> Graph;</span><br><span class="line">    <span class="keyword">int</span> size[MAXN], son[MAXN], pre[MAXN], topfa[MAXN], clk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        pre[u] = fa, son[u] = <span class="number">-1</span>, size[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) == fa) <span class="keyword">continue</span>;</span><br><span class="line">            dist[v] = dist[u] + edges[i].w;</span><br><span class="line">            dfs1(v, u), size[u] += size[v];</span><br><span class="line">            <span class="keyword">if</span> (son[u] == <span class="number">-1</span> || size[v] &gt; size[son[u]]) son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">        topfa[u] = top, rnk[dfn[u] = ++clk] = u;</span><br><span class="line">        A[clk] = dist[u] - dist[pre[u]];</span><br><span class="line">        <span class="keyword">if</span> (~son[u]) dfs2(son[u], top);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt)</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) != pre[u] &amp;&amp; v != son[u]) dfs2(v, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> rt = <span class="number">1</span>)</span> </span>&#123; dfs1(rt, <span class="number">0</span>), dfs2(rt, rt); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; p, <span class="keyword">const</span> <span class="keyword">int</span>&amp; d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = p; u &gt; <span class="number">0</span>; u = pre[topfa[u]])</span><br><span class="line">            SGT::Mdy(<span class="number">1</span>, <span class="number">1</span>, n, dfn[topfa[u]], dfn[u], d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        LL ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = p; u &gt; <span class="number">0</span>; u = pre[topfa[u]])</span><br><span class="line">            ret += SGT::Qry(<span class="number">1</span>, <span class="number">1</span>, n, dfn[topfa[u]], dfn[u]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    Graph::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, w, i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        read(u), read(v), read(w);</span><br><span class="line">        Graph::AddEdge(u, v, w), Graph::AddEdge(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    HLD::solve(<span class="number">1</span>), SGT::build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    LL sumd = <span class="number">0</span>, sumdd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> rt, u, e; q; --q) &#123;</span><br><span class="line">       read(u), read(e);</span><br><span class="line">       sumd += e, sumdd += e * dist[u];</span><br><span class="line">       HLD::Mdy(u, e), rt = SGT::Qry();</span><br><span class="line">       LL ret = sumdd + sumd * dist[rt] - <span class="number">2</span> * HLD::Qry(rt);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「ZJOI2015」地震后的幻想乡"><a href="#「ZJOI2015」地震后的幻想乡" class="headerlink" title="「ZJOI2015」地震后的幻想乡"></a>「ZJOI2015」地震后的幻想乡</h3><h4 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2136" target="_blank" rel="noopener">https://loj.ac/problem/2136</a></li></ul><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p><del>套 Min/Max 容斥结果越想越偏是屑…</del></p><p>这里是一个平民做法.</p><p>考虑如何运用提示给出的公式. 模拟 Kruskal 的过程, 假定第 $k$ 次加入边后恰好得到一棵生成树, 那么对答案的贡献为 $\frac{k}{m + 1}$, 同时概率可以用合法方案数除以总方案数得出.</p><p>注意到一棵生成树的权值是对所有边取 $\max$. 那么对于一个连通图, 在该连通图恰好连通时内部边权的最大值, 和生成树的边权最大值是相同的, 因此可以从图的连通上考虑.</p><p>但是在恰好第 $k$ 次加入边得到连通图的情况不好统计, 做一步转化: 恰好加入第 $k$ 条边后图连通的方案数, 为: 加入这条边前不连通的方案数 - 加入这条边后不连通的方案数.</p><p>考虑用状压 DP 来求这个东西. 设 $f(S, i)$ 为当前选择的点集为 $S$, 已经使用了 $i$ 条边, 点集不连通的方案数.</p><p>记点集的全集为 $U$, $d(S)$ 为同点集 $S$ 相关的边的个数, 那么答案为</p><p>$$\sum_{k = 1} ^ m \frac{k}{m + 1} \left(\frac{f(U, k - 1)}{\binom{d(U)}{k - 1}} - \frac{f(U, k)}{\binom{d(U)}{k}}\right)$$</p><p>化简, 得</p><p>$$\frac{1}{m + 1} \sum_{k = 1} ^ {m - 1} \frac{f(U, k)}{\binom{d(U)}{k}}$$</p><p>同时, 点集连通的方案数为 $\binom{d(S)}{i} - f(S, i)$, 其中 $d(S)$ 可以通过枚举子集算出, 而点集连通时的方案数在转移 $f$ 时会用到.</p><p>点集不连通的情况可看作由一个连通非空子集上加边, 并保证新加入的点中存在不连通情况得出的. 因此有</p><p>$$f(S, i) = \sum_{ T \subset S,\ T \neq \varnothing } \sum_{j = 0} ^ {d(T)} \binom{d(S \setminus T)}{i - j} \cdot \left(\binom{d(T)}{j} - f(T, j)\right)$$</p><p>枚举子集转移即可. 注意转移时, 需要钦定 $S$ 中某个点, 使得 $T$ 必须包含该点, 否则会重复计算一些情况. 实现时可使用 <code>lowbit</code>.</p><p>至于为什么钦点一个点是对的, 可参看 <a href="https://www.luogu.com.cn/blog/command-block/solution-p3343" target="_blank" rel="noopener">command_block 的题解</a></p><p>时间复杂度大概是 $O(m3 ^ n)$?</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p>轻微压行.</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2136</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">10</span>, MAXM = MAXN * (MAXN - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">1</span> &lt;&lt; MAXN], d[<span class="number">1</span> &lt;&lt; MAXN];</span><br><span class="line">LL f[<span class="number">1</span> &lt;&lt; MAXN][MAXM], C[MAXM][MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v), ++c[<span class="number">1</span> &lt;&lt; (u<span class="number">-1</span>) | <span class="number">1</span> &lt;&lt; (v<span class="number">-1</span>)];</span><br><span class="line">    <span class="comment">// predone</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = C[i][<span class="number">0</span>] = <span class="number">1</span>; j &lt;= i; ++j)</span><br><span class="line">            C[i][j] = C[i - <span class="number">1</span>][j - <span class="number">1</span>] + C[i - <span class="number">1</span>][j];</span><br><span class="line">    <span class="keyword">int</span> U = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>; s &lt;= U; ++s)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> t = s; t; t = (t<span class="number">-1</span>) &amp; s) d[s] += c[t];</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>; s &lt;= U; ++s) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= d[s]; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> t = (s - <span class="number">1</span>) &amp; s; t; t = (t<span class="number">-1</span>) &amp; s) <span class="keyword">if</span> (t &amp; (s &amp; -s))</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i &amp;&amp; j &lt;= d[t]; ++j)</span><br><span class="line">                f[s][i] += (C[d[t]][j] - f[t][j]) * C[d[s ^ t]][i - j];</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; ++k) ans += f[U][k] / <span class="keyword">double</span>(C[d[U]][k]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>, ans / (m + <span class="number">1.0</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「ZJOI2015」诸神眷顾的幻想乡"><a href="#「ZJOI2015」诸神眷顾的幻想乡" class="headerlink" title="「ZJOI2015」诸神眷顾的幻想乡"></a>「ZJOI2015」诸神眷顾的幻想乡</h3><h4 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2137" target="_blank" rel="noopener">https://loj.ac/problem/2137</a></li></ul><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>考虑广义 SAM, <del>以及不要读错题, 这题没了</del>.</p><p>显然本质不同子串个数可以通过 SAM 来求.</p><p>注意到一个重要的条件: “一个空地相邻的空地数量不超过 $20$ 个”, 即叶子个数不超过 $20$. 那么从每个叶子开始, 遍历整棵树, 同时建广义 SAM 即可. <del>本质上大概是在 Trie 上建 SAM?</del></p><p>设叶子个数为 $L$, 那么时间复杂度为 $O(nL)$.</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2137</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, C; LL ans;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], deg[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SAM &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXN = ::MAXN * <span class="number">40</span>, SIGMA = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> ch[MAXN][SIGMA], lnk[MAXN], len[MAXN], nidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; nidx = <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Ins</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> lst)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = lst;</span><br><span class="line">        <span class="keyword">if</span> (ch[p][val] &amp;&amp; len[ch[p][val]] == len[p] + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> ch[p][val];</span><br><span class="line">        <span class="keyword">int</span> nd = ++nidx, flag = <span class="literal">false</span>;</span><br><span class="line">        len[nd] = len[lst] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p &amp;&amp; !ch[p][val]) ch[p][val] = nd, p = lnk[p];</span><br><span class="line">        <span class="keyword">if</span> (!p) lnk[nd] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> q = ch[p][val];</span><br><span class="line">            <span class="keyword">if</span> (len[q] == len[p] + <span class="number">1</span>) lnk[nd] = q;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> nxt = ++nidx;</span><br><span class="line">                <span class="keyword">if</span> (p == lst) flag = <span class="literal">true</span>;</span><br><span class="line">                len[nxt] = len[p] + <span class="number">1</span>, lnk[nxt] = lnk[q];</span><br><span class="line">                <span class="built_in">memcpy</span>(ch[nxt], ch[q], <span class="keyword">sizeof</span> ch[nxt]);</span><br><span class="line">                <span class="keyword">while</span> (p &amp;&amp; ch[p][val] == q) ch[p][val] = nxt, p = lnk[p];</span><br><span class="line">                lnk[nd] = lnk[q] = nxt;</span><br><span class="line">                <span class="keyword">if</span> (flag) <span class="keyword">return</span> nxt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += len[nd] - len[lnk[nd]];</span><br><span class="line">        <span class="keyword">return</span> nd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;, head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">int</span> lst)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nd = SAM::Ins(A[u], lst);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt)</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) != fa) dfs(v, u, nd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    SAM::init(), Graph::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(C);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(A[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        read(u), read(v), ++deg[u], ++deg[v];</span><br><span class="line">        Graph::AddEdge(u, v), Graph::AddEdge(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u)</span><br><span class="line">        <span class="keyword">if</span> (deg[u] == <span class="number">1</span>) Graph::dfs(u, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「ZJOI2015」黑客技术"><a href="#「ZJOI2015」黑客技术" class="headerlink" title="「ZJOI2015」黑客技术"></a>「ZJOI2015」黑客技术</h3><h4 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://uoj.ac/problem/116" target="_blank" rel="noopener">https://uoj.ac/problem/116</a></li></ul><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a><del>解题思路</del></h4><p><del>玩一个上午结果不如随缘乱敲分高是屑…</del></p><p>看不懂奥妙汇编, 溜了.</p><h3 id="「ZJOI2015」醉醺醺的幻想乡"><a href="#「ZJOI2015」醉醺醺的幻想乡" class="headerlink" title="「ZJOI2015」醉醺醺的幻想乡"></a>「ZJOI2015」醉醺醺的幻想乡</h3><h4 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2138" target="_blank" rel="noopener">https://loj.ac/problem/2138</a></li></ul><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>很厉害的一道题, 以及一个很厉害的题解: <a href="http://c-sunshine.blog.uoj.ac/blog/563" target="_blank" rel="noopener">http://c-sunshine.blog.uoj.ac/blog/563</a>.</p><p>如果单位酿酒量 $x$ 只能是整数, 那么就很好解决了: 将费用差分, 根据差分后的结果将原有边拆为 $c_i$, 也就是容量条边.</p><p>但是这里的 $x$ 可以是非负实数, 且最后的结果要求没有精度误差. 因此要使用上述题解的做法. 大体是对费用求导, 然后再积分计算…</p><p>注意到每次跑网络流时得到的是一个一次函数, 容易在残量网络中得出斜率 $k$ 以及截距 $b$, 通过斜截式就比较容易理解代码中的式子.</p><p>以及上述题解代码将半平面上的点和线都写为 <code>pair&lt;frac, frac&gt;</code>, 我的代码将两者区分开了, 这样就会清晰许多.</p><p>记网络流建图时点数为 $V$, 边数为 $E$, 时间复杂度为 $O(n V ^ 2 E)$.</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2138</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e2</span> + <span class="number">5</span>, MAXV = <span class="number">2</span> * MAXN;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eeps = <span class="number">1e-9</span>, EPS = <span class="number">1e-6</span>, INFD = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span> </span>&#123; <span class="keyword">return</span> !b? a: gcd(b, a % b); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">fabs</span>(p) &lt; eeps)? <span class="number">0</span>: (p &lt; <span class="number">0</span>? <span class="number">-1</span>: <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Frac</span> &#123;</span></span><br><span class="line">    LL x, y;</span><br><span class="line">    Frac(LL _x = <span class="number">0</span>, LL _y = <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_x == <span class="number">0</span>) x = <span class="number">0</span>, y = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> x = _x / gcd(_x, _y), y = _y / gcd(_x, _y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Frac <span class="keyword">operator</span> + (<span class="keyword">const</span> Frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Frac(x * rhs.y + y * rhs.x, y * rhs.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Frac <span class="keyword">operator</span> - (<span class="keyword">const</span> Frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Frac(x * rhs.y - y * rhs.x, y * rhs.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Frac <span class="keyword">operator</span> * (<span class="keyword">const</span> Frac&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Frac(x * rhs.x, y * rhs.y); &#125;</span><br><span class="line">    Frac <span class="keyword">operator</span> / (<span class="keyword">const</span> Frac&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Frac(x * rhs.y, y * rhs.x); &#125;</span><br><span class="line">    Frac <span class="keyword">operator</span> += (<span class="keyword">const</span> Frac&amp; rhs) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> + rhs; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">val</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="number">1.0</span> * x / y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span> &#123;</span></span><br><span class="line">    Frac k, b; <span class="comment">// y = kx + b;</span></span><br><span class="line">    Line(Frac _k, Frac _b): k(_k), b(_b) &#123; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Line&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> k.x == rhs.k.x &amp;&amp; k.y == rhs.k.y &amp;&amp; b.x == rhs.b.x &amp;&amp; b.y == rhs.b.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    Frac x, y;</span><br><span class="line">    Point(Frac _x, Frac _y): x(_x), y(_y) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, S, T;</span><br><span class="line"><span class="keyword">int</span> M[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> A[MAXN], B[MAXN], C[MAXN], D[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; P;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to; <span class="keyword">double</span> cap, flow;</span><br><span class="line">        Edge(<span class="keyword">int</span> _v, <span class="keyword">double</span> _c, <span class="keyword">double</span> _f): to(_v), cap(_c), flow(_f) &#123; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt; edges;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAXV];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</span><br><span class="line">        edges.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _n; ++i) G[i].clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">double</span> c)</span> </span>&#123;</span><br><span class="line">        edges.push_back(Edge(to, c, <span class="number">0.0</span>));</span><br><span class="line">        edges.push_back(Edge(from, <span class="number">0.0</span>, <span class="number">0.0</span>));</span><br><span class="line">        <span class="keyword">int</span> eidx = edges.size() - <span class="number">1</span>;</span><br><span class="line">        G[from].push_back(eidx - <span class="number">1</span>), G[to].push_back(eidx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dinic &#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> Graph;</span><br><span class="line">    <span class="keyword">size_t</span> cur[MAXV];</span><br><span class="line">    <span class="keyword">int</span> depth[MAXV], vis[MAXV], Time;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        Q.push(S), vis[S] = ++Time, depth[S] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; G[u].size(); ++i) &#123;</span><br><span class="line">                <span class="keyword">const</span> Edge&amp; e = edges[G[u][i]];</span><br><span class="line">                <span class="keyword">if</span> (vis[e.to] != Time &amp;&amp; dcmp(e.cap - e.flow) &gt; <span class="number">0</span>)</span><br><span class="line">                    vis[e.to] = Time, depth[e.to] = depth[u] + <span class="number">1</span>, Q.push(e.to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vis[T] == Time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">double</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == T || !dcmp(a)) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">double</span> f, flow = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span>&amp; i = cur[u]; i &lt; G[u].size(); ++i) &#123;</span><br><span class="line">            Edge&amp; e = edges[G[u][i]];</span><br><span class="line">            <span class="keyword">if</span> (depth[e.to] == depth[u] + <span class="number">1</span> &amp;&amp;</span><br><span class="line">                    dcmp(f = DFS(e.to, min(a, e.cap - e.flow))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                flow += f, a -= f, e.flow += f, edges[G[u][i] ^ <span class="number">1</span>].flow -= f;</span><br><span class="line">                <span class="keyword">if</span> (!dcmp(a)) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">Maxflow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> flow = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">while</span> (BFS())</span><br><span class="line">            <span class="built_in">memset</span>(cur, <span class="number">0</span>, <span class="keyword">sizeof</span> cur), flow += DFS(S, INFD);</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Line <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp; limit)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    Graph::init(T + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// build graph</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (B[i] &lt;= limit) Graph::AddEdge(S, i, C[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (B[i] &lt;= limit) &#123;</span><br><span class="line">            <span class="keyword">double</span> c = (limit - B[i]) / (<span class="number">2.0</span> * A[i]);</span><br><span class="line">            Graph::AddEdge(S, i, min(<span class="number">1.0</span> * C[i], c));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">        Graph::AddEdge(n + j, T, D[j]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">            <span class="keyword">if</span> (M[i][j]) Graph::AddEdge(i, n + j, INFD);</span><br><span class="line">    <span class="comment">// check</span></span><br><span class="line">    Dinic::Maxflow();</span><br><span class="line">    Frac k = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Dinic::vis[i] == Dinic::Time) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (A[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (B[i] &lt;= limit) b += C[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (B[i] &lt;= limit) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2.0</span> * A[i] * C[i] + B[i] &gt; limit)</span><br><span class="line">                k += Frac(<span class="number">1</span>, <span class="number">2</span> * A[i]), b += Frac(-B[i], <span class="number">2</span> * A[i]);</span><br><span class="line">            <span class="keyword">else</span> b += C[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">        <span class="keyword">if</span> (Dinic::vis[n + j] == Dinic::Time) b += D[j];</span><br><span class="line">    <span class="keyword">return</span> Line(k, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Divide</span><span class="params">(<span class="keyword">const</span> Line&amp; L, <span class="keyword">const</span> Line&amp; R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == R) <span class="keyword">return</span>;</span><br><span class="line">    Frac px = (L.b - R.b) / (R.k - L.k);</span><br><span class="line">    Line mL = calc(px.val() - EPS), mR = calc(px.val() + EPS);</span><br><span class="line">    <span class="keyword">if</span> (L == mL)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">void</span>( P.push_back(Point(px, px * L.k + L.b)) );</span><br><span class="line">    Divide(L, mL), Divide(mR, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, A + i, B + i, C + i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, D + j);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, M[i] + j);</span><br><span class="line">    <span class="comment">// solve 1</span></span><br><span class="line">    S = <span class="number">0</span>, T = n + m + <span class="number">1</span>;</span><br><span class="line">    Graph::init(T + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) Graph::AddEdge(S, i, C[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) Graph::AddEdge(n + j, T, D[j]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">            <span class="keyword">if</span> (M[i][j]) Graph::AddEdge(i, n + j, INFD);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%0.lf\n"</span>, Dinic::Maxflow());</span><br><span class="line">    <span class="comment">// solve 2</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= <span class="number">4</span>; ++x) &#123;</span><br><span class="line">        <span class="keyword">double</span> L = x - <span class="number">1</span>, R = (x &lt;= <span class="number">3</span>)? x: INFD;</span><br><span class="line">        Line l1 = calc(L + EPS), l2 = calc(R - EPS);</span><br><span class="line">        P.push_back(Point(Frac(L), l1.k * Frac(L) + l1.b));</span><br><span class="line">        Divide(l1, l2);</span><br><span class="line">        P.push_back(Point(Frac(R), l2.k * Frac(R) + l2.b));</span><br><span class="line">    &#125;</span><br><span class="line">    P.pop_back();</span><br><span class="line">    Frac ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i &lt; P.size(); ++i)</span><br><span class="line">        ans += (P[i].y + P[i - <span class="number">1</span>].y) * (P[i].x - P[i - <span class="number">1</span>].x);</span><br><span class="line">    <span class="keyword">const</span> Point&amp; p = P.back();</span><br><span class="line">    ans = p.x * p.y - Frac(<span class="number">1</span>, <span class="number">2</span>) * ans;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>, ans.x, ans.y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「ZJOI2015」幻想乡-Wi-Fi-搭建计划"><a href="#「ZJOI2015」幻想乡-Wi-Fi-搭建计划" class="headerlink" title="「ZJOI2015」幻想乡 Wi-Fi 搭建计划"></a>「ZJOI2015」幻想乡 Wi-Fi 搭建计划</h3><h4 id="题目链接-5"><a href="#题目链接-5" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2139" target="_blank" rel="noopener">https://loj.ac/problem/2139</a></li></ul><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p><del>对着费用流建半天图还调半天结果发现假了是屑…</del></p><p>首先第一问容易有在 $O(nm)$ 的时间复杂度内计算的方法, 下文不再考虑覆盖不到的景点.</p><p>先考虑架设点只在一边的情况. 有一个结论: 将架设点和景点分别按照 $x$ 坐标排序, 那么在最优的方案下, 选择的架设点覆盖到的景点一定是排序后连续的一段.</p><p>证明大概是利用长方形宽为 $R$, 同时覆盖半径为 $R$, 恰好不能构造出反例吧… 不大会证.png</p><p>有了这个条件, 直接记录选择到第几个架设点 DP 即可.</p><p>那么架设点在两侧的情况, 直接在 DP 时多记录一维, 即在另一侧选择到第几个架设点, 对于一个景点分别考虑在两侧架设的情况.</p><p>具体地, 设 $f(i, j, k)$ 表示已经覆盖到第 $i$ 个景点, 两侧架设点分别选择到 $j$, $k$. 转移比较显然, 看代码理解就好了.</p><p>时间复杂度 $O(nm^3)$, 但是跑不满.</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2139</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ckmin</span><span class="params">(T&amp; a, <span class="keyword">const</span> T&amp; b)</span> </span>&#123; <span class="keyword">if</span> (a &gt; b) a = b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e2</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Geo &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Vector</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        Vector(<span class="keyword">int</span> _x = <span class="number">0</span>, <span class="keyword">int</span> _y = <span class="number">0</span>): x(_x), y(_y) &#123; &#125;</span><br><span class="line">        Vector <span class="keyword">operator</span> - (<span class="keyword">const</span> Vector&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Vector(x - rhs.x, y - rhs.y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">typedef</span> Vector Point;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; A, <span class="keyword">const</span> Point&amp; B) &#123;</span><br><span class="line">        <span class="keyword">return</span> (A.x &lt; B.x) || (A.x == B.x &amp;&amp; A.y &lt; B.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">Dot</span><span class="params">(<span class="keyword">const</span> Vector&amp; A, <span class="keyword">const</span> Vector&amp; B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1L</span>L * A.x * B.x + <span class="number">1L</span>L * A.y * B.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">Length2</span><span class="params">(<span class="keyword">const</span> Vector&amp; A)</span> </span>&#123; <span class="keyword">return</span> Dot(A, A); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">Dist2</span><span class="params">(<span class="keyword">const</span> Point&amp; p1, <span class="keyword">const</span> Point&amp; p2)</span> </span>&#123; <span class="keyword">return</span> Length2(p1 - p2); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Geo;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Item</span> &#123;</span></span><br><span class="line">    Point p; <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Item&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> p &lt; rhs.p; &#125;</span><br><span class="line">&#125; U[MAXN], D[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m; LL R;</span><br><span class="line">Point P[MAXN];</span><br><span class="line"><span class="keyword">int</span> f[MAXN][MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;n, &amp;m, &amp;R), R *= R;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x, y, i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y), P[i] = Point(x, y);</span><br><span class="line">    <span class="keyword">int</span> nU = <span class="number">0</span>, nD = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x, y, c, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;c);</span><br><span class="line">        <span class="keyword">if</span> (y &lt; <span class="number">0</span>) D[++nD] = (Item)&#123; Point(x, y), c &#125;;</span><br><span class="line">        <span class="keyword">else</span> U[++nU] = (Item)&#123; Point(x, y), c &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">int</span> nP = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; !flag &amp;&amp; j &lt;= nD; ++j)</span><br><span class="line">            <span class="keyword">if</span> (Dist2(P[i], D[j].p) &lt;= R) flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; !flag &amp;&amp; j &lt;= nU; ++j)</span><br><span class="line">            <span class="keyword">if</span> (Dist2(P[i], U[j].p) &lt;= R) flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag) P[++nP] = P[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(P + <span class="number">1</span>, P + nP + <span class="number">1</span>);</span><br><span class="line">    sort(D + <span class="number">1</span>, D + nD + <span class="number">1</span>), sort(U + <span class="number">1</span>, U + nU + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nP; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= nU; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= nD; ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span> &amp;&amp; Dist2(P[i], U[j].p) &lt;= R) ckmin(f[i][j][k], f[i - <span class="number">1</span>][j][k]);</span><br><span class="line">            <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; Dist2(P[i], D[k].p) &lt;= R) ckmin(f[i][j][k], f[i - <span class="number">1</span>][j][k]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l = j + <span class="number">1</span>; l &lt;= nU; ++l)</span><br><span class="line">                <span class="keyword">if</span> (Dist2(P[i], U[l].p) &lt;= R) ckmin(f[i][l][k], f[i - <span class="number">1</span>][j][k] + U[l].w);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l = k + <span class="number">1</span>; l &lt;= nD; ++l)</span><br><span class="line">                <span class="keyword">if</span> (Dist2(P[i], D[l].p) &lt;= R) ckmin(f[i][j][l], f[i - <span class="number">1</span>][j][k] + D[l].w);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> Mn = INT_MAX;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= nU; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= nD; ++k) ckmin(Mn, f[nP][j][k]);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n%d\n"</span>, nP, Mn);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;做这套题纯粹是为了好玩… 结果惨遭吊打 = =&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://depletedprism.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>GXOI / GZOI 2019 大赏</title>
    <link href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/GXOI-GZOI-2019-sol/"/>
    <id>https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/GXOI-GZOI-2019-sol/</id>
    <published>2020-04-18T04:22:41.000Z</published>
    <updated>2020-04-19T14:31:25.453Z</updated>
    
    <content type="html"><![CDATA[<hr><p><del>从 LOJ 的通过人数可以看出, 这里没有毒瘤题.</del></p><p>假的, 都是毒瘤.</p><a id="more"></a><h3 id="「GXOI-GZOI2019」与或和"><a href="#「GXOI-GZOI2019」与或和" class="headerlink" title="「GXOI / GZOI2019」与或和"></a>「GXOI / GZOI2019」与或和</h3><h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3083" target="_blank" rel="noopener">https://loj.ac/problem/3083</a></li></ul><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>在二进制下逐位考虑, 那么此时的矩阵就是 0-1 矩阵.</p><p>如果子矩阵 AND 值为 $1$, 则子矩阵内都为 $1$.</p><p>同理, 如果子矩阵 OR 值为 $1$, 则子矩阵任意存在一个 $1$ 即可.</p><p>先考虑 AND 的情况.</p><p>记 $f(i, j)$ 为位置 $(i,\ j)$ 上方 (包含 $(i,\ j)$) 最多 $1$ 的个数. 那么固定行的位置 $i$, 从左向右枚举列的位置 $j$, 每个位置 $(i, j)$ 对全 $1$ 子矩阵的贡献可看作 $f(i, j)$ 向左延伸的最大距离, 用单调栈维护这个过程即可.</p><p>OR 的情况类似. 任意存在一个 $1$ 的情况不好统计, 如果枚举矩阵中每一个位置 $(i,\ j)$, 那么以这个位置为右下角的子矩阵共有 $i \times j$ 个. 可以用所有情况减去子矩阵内都为 $0$ 的情况. 这样就 AND 一样了.</p><p>时间复杂度 $(n ^ 2 \log A)$, 其中 $A$ 为矩阵内最大值.</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>随手打了个 $998244353$ 作为模数结果调半天的是屑…</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">5</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> A[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[MAXN];</span><br><span class="line"><span class="keyword">int</span> stk[MAXN], top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) f[j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            f[j] = ((A[i][j] &gt;&gt; k) &amp; <span class="number">1</span>)? f[j] + <span class="number">1</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> s = stk[top = <span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            s += f[j];</span><br><span class="line">            <span class="keyword">while</span> (top &gt; <span class="number">0</span> &amp;&amp; f[stk[top]] &gt; f[j])</span><br><span class="line">                s -= (stk[top] - stk[top - <span class="number">1</span>]) * (f[stk[top]] - f[j]), --top;</span><br><span class="line">            stk[++top] = j;</span><br><span class="line">            ret = (ret + s) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1L</span>L &lt;&lt; k) * ret % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) f[j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            f[j] = ((A[i][j] &gt;&gt; k) &amp; <span class="number">1</span>)? <span class="number">0</span>: f[j] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> s = stk[top = <span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            s += f[j];</span><br><span class="line">            <span class="keyword">while</span> (top &gt; <span class="number">0</span> &amp;&amp; f[stk[top]] &gt; f[j])</span><br><span class="line">                s -= (stk[top] - stk[top - <span class="number">1</span>]) * (f[stk[top]] - f[j]), --top;</span><br><span class="line">            stk[++top] = j;</span><br><span class="line">            ret = (ret + (i * j - s)) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1L</span>L &lt;&lt; k) * ret % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">int</span> MxA = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            read(A[i][j]), MxA = max(MxA, A[i][j]);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">int</span> a1 = <span class="number">0</span>, a2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; (<span class="number">1L</span>L &lt;&lt; k) &lt;= MxA; ++k)</span><br><span class="line">        a1 = (a1 + solve1(k)) % P, a2 = (a2 + solve2(k)) % P;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, a1, a2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「GXOI-GZOI2019」宝牌一大堆"><a href="#「GXOI-GZOI2019」宝牌一大堆" class="headerlink" title="「GXOI / GZOI2019」宝牌一大堆"></a>「GXOI / GZOI2019」宝牌一大堆</h3><h4 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3084" target="_blank" rel="noopener">https://loj.ac/problem/3084</a></li></ul><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p><del>麻将题.</del></p><p>首先考虑 “国士无双” 和 “七对子”. 前者枚举 $14$ 张牌中选择哪一张牌出现两次, 统计分数即可. 后者选择分数最高的 $7$ 组雀头即可.</p><p>注意到 $\binom{4}{4} = 1 &lt; \binom{4}{3} = 4$, 在题目条件下, 即使是宝牌, 组合成杠子一定不优. 所以现在需要考虑的部分只有 “$3 \times 4 + 2$”.</p><p>如果之前有做过其他麻将 / 斗地主一类的题, 容易有高维 DP 的思路.</p><p>现在需要注意顺子, 刻子, 以及雀头的个数. 记 $f(i, j, k, l, s)$ 表示考虑完第 $i$ 张牌, 共组合成 $j$ 组面子, 准备以第 $i-1$ 张牌开始的顺子有 $k$ 组, 准备以第 $i$ 张牌开始的顺子有 $l$ 组, 且雀头的个数为 $s$.</p><p>以顺子为例, 记 $s$ 为第 $i + 1$ 张牌加入 $c$ 张时对分数的贡献, $\operatorname{Cnt}(i + 1)$ 为第 $i + 1$ 张牌剩余个数, 那么有</p><p>$$f(i + 1,\ j + k,\ l,\ c - k - l,\ 0) = \max_{c = k + l} ^ {\operatorname{Cnt}(i + 1)} \{ s \cdot f(i,\ j,\ k,\ l,\ 0 ) \} \\<br>f(i + 1,\ j + k,\ l,\ c - k - l,\ 1) = \max_{c = k + l} ^ {\operatorname{Cnt}(i + 1)} \{ s \cdot f(i,\ j,\ k,\ l,\ 1 ) \}$$</p><p>剩下的刻子和雀头的转移类似, 也就是在顺子的基础上多挑出一些牌组成刻子 / 雀头.</p><p>还有一些值得注意的地方:</p><ol><li>三组顺子和三组刻子的等价的, 每次枚举顺子组数不超过 $2$ 即可.</li><li>形同 <code>8m, 9m, ..., E, N, ..., Z, B, ...</code> 的牌型不能组成顺子, 在枚举 $k$, $l$ 的时候需要特判.</li><li>在遇到 $f$ 为 $0$ 的情况可以避免不必要的转移.</li></ol><p>记 $n = 34 \times 5 \times 3 \times 3 \times 2 \times 5 = 15300$, 那么时间复杂度为 $O(T n)$.</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p><del>预感到写起来会很毒瘤, 于是改用了之前写计算几何的码风</del>.</p><p>其实就是多打点空格, 少压一点行, 和一些以为然的注释…</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3084</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ckmax</span><span class="params">(T&amp; x, <span class="keyword">const</span> T&amp; y)</span> </span>&#123; <span class="keyword">if</span> (x &lt; y) x = y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">16</span>, MAXM = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> C[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> Cnt[MAXM], isDora[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; Mahj;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// binom</span></span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>] = C[<span class="number">1</span>][<span class="number">0</span>] = C[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAXN; ++i) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)</span><br><span class="line">            C[i][j] = C[i - <span class="number">1</span>][j] + C[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// string --&gt; type</span></span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">        s = <span class="string">"m"</span>, Mahj[<span class="keyword">char</span>(<span class="string">'0'</span> + i) + s] = <span class="number">0</span> + i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">        s = <span class="string">"p"</span>, Mahj[<span class="keyword">char</span>(<span class="string">'0'</span> + i) + s] = <span class="number">9</span> + i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">        s = <span class="string">"s"</span>, Mahj[<span class="keyword">char</span>(<span class="string">'0'</span> + i) + s] = <span class="number">18</span> + i;</span><br><span class="line">    Mahj[<span class="string">"E"</span>] = <span class="number">28</span>, Mahj[<span class="string">"S"</span>] = <span class="number">29</span>, Mahj[<span class="string">"W"</span>] = <span class="number">30</span>, Mahj[<span class="string">"N"</span>] = <span class="number">31</span>;</span><br><span class="line">    Mahj[<span class="string">"Z"</span>] = <span class="number">32</span>, Mahj[<span class="string">"B"</span>] = <span class="number">33</span>, Mahj[<span class="string">"F"</span>] = <span class="number">34</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">Normal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> LL f[MAXM][<span class="number">5</span>][<span class="number">3</span>][<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; MAXM; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">4</span>; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span> &amp;&amp; j + k &lt;= <span class="number">4</span>; ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; (i == <span class="number">9</span> || i == <span class="number">18</span> || i &gt;= <span class="number">27</span>)) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt;= <span class="number">2</span> &amp;&amp; j + k + l &lt;= <span class="number">4</span>; ++l) &#123;</span><br><span class="line">                <span class="keyword">if</span> (l &gt; <span class="number">0</span> &amp;&amp; (i == <span class="number">9</span> || i == <span class="number">18</span> || i &gt;= <span class="number">27</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (!f[i][j][k][l][<span class="number">0</span>] &amp;&amp; !f[i][j][k][l][<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> c = k + l; c &lt;= Cnt[i + <span class="number">1</span>]; ++c) &#123;</span><br><span class="line">                    LL s = C[Cnt[i + <span class="number">1</span>]][c] * (<span class="number">1L</span>L &lt;&lt; (c * isDora[i + <span class="number">1</span>]));</span><br><span class="line">                    LL f0 = s * f[i][j][k][l][<span class="number">0</span>], f1 = s * f[i][j][k][l][<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">// Shuntsu</span></span><br><span class="line">                    <span class="keyword">if</span> (j + k &lt;= <span class="number">4</span> &amp;&amp; c - k - l &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">                        ckmax(f[i + <span class="number">1</span>][j + k][l][c - k - l][<span class="number">0</span>], f0);</span><br><span class="line">                        ckmax(f[i + <span class="number">1</span>][j + k][l][c - k - l][<span class="number">1</span>], f1);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// Koutsu</span></span><br><span class="line">                    <span class="keyword">if</span> (j + k + <span class="number">1</span> &lt;= <span class="number">4</span> &amp;&amp; c - k - l - <span class="number">3</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        ckmax(f[i + <span class="number">1</span>][j + k + <span class="number">1</span>][l][c - k - l - <span class="number">3</span>][<span class="number">0</span>], f0);</span><br><span class="line">                        ckmax(f[i + <span class="number">1</span>][j + k + <span class="number">1</span>][l][c - k - l - <span class="number">3</span>][<span class="number">1</span>], f1);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// Jantou</span></span><br><span class="line">                    <span class="keyword">if</span> (j + k &lt;= <span class="number">4</span> &amp;&amp; c - k - l - <span class="number">2</span> &gt;= <span class="number">0</span>)</span><br><span class="line">                        ckmax(f[i + <span class="number">1</span>][j + k][l][c - k - l - <span class="number">2</span>][<span class="number">1</span>], f0);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> f[MAXM - <span class="number">1</span>][<span class="number">4</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">KokushiMusou</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> Need[] = &#123; <span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (Cnt[Need[i]] == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    LL ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span>&amp; dmahj = Need[i];</span><br><span class="line">        LL now = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">13</span>; ++j) <span class="keyword">if</span> (j != i) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span>&amp; smahj = Need[j];</span><br><span class="line">            now *= C[Cnt[smahj]][<span class="number">1</span>] * (<span class="number">1L</span>L &lt;&lt; isDora[smahj]);</span><br><span class="line">        &#125;</span><br><span class="line">        ret = max(now * C[Cnt[dmahj]][<span class="number">2</span>] * (<span class="number">1L</span>L &lt;&lt; (<span class="number">2</span> * isDora[dmahj])), ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">13</span> * ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">SevenTiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> LL Points[MAXM];</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXM; ++i) <span class="keyword">if</span> (Cnt[i] &gt;= <span class="number">2</span>)</span><br><span class="line">        Points[tot++] = C[Cnt[i]][<span class="number">2</span>] * (<span class="number">1L</span>L &lt;&lt; (<span class="number">2</span> * isDora[i]));</span><br><span class="line">    <span class="keyword">if</span> (tot &lt; <span class="number">7</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    sort(Points, Points + tot, greater&lt;LL&gt;());</span><br><span class="line">    LL ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i) ret *= Points[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">7</span> * ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> Ti;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; Ti;</span><br><span class="line">    Prepare();</span><br><span class="line">    <span class="keyword">while</span> (Ti--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">string</span> S;</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        <span class="built_in">memset</span>(isDora, <span class="number">0</span>, <span class="keyword">sizeof</span> isDora);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXM; ++i) Cnt[i] = <span class="number">4</span>;</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; S &amp;&amp; S[<span class="number">0</span>] != <span class="string">'0'</span>)</span><br><span class="line">            --Cnt[Mahj[S]];</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; S &amp;&amp; S[<span class="number">0</span>] != <span class="string">'0'</span>)</span><br><span class="line">            isDora[Mahj[S]] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// solve &amp; output</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; max(max(KokushiMusou(), SevenTiles()), Normal()) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「GXOI-GZOI2019」特技飞行"><a href="#「GXOI-GZOI2019」特技飞行" class="headerlink" title="「GXOI / GZOI2019」特技飞行"></a>「GXOI / GZOI2019」特技飞行</h3><h4 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3085" target="_blank" rel="noopener">https://loj.ac/problem/3085</a></li></ul><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>很贴切实际地, 嘉宾团看到的动作和实际在哪个交点选择哪个操作并没有关系, 对答案的贡献只和观察范围内的交点个数有关.</p><p>所以题目可分作两个部分. 第一部分考虑交点的动作选择, 第二部分统计嘉宾团观察交点个数.</p><p>考虑如何处理第一部分.</p><p>注意到两直线相交的条件为 $y_0$ 和 $y_1$ 在 $x_{st}$ 处和 $x_{ed}$ 处的呈逆序, 并保证直线交点个数不大 ($\le 500,000$). 那么直接枚举直线, 暴力统计所有满足的直线计算交点即可. 具体可通过在 <code>set</code> 中二分实现.</p><p>设不计嘉宾团的影响下的答案为 $w$, 选择 $x$ 处交点交换, 共有 $m$ 个交点. 则有</p><p>$$w = a x + b \cdot (m - x)$$</p><p>容易发现 $w$ 是关于 $x$ 的一次函数, 其极值显然在 $x$ 的上下界处取到.</p><p>一个显然的上界是交点个数. 注意到交换航线的操作并不影响纵坐标相对顺序, “能交换就交换” 一定能保持原有的相对位置.</p><p>如果将一个位置向在终点处对应位置的实际编号连边, 一定会构成多个环. <del>实际上是多个置换</del>. 而让大小为 $l$ 的环有序的交换次数为 $l - 1$.</p><p>记环个数为 $c$, 总次数为</p><p>$$\sum_{i = 1} ^ c (l_i - 1) = \sum_{i = 1} ^ c l_i - c = n - c$$</p><p>此处 DFS 遍历一遍所有环统计个数即可.</p><p>考虑如何处理第二部分.</p><p>倾斜的正方形不好处理, 考虑旋转坐标轴, 使得正方形的边同坐标轴平行即可. 这里我将坐标轴逆时针旋转 $\frac{\pi}{4}$, 并将横纵坐标同时乘 $\sqrt 2$, 得出原坐标系下点 $(x,\ y)$ 在旋转后的坐标系中坐标为 $(x + y,\ y - x)$.</p><p>此时直接二维数点即可. 拆成扫描线后是经典问题, 同时只需要 BIT 即可实现.</p><p>记交点个数为 $m$, 那么时间复杂度为 $O\big( n \log n + (m + k) \log (m + k) \big)$.</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p>想清楚细节之后写起来就十分快乐, 调试的时候就非常快乐了 (</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3085</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>, MAXM = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Geo &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">fabs</span>(p) &lt; EPS)? <span class="number">0</span>: (p &lt; <span class="number">0</span>? <span class="number">-1</span>: <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Vector</span> &#123;</span></span><br><span class="line">        <span class="keyword">double</span> x, y;</span><br><span class="line">        Vector(<span class="keyword">double</span> _x = <span class="number">0.0</span>, <span class="keyword">double</span> _y = <span class="number">0.0</span>): x(_x), y(_y) &#123; &#125;</span><br><span class="line">        Vector <span class="keyword">operator</span> + (<span class="keyword">const</span> Vector&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Vector(x + rhs.x, y + rhs.y); &#125;</span><br><span class="line">        Vector <span class="keyword">operator</span> - (<span class="keyword">const</span> Vector&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Vector(x - rhs.x, y - rhs.y); &#125;</span><br><span class="line">        Vector <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">double</span>&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Vector(p * x, p * y); &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">typedef</span> Vector Point;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">Dot</span><span class="params">(<span class="keyword">const</span> Vector&amp; A, <span class="keyword">const</span> Vector&amp; B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> A.x * B.x + A.y * B.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">Cross</span><span class="params">(<span class="keyword">const</span> Vector&amp; A, <span class="keyword">const</span> Vector&amp; B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> A.x * B.y - A.y * B.x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Point <span class="title">LineIntersection</span><span class="params">(Point P, Vector v, Point Q, Vector w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> P + v * (Cross(w, P - Q) / Cross(v, w));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Geo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, K, a, b, c, xst, xed;</span><br><span class="line"><span class="keyword">int</span> Y0[MAXN], Y1[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nP;</span><br><span class="line"><span class="keyword">int</span> pre[MAXN], vis[MAXN];</span><br><span class="line">Point P[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindLineIntersection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">set</span>&lt;Pii&gt; S;</span><br><span class="line">    nP = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        Point p1 = Point(xst, Y0[i]), p2 = Point(xed, Y1[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> ite = S.lower_bound(Pii(Y1[i], i)); ite != S.end(); ++ite) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span>&amp; j = ite-&gt;second;</span><br><span class="line">            Point p3 = Point(xst, Y0[j]), p4 = Point(xed, Y1[j]);</span><br><span class="line">            P[++nP] = LineIntersection(p1, p2 - p1, p3, p4 - p3);</span><br><span class="line">        &#125;</span><br><span class="line">        S.insert(Pii(Y1[i], i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v: S) pre[++cur] = v.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; u)</span> </span>&#123; <span class="keyword">if</span> (!vis[u]) vis[u] = <span class="literal">true</span>, dfs(pre[u]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BIT &#123;</span><br><span class="line">    <span class="keyword">int</span> n, C[MAXM + MAXN * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; p, <span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = p; i &lt;= n + <span class="number">1</span>; i += lowbit(i)) C[i] += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">        Mdy(L, v), Mdy(R + <span class="number">1</span>, -v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = p; i; i -= lowbit(i)) ret += C[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Point <span class="title">Trans</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp; x, <span class="keyword">const</span> <span class="keyword">double</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Point(x + y, y - x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ask</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, L, R; <span class="keyword">int</span> type;</span><br><span class="line">    Ask() = <span class="keyword">default</span>;</span><br><span class="line">    Ask(<span class="keyword">double</span> _x, <span class="keyword">double</span> _L, <span class="keyword">double</span> _R, <span class="keyword">int</span> <span class="keyword">_t</span>): x(_x), L(_L), R(_R), type(<span class="keyword">_t</span>) &#123; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Ask&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (dcmp(x - rhs.x) != <span class="number">0</span>)? x &lt; rhs.x: type &lt; rhs.type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[MAXN * <span class="number">2</span> + MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UselessGuest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> B[MAXN * <span class="number">2</span> + MAXM];</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(K);</span><br><span class="line">    <span class="keyword">int</span> nq = <span class="number">0</span>, nB = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> p, q, r, i = <span class="number">1</span>; i &lt;= K; ++i) &#123;</span><br><span class="line">        read(p), read(q), read(r);</span><br><span class="line">        <span class="keyword">double</span> r0 = p - r + q, r1 = p + q + r, c1 = q - p + r, c0 = q - p - r;</span><br><span class="line">        Q[++nq] = Ask(r0, c0, c1, <span class="number">1</span>), Q[++nq] = Ask(r1, c0, c1, <span class="number">-1</span>);</span><br><span class="line">        B[++nB] = c0, B[++nB] = c1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nP; ++i) &#123;</span><br><span class="line">        Point p = Trans(P[i].x, P[i].y);</span><br><span class="line">        Q[++nq] = Ask(p.x, p.y, p.y, <span class="number">0</span>), B[++nB] = p.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// pre done</span></span><br><span class="line">    sort(B + <span class="number">1</span>, B + <span class="number">1</span> + nB);</span><br><span class="line">    nB = unique(B + <span class="number">1</span>, B + <span class="number">1</span> + nB) - B - <span class="number">1</span>;</span><br><span class="line">    sort(Q + <span class="number">1</span>, Q + <span class="number">1</span> + nq);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    BIT::n = nB;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nq; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Q[i].type == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = lower_bound(B + <span class="number">1</span>, B + nB + <span class="number">1</span>, Q[i].L) - B;</span><br><span class="line">            ret += (BIT::Qry(p) &gt; <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> L = lower_bound(B + <span class="number">1</span>, B + nB + <span class="number">1</span>, Q[i].L) - B,</span><br><span class="line">                R = lower_bound(B + <span class="number">1</span>, B + nB + <span class="number">1</span>, Q[i].R) - B;</span><br><span class="line">            BIT::Mdy(L, R, Q[i].type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(a), read(b), read(c), read(xst), read(xed);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(Y0[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(Y1[i]);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    FindLineIntersection();</span><br><span class="line">    <span class="keyword">int</span> CircleCnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) dfs(i), ++CircleCnt;</span><br><span class="line">    <span class="keyword">int</span> bonus = UselessGuest();</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    LL a1 = a * nP, a2 = (a - b) * (n - CircleCnt) + b * nP;</span><br><span class="line">    <span class="keyword">if</span> (a1 &gt; a2) swap(a1, a2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, a1 + <span class="number">1L</span>L * bonus * c, a2 + <span class="number">1L</span>L * bonus * c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「GXOI-GZOI2019」逼死强迫症"><a href="#「GXOI-GZOI2019」逼死强迫症" class="headerlink" title="「GXOI / GZOI2019」逼死强迫症"></a>「GXOI / GZOI2019」逼死强迫症</h3><h4 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3086" target="_blank" rel="noopener">https://loj.ac/problem/3086</a></li></ul><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p><del>推了个 12 x 12 的矩阵当场弃疗, 翻题解结果只需要 4 x 4…</del></p><p>假定不考虑 $1 \times 1$ 方砖的影响, 那么剩下的就是经典问题了, 其方案数为 Fibonacci 数列, 并记 Fibonacci 数列第 $n$ 项为 $f_n$, 同时有 $f_0 = 1$.</p><p>如果将两个 $1\times 1$ 方砖填入 $2 \times n$ 的格子, 且要求两方砖分别处于第一列和最后一列, 那么只在 $n \ge 3$ 的情况下有合法方案, 可能的方案只有两种, 且具体排布方式和 $n$ 的奇偶性相关.</p><p>此时可以得到这样的思路: 枚举两方砖的间距, 将整体分成两部分, 统计方案数. 可以得出方案数为</p><p>$$2 \sum_{i = 3} ^ {n} \sum_{j = 0} ^ {n - i} f_j \cdot f_{n - i - j}$$</p><p><del>卷积!</del> 卷个锤子. 交换求和顺序, 得</p><p>$$2 \sum_{i = 0} ^ {n - 3} f_i \sum_{j = 0} ^ {n - i - 3} f_j$$</p><p>设 Fibonacci 数列的前缀和第 $n$ 项为 $s_n$, 有 $s_n = s_{n - 1} + s_{n - 2} + 1 = f_{n + 2} - 1$. 归纳可证.</p><p>带入原式, 得</p><p>$$ 2 \sum_{i = 0} ^ {n - 3} f_i \cdot (f_{n - i - 1} - 1) =<br>2 \sum_{i = 0} ^ {n - 3} f_i \cdot f_{n - i - 1} - 2 f_{n - 1} + 2 $$</p><p>设 $g_n = \sum\limits_{ i = 0 } ^ n f_i \cdot f_{n - i}$, 那么可化为</p><p>$$2\ (\sum_{i = 0} ^ {n - 1} f_i \cdot f_{n - i - 1} - f_{n - 1} \cdot f_0 - f_{n - 2} \cdot f_1) - 2 f_{n - 1} + 2$$</p><p>$$2 g_{n - 1} - 2 f_{n - 2} - 4 f_{n - 1} + 2$$</p><p>现在的问题在于如何快速求出 $g_n$.</p><p>$$ g_n = \sum_{i = 0} ^ {n - 1} f_i \cdot f_{n - i} = \sum_{i = 0} ^ {n - 2} f_i \cdot (f_{n - i - 1} + f_{n - i - 2}) + f_{n} + f_{n - 1} $$</p><p><del>想必大家都知道接下来要做什么</del></p><p>$$g_n = (f_{n - 1} + \sum_{i = 0} ^ {n - 2} f_i \cdot f_{n - i - 1} ) + \sum_{i = 0} ^ {n - 2} f_i \cdot f_{n - i - 2} + f_n = g_{n - 1} + g_{n - 2} + f_n$$</p><p>设 $\mathbf{A_{n}} = \begin{bmatrix} f_{n - 1} \\ f_n \\ g_{n - 1} \\ g_{n} \end{bmatrix}$, 有</p><p>$$\mathbf{A_i} = \begin{bmatrix} 0 &amp; 1 &amp; 0 &amp; 0 \\ 1 &amp; 1 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1 \\ 1 &amp; 1 &amp; 1 &amp; 1 \end{bmatrix} \times \mathbf{A_{i - 1}}$$</p><p>矩阵快速幂即可.</p><p>时间复杂度为 $O(T \cdot 4 ^ 3 \log n)$.</p><p><del>那个 12 x 12 的矩阵是大力设状态, xjb 转移的产物.</del></p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3086</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">4</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> A[MAXM][MAXM] = &#123;</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> B[MAXM][MAXM] = &#123;</span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> g[MAXM][MAXM];</span><br><span class="line">    Matrix() &#123; <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g); &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> Matrix&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        Matrix ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXM; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; MAXM; ++k)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAXM; ++j)</span><br><span class="line">                    ret.g[i][j] = (ret.g[i][j] + <span class="number">1L</span>L * g[i][k] * rhs.g[k][j] % P) % P;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXM; ++i) g[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">fpow</span><span class="params">(Matrix base, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    Matrix ret; ret.init();</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = ret * base;</span><br><span class="line">        base = base * base, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> Ti, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Ti);</span><br><span class="line">    Matrix res, base;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXM; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAXM; ++j) base.g[i][j] = A[i][j];</span><br><span class="line">    <span class="keyword">while</span> (Ti--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123; <span class="built_in">puts</span>(<span class="string">"0"</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXM; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAXM; ++j) res.g[i][j] = B[i][j];</span><br><span class="line">        res = fpow(base, n - <span class="number">2</span>) * res;</span><br><span class="line">        <span class="keyword">int</span> g1 = res.g[<span class="number">3</span>][<span class="number">0</span>], f1 = res.g[<span class="number">1</span>][<span class="number">0</span>], f2 = res.g[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ((<span class="number">2L</span>L * g1 - <span class="number">2L</span>L * f2 - <span class="number">4L</span>L * f1 + <span class="number">2</span>) % P + P) % P);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「GXOI-GZOI2019」旅行者"><a href="#「GXOI-GZOI2019」旅行者" class="headerlink" title="「GXOI / GZOI2019」旅行者"></a>「GXOI / GZOI2019」旅行者</h3><h4 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3087" target="_blank" rel="noopener">https://loj.ac/problem/3087</a></li></ul><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p><del>并不优美的题.</del></p><p>我们称 $k$ 座感兴趣的城市为关键点.</p><p>官方题解有一个时间复杂度为 $O(T \cdot m \log m \log k)$ 的做法:</p><p>每次枚举关键点在二进制下的每一位, 按二进制下该位在值将关键点分作两个部分. 建立源点 $s$ 向某一部分连边, 边权为 $0$. 建立汇点 $t$, 令另一部分向 $t$ 连边, 边权为 $0$. 此时 $s$ 到 $t$ 的最短路即为第一部分关键点到另一部分关键点距离的最小值. 重复 $\log k$ 次即可.</p><p>但是还存在时间复杂度为 $O(T \cdot m \log m)$ 的做法.</p><p>同样建立源点 $s$, 向所有关键点连边, 边权为 $0$, 求 $s$ 出发的最短路. 在反图上建立源点 $s$, 向所有关键点连边, 边权为 $0$, 在反图上再次求以 $s$ 为起点的最短路.</p><p>两次求最短路的同时, 分别记录到达点 $u$ 的最短路长度 $d_1(u),\ d_2(u)$, 以及 $p_1(u),\ p_2(u)$, 表示到达 $u$ 的最短路是从关键点 $p(u)$ 出发的.</p><p>对于关键点间最短距离, 其路径上一定不存在另一个关键点. 那么, 枚举每条边 $(u,\ v,\ w)$, 在保证 $p_1(u) \neq p_2(v)$ 的情况下用 $d_1(u) + w + d_2(v)$ 更新答案即可.</p><p>具体实现时不需要显式地建出 $s$. 因为 $s$ 到关键点一定是最短路, 直接将最短路长度初始化后丢进堆里就好了.</p><p>由于只跑两次最短路, 使用 <code>priority_queue</code> 实现的 Dijkstra, 时间复杂度为 $O(T \cdot m \log m)$.</p><p><del>我实在看不懂那些长篇大论的题解在证个什么</del>.</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3087</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">19</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;LL, <span class="keyword">int</span>&gt; Pli;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>, MAXM = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, K;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line"><span class="keyword">int</span> U[MAXM], V[MAXM], W[MAXM];</span><br><span class="line"></span><br><span class="line">LL d1[MAXN], d2[MAXN];</span><br><span class="line"><span class="keyword">int</span> p1[MAXN], p2[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to, w; &#125; edges[MAXM];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to, w &#125;, head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span>* pre, LL* d)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;Pli, <span class="built_in">vector</span>&lt;Pli&gt;, greater&lt;Pli&gt; &gt; PQ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u, i = <span class="number">1</span>; i &lt;= K; ++i)</span><br><span class="line">            u = A[i], PQ.push(Pli(d[u] = <span class="number">0</span>, u)), pre[u] = u;</span><br><span class="line">        <span class="keyword">while</span> (!PQ.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = PQ.top().second; LL w = PQ.top().first; PQ.pop();</span><br><span class="line">            <span class="keyword">if</span> (w != d[u]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt)</span><br><span class="line">                <span class="keyword">if</span> ((d[v = edges[i].to] &gt; d[u] + edges[i].w))</span><br><span class="line">                    pre[v] = pre[u], PQ.push(Pli(d[v] = d[u] + edges[i].w, v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> Ti;</span><br><span class="line">    read(Ti);</span><br><span class="line">    <span class="keyword">while</span> (Ti--) &#123;</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        <span class="built_in">memset</span>(d1, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> d1);</span><br><span class="line">        <span class="built_in">memset</span>(d2, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> d2);</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        read(n), read(m), read(K);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            read(U[i]), read(V[i]), read(W[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; ++i) read(A[i]);</span><br><span class="line">        <span class="comment">// predone 1</span></span><br><span class="line">        Graph::init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) Graph::AddEdge(U[i], V[i], W[i]);</span><br><span class="line">        Graph::Dijkstra(p1, d1);</span><br><span class="line">        <span class="comment">// predone 2</span></span><br><span class="line">        Graph::init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) Graph::AddEdge(V[i], U[i], W[i]);</span><br><span class="line">        Graph::Dijkstra(p2, d2);</span><br><span class="line">        <span class="comment">// solve</span></span><br><span class="line">        LL ans = LLONG_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> &amp;u = U[i], &amp;v = V[i], &amp;w = W[i];</span><br><span class="line">            <span class="keyword">if</span> (p1[u] != p2[v]) ans = min(ans, d1[u] + d2[v] + w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// output</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「GXOI-GZOI2019」旧词"><a href="#「GXOI-GZOI2019」旧词" class="headerlink" title="「GXOI / GZOI2019」旧词"></a>「GXOI / GZOI2019」旧词</h3><h4 id="题目链接-5"><a href="#题目链接-5" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3088" target="_blank" rel="noopener">https://loj.ac/problem/3088</a></li></ul><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p><del>早已跌下神坛的树链剖分.</del></p><p>如果直接做, $x$ 的限制不好处理. 考虑离线, 动态加入 $x$ 的权值, 在一定的时机处理询问.</p><p>现在来讨论一个询问 $(x, y)$ 的答案, 同时称点 $u$ 的权值为 $A_u = \text{depth}(u) ^ k$. 经过上面的处理后, $y$ 的权值对答案的贡献次数为 $y$ 子树内已加入的节点数量.</p><p>形式化地, 记 $y$ 子树内已加入节点数量为 $s_y$, 那么其对答案的贡献为 $s_y \cdot A_y$. 以此类推, $y$ 的某个祖先对答案的贡献则需要抠去重复计算的部分, 即对于 $y$ 的祖先 $u$, 记 $y$ 和 $u$ 之间最靠近 $u$ 的节点为 $v$, 那么 $u$ 的答案的贡献为 $(s_u - s_v) \cdot A_u$.</p><p><del>然后… 然后我就不知道怎么维护了, 参考 <a href="https://www.luogu.com.cn/blog/Mrsrz/solution-p5305" target="_blank" rel="noopener">mrsrz 的题解</a> 之后可以发现</del></p><p>对给定树重链剖分, 直接维护每一条重链对答案的贡献, 接着考虑轻链对答案的影响.</p><p>借助重链剖分后轻重链的结构关系, 轻链两端点一定满足上述 $u$ 和 $v$ 之间的关系. 即计算答案时, 加上轻链顶和轻链底两节点 $s_u$ 的差值乘上轻链顶节点的权值之后的结果.</p><p>修改时维护上述信息即可, 可以用 BIT 简单实现.</p><p>时间复杂度 $O(n \log k + q \log ^ 2 n)$.</p><p>还有一种做法为类似树上差分的思路, 将 LCA 处的值 “平摊” 到根节点到 LCA 的路径上. 利用线段树打上计算次数的标记, 维护权值的增量, 询问时求标记和增量乘积的和就好了.</p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3088</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e4</span> + <span class="number">5</span>, MAXQ = <span class="number">5e4</span> + <span class="number">5</span>, P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * base % P;</span><br><span class="line">        base = <span class="number">1L</span>L * base * base % P, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ask</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> idx, x, y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Ask&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; rhs.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[MAXQ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q, K;</span><br><span class="line"><span class="keyword">int</span> pre[MAXN], dfn[MAXN];</span><br><span class="line"><span class="keyword">int</span> A[MAXN], f[MAXN], Ans[MAXN], depth[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXN];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;, head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BIT1 &#123;</span><br><span class="line">    <span class="keyword">int</span> C[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; p, <span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = p; i &lt;= n + <span class="number">1</span>; i += lowbit(i)) C[i] += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">        Mdy(L, v), Mdy(R + <span class="number">1</span>, -v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = p; i; i -= lowbit(i)) ret += C[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Dff</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; u, <span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Qry(dfn[u]) - ((v &gt; <span class="number">0</span>)? Qry(dfn[v]): <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BIT2 &#123;</span><br><span class="line">    <span class="keyword">int</span> C[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; p, <span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = p; i &lt;= n; i += lowbit(i)) C[i] = (C[i] + v) % P;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = p; i; i -= lowbit(i)) ret = (ret + C[i]) % P;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((Qry(R) - Qry(L - <span class="number">1</span>)) % P + P) % P;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> HLD &#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> Graph;</span><br><span class="line">    <span class="keyword">int</span> size[MAXN], son[MAXN], topfa[MAXN], clk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        son[u] = <span class="number">-1</span>, size[u] = <span class="number">1</span>;</span><br><span class="line">        depth[u] = depth[pre[u]] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            dfs(v = edges[i].to), size[v] += size[u];</span><br><span class="line">            <span class="keyword">if</span> (son[u] == <span class="number">-1</span> || size[v] &gt; size[son[u]]) son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">        topfa[u] = top, dfn[u] = ++clk;</span><br><span class="line">        <span class="keyword">if</span> (~son[u]) dfs(son[u], top);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt)</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) != son[u]) dfs(v, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> rt = <span class="number">1</span>)</span> </span>&#123; dfs(rt), dfs(rt, rt); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = p; u &gt; <span class="number">0</span>; u = pre[topfa[u]]) &#123;</span><br><span class="line">            BIT1::Mdy(dfn[topfa[u]], dfn[u], <span class="number">1</span>);</span><br><span class="line">            BIT2::Mdy(dfn[u], -f[u]);</span><br><span class="line">            BIT2::Mdy(dfn[u], f[u] = <span class="number">1L</span>L * A[u] * BIT1::Dff(u, son[u]) % P);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = p, lst = <span class="number">0</span>; u &gt; <span class="number">0</span>; u = pre[topfa[u]]) &#123;</span><br><span class="line">            ret = (ret + <span class="number">1L</span>L * A[u] * BIT1::Dff(u, lst) % P) % P;</span><br><span class="line">            <span class="keyword">if</span> (u != topfa[u])</span><br><span class="line">                ret = (ret + BIT2::Qry(dfn[topfa[u]], dfn[pre[u]])) % P;</span><br><span class="line">            lst = topfa[u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    Graph::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(q), read(K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        read(pre[i]), Graph::AddEdge(pre[i], i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x, y, i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        read(x), read(y), Q[i] = (Ask)&#123; i, x, y &#125;;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    HLD::solve(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) A[u] = fpow(depth[u], K);</span><br><span class="line">    sort(Q + <span class="number">1</span>, Q + q + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>, i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> Ask&amp; p = Q[i];</span><br><span class="line">        <span class="keyword">while</span> (x &lt;= n &amp;&amp; x &lt;= p.x) HLD::Mdy(x++);</span><br><span class="line">        Ans[p.idx] = HLD::Qry(p.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;del&gt;从 LOJ 的通过人数可以看出, 这里没有毒瘤题.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;假的, 都是毒瘤.&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://depletedprism.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>SDOI 2019 大赏</title>
    <link href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/SDOI-2019-sol/"/>
    <id>https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/SDOI-2019-sol/</id>
    <published>2020-04-15T13:29:06.000Z</published>
    <updated>2020-04-18T05:14:58.391Z</updated>
    
    <content type="html"><![CDATA[<hr><p>从四月开始摸了两周鱼… 感觉不太行, 又滚过来做省选套题了.</p><a id="more"></a><h3 id="「SDOI2019」快速查询"><a href="#「SDOI2019」快速查询" class="headerlink" title="「SDOI2019」快速查询"></a>「SDOI2019」快速查询</h3><h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3110" target="_blank" rel="noopener">https://loj.ac/problem/3110</a></li></ul><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p><del>这道题有意思的地方在于 T2.</del></p><p>显然正解是线性做法. 维护标记 $a$, $b$, $c$, 以及真实值全局和 $s$. 那么, 对于记录的值 $x$, 如果这个位置曾被单点赋值, 其真实值为 $ax + b$. 否则 $x$ 为 $c$.</p><p>可以利用离散化处理数列位置标号的问题. 但是离散化做法在实现时有些繁琐的细节, 于是偷懒用了 <code>unordered_map</code>, 每次全局赋值暴力清空 <code>unordered_map</code> = =</p><p>具体地, 对于操作</p><ol><li><p>更新 $s$, 改变记录的 $A_i$, 使其满足 $a A_i + b = \mathrm{val}$, 即 $A_i \equiv  a ^ {-1} \cdot (\mathrm{val} - b) \pmod P$.</p></li><li><p>更新 $b,\ s$.</p></li><li><p>更新 $a,\ b,\ s$.</p></li><li><p>清空 <code>unordered_map</code>, 初始化 $a,\ b,\ s,\ c$. 清空的时间复杂度和 <code>unordered_map</code> 中元素个数有关, 因此复杂度是对的.</p></li><li><p>在 <code>unordered_map</code> 中查询, 不存在该位置即为 $c$.</p></li><li><p>返回 $s$ 即可.</p></li></ol><p>1 操作需要用到逆元. 注意到模数不大且是质数, 线性预处理逆元即可.</p><p>时间复杂度 $O(tq)$.</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3110</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXQ = <span class="number">1e5</span> + <span class="number">5</span>, P = <span class="number">1e7</span> + <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Opt</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> opt, idx, val;</span><br><span class="line">&#125; Q[MAXQ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q, t, ans;</span><br><span class="line"><span class="keyword">int</span> inv[P];</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; A;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">const</span> Opt&amp; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">0</span>, c = <span class="number">0</span>, s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (p.opt == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A.count(p.idx) &gt; <span class="number">0</span>)</span><br><span class="line">            s = (s - (<span class="number">1L</span>L * a * A[p.idx] % P + b) % P + P) % P;</span><br><span class="line">        <span class="keyword">else</span> s = (s - (<span class="number">1L</span>L * a * c % P + b) % P + P) % P;</span><br><span class="line">        A[p.idx] = <span class="number">1L</span>L * (p.val - b + P) % P * inv[a] % P;</span><br><span class="line">        s = (s + p.val) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p.opt == <span class="number">2</span>)</span><br><span class="line">        b = (b + p.val) % P, s = (s + <span class="number">1L</span>L * n * p.val) % P;</span><br><span class="line">    <span class="keyword">if</span> (p.opt == <span class="number">3</span>) &#123;</span><br><span class="line">        a = <span class="number">1L</span>L * a * p.val % P, b = <span class="number">1L</span>L * b * p.val % P;</span><br><span class="line">        s = <span class="number">1L</span>L * s * p.val % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p.opt == <span class="number">4</span>) &#123;</span><br><span class="line">        a = <span class="number">1</span>, b = <span class="number">0</span>, c = p.val, s = <span class="number">1L</span>L * n * p.val % P;</span><br><span class="line">        A.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p.opt == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A.count(p.idx) &gt; <span class="number">0</span>)</span><br><span class="line">            ans = (ans + (<span class="number">1L</span>L * a * A[p.idx] % P + b) % P) % P;</span><br><span class="line">        <span class="keyword">else</span> ans = (ans + (<span class="number">1L</span>L * a * c % P + b) % P) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p.opt == <span class="number">6</span>)</span><br><span class="line">        ans = (ans + s) % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> opt, idx, val;</span><br><span class="line">        read(opt), idx = val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span> || opt == <span class="number">5</span>) read(idx);</span><br><span class="line">        <span class="keyword">if</span> (opt != <span class="number">5</span> &amp;&amp; opt != <span class="number">6</span>) read(val);</span><br><span class="line">        Q[i] = (Opt)&#123; opt, idx, (val % P + P) % P &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; P; ++i)</span><br><span class="line">        inv[i] = <span class="number">1L</span>L * inv[P % i] * (P - P / i) % P;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    read(t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> a, b;</span><br><span class="line">        read(a), read(b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= q; ++j)</span><br><span class="line">            solve(Q[(a + <span class="number">1L</span>L * j * b % q) % q + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「SDOI2019」染色"><a href="#「SDOI2019」染色" class="headerlink" title="「SDOI2019」染色"></a>「SDOI2019」染色</h3><p><del>暴论: 题目名称叫 “染色” 的都是毒瘤题</del>.</p><h4 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3111" target="_blank" rel="noopener">https://loj.ac/problem/3111</a></li></ul><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>毒瘤题, 琢磨了好久也写了好久.</p><p>参考了 <a href="https://yhx-12243.github.io/OI-transit/records/lydsy5530%3Blg5359%3Bloj3111.html" target="_blank" rel="noopener">yhx-12243 的题解</a>, 感觉 yhx-12243 讲地非常好.</p><p>容易得出一个朴素 DP: 设 $f(i, c_1, c_2)$ 表示处理前 $i$ 列, 第 $i$ 列颜色分别为 $c_1,\ c_2$ 的方案数, 每次转移时枚举颜色.</p><p>考虑到 “相邻节点颜色不同” 的限制只约束了颜色不同, 每次枚举所有颜色看起来没有必要. 同时行数很小, 本质不同的情况很少.</p><p>从这个角度出发, 只考虑被染色的列. 我们称上下两行任意一格已经被染色的列为关键列. 对于两个 “相邻” 的关键列, 也就是两列间不包含其他的关键列, 其对方案数的贡献只和两列的染色的相对情况, 以及相隔未染色列个数有关.</p><p>具体地, 关键列的排布只有以下几种情况. (其中 $x$, $y$ 表示已经确定过的颜色, $w$ 为不同于 $x$, $y$ 的颜色)</p><p>$$\begin{bmatrix} x &amp; \ldots &amp; x \\ y &amp; \ldots &amp; y \end{bmatrix} \tag{0}$$</p><p>$$\begin{bmatrix} x &amp; \ldots &amp; y \\ y &amp; \ldots &amp; x \end{bmatrix} \tag{1}$$</p><p>$$\begin{bmatrix} x &amp; \ldots &amp; x \\ y &amp; \ldots &amp; w \end{bmatrix},  \begin{bmatrix} x &amp; \ldots &amp; w \\ y &amp; \ldots &amp; y \end{bmatrix} \tag{2}$$</p><p>$$\begin{bmatrix} x &amp; \ldots &amp; y \\ y &amp; \ldots &amp; w \end{bmatrix},  \begin{bmatrix} x &amp; \ldots &amp; w \\ y &amp; \ldots &amp; x \end{bmatrix} \tag{3}$$</p><p>$$\begin{bmatrix} x &amp; \ldots &amp; w_1 \\ y &amp; \ldots &amp; w_2 \end{bmatrix} \tag{4}$$</p><p>那么预处理出两关键列之间的转移. 设 $g(i, s)$ 表示两关键列相隔长度为 $i$, 后一关键列状态为 $s$ 的方案数.</p><p>设 $\mathbf{g_i} =\begin{bmatrix} g(i, 0) \\ g(i, 1) \\ g(i, 2) \\ g(i, 3) \\ g(i, 4) \end{bmatrix}$, 大力分类讨论后可以得到转移</p><p>$$\mathbf{g_{i + 1}} = \begin{bmatrix} 0 &amp; 1 &amp; 0 &amp; 2(c-2) &amp; (c-2)(c-3) \\ 1 &amp; 0 &amp; 2(c-2) &amp; 0 &amp; (c-2)(c-3) \\ 0 &amp; 1 &amp; c-2 &amp; (c-2) + (c-3) &amp; (c-3)^2 \\ 1 &amp; 0 &amp; (c - 2) + (c - 3) &amp; c-2 &amp; (c-3) ^ 2 \\ 1 &amp; 1 &amp; 2(c-3) &amp; 2(c-3) &amp; c^2 - 7c + 13  \end{bmatrix} \times \mathbf{g_i}$$</p><p>(其中 $c ^ 2 - 7c + 13$ 由 $(c-2)(c-3) - (c-2) - (c-3)$ 得到)</p><p>通过预处理 $g$, 只需枚举关键列, 通过关键列的颜色分布以及关键列相隔距离转移即可得出答案.</p><p>具体地, 和 yhx-12243 的题解一样, 将转移分为 brute, open, close, move 四个部分, 具体定义参见上述题解 (</p><p>为了表述方便, 记两关键列的颜色的分布情况为 $\begin{bmatrix} l_1 &amp; \ldots &amp; r_1 \\ l_2 &amp; \ldots &amp; r_2 \end{bmatrix}$.</p><ol><li><p>brute</p><p>此时两关键列的情况都唯一, 根据颜色相对情况填上对应情况的数值即可.</p></li><li><p>open</p><p>不妨假设 $r_1$ 为已确定的颜色, 另一种情况同这个情况类似.</p><p>通过比较 $r_1$ 和 $l_1,\ l_2$ 的相等关系, 判定其是否属于情况 2 / 3, 以及枚举 $r_2$ 取值, 并额外处理 $r_2$ 和 $l_1,\ l_2$ 相等的情况.</p></li><li><p>close</p><p>不妨假设 $l_1$ 为已确定的颜色, 另一种情况同这个情况类似.</p><p>同 open 的情况类似, 不过在处理 $l_2$ 和 $r_1,\ r_2$ 相等情况时, 需减去 $l_1$ 时已经计算的部分避免算重.</p></li><li><p>move</p><p>最为繁琐的情况. <del>同时也是前两档部分分的组成</del></p><p>首先需要判定组成的局面构成情况 2 或是情况 3. 接着用类似 open / close 的方法讨论颜色, 注意减去算重的部分.</p></li></ol><p>此外还需要处理首尾关键列的部分, 以及不存在关键列, 或是无解的一些特殊情况, 详细式子相对容易理解, 自行参考代码 (</p><p>综上, 得出了时间复杂度为 $O(nc)$ 的做法.</p><p>可以发现, 转移时的操作恰好是 T1 中的操作, 利用 T1 的做法优化转移即可, 时间复杂度 $O(n + c)$.</p><p><strong>注意, 全局乘 $a$ 时, 如果 $a = 0$, 那么等价于全局赋值 $0$</strong>. 如果 T1 实现不精细, 在这里就会出现问题.</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3111</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>, P = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * base % P;</span><br><span class="line">        base = <span class="number">1L</span>L * base * base % P, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>&amp; x, <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> exgcd(b, a % b, y, x), y -= a / b * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">return</span> exgcd(a, P, x, y), (x % P + P) % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SDOI &#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, b, c, s;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; A;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123; n = _n, a = <span class="number">1</span>, b = c = s = <span class="number">0</span>, A.clear(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">Qry</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> s; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1L</span>L * a * ((A.count(p) &gt; <span class="number">0</span>)? A[p]: c) % P + b) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Sgn</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">        a = <span class="number">1</span>, b = <span class="number">0</span>, c = v, s = <span class="number">1L</span>L * n * v % P, A.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Sgn</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; p, <span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">        s = (s - (<span class="number">1L</span>L * a * ((A.count(p) &gt; <span class="number">0</span>)? A[p]: c) % P + b) % P + P) % P;</span><br><span class="line">        A[p] = <span class="number">1L</span>L * (v - b + P) % P * inv(a) % P, s = (s + v) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123; b = (b + v) % P, s = (s + <span class="number">1L</span>L * n * v % P) % P; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!v) <span class="keyword">return</span> Sgn(v);</span><br><span class="line">        a = <span class="number">1L</span>L * a * v % P, b = <span class="number">1L</span>L * b * v % P, s = <span class="number">1L</span>L * s * v % P;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> SDOI::Sgn; <span class="keyword">using</span> SDOI::Add; <span class="keyword">using</span> SDOI::Mul; <span class="keyword">using</span> SDOI::Qry;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MatrixMul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>* f, <span class="keyword">int</span>* g, <span class="keyword">const</span> <span class="keyword">int</span> (*W)[<span class="number">5</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; ++j) g[i] = (g[i] + <span class="number">1L</span>L * f[j] * W[i][j] % P) % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, C;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], B[MAXN];</span><br><span class="line"><span class="keyword">int</span> pos[MAXN], g[MAXN][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreMatrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = C - <span class="number">2</span>, y = C - <span class="number">3</span>, yy = <span class="number">1L</span>L * y * y % P, xy = <span class="number">1L</span>L * x * y % P;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> W[<span class="number">5</span>][<span class="number">5</span>] = &#123;</span><br><span class="line">        &#123; <span class="number">0</span>, <span class="number">1</span>,   <span class="number">0</span>, <span class="number">2</span>*x, xy &#125;,</span><br><span class="line">        &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>*x,   <span class="number">0</span>, xy &#125;,</span><br><span class="line">        &#123; <span class="number">0</span>, <span class="number">1</span>,   x, x+y, yy &#125;,</span><br><span class="line">        &#123; <span class="number">1</span>, <span class="number">0</span>, x+y,   x, yy &#125;,</span><br><span class="line">        &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>*y, <span class="number">2</span>*y, <span class="keyword">int</span>((C * (C - <span class="number">7L</span>L) + <span class="number">13</span>) % P) &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    g[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) MatrixMul(g[i - <span class="number">1</span>], g[i], W);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">brute</span><span class="params">(<span class="keyword">int</span> l1, <span class="keyword">int</span> l2, <span class="keyword">int</span> r1, <span class="keyword">int</span> r2, <span class="keyword">int</span>* f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> tmp[] = &#123; <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;;</span><br><span class="line">    <span class="keyword">return</span> f[tmp[(l1 == r1) | (l1 == r2) &lt;&lt; <span class="number">1</span> | (l2 == r1) &lt;&lt; <span class="number">2</span> | (l2 == r2) &lt;&lt; <span class="number">3</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> l1, <span class="keyword">int</span> l2, <span class="keyword">int</span> r1, <span class="keyword">int</span> r2, <span class="keyword">int</span>* f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = r1 | r2;</span><br><span class="line">    <span class="keyword">if</span> (!r1 &amp;&amp; r2 &gt; <span class="number">0</span>) swap(l1, l2);</span><br><span class="line">    <span class="keyword">if</span> (l1 == r) Sgn(f[<span class="number">2</span>]), Sgn(l2, f[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l2 == r) Sgn(f[<span class="number">3</span>]), Sgn(l1, f[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">else</span> Sgn(f[<span class="number">4</span>]), Sgn(l1, f[<span class="number">3</span>]), Sgn(l2, f[<span class="number">2</span>]);</span><br><span class="line">    Sgn(r, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> l1, <span class="keyword">int</span> l2, <span class="keyword">int</span> r1, <span class="keyword">int</span> r2, <span class="keyword">int</span>* f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = l1 | l2;</span><br><span class="line">    <span class="keyword">if</span> (!l1 &amp;&amp; l2 &gt; <span class="number">0</span>) swap(r1, r2);</span><br><span class="line">    <span class="keyword">if</span> (l == r1) <span class="keyword">return</span> (Qry() * f[<span class="number">2</span>] + Qry(r2) * (f[<span class="number">0</span>] - f[<span class="number">2</span>] + P)) % P;</span><br><span class="line">    <span class="keyword">if</span> (l == r2) <span class="keyword">return</span> (Qry() * f[<span class="number">3</span>] + Qry(r1) * (f[<span class="number">1</span>] - f[<span class="number">3</span>] + P)) % P;</span><br><span class="line">    <span class="keyword">return</span> (Qry() * f[<span class="number">4</span>] + Qry(r1) * (f[<span class="number">3</span>] - f[<span class="number">4</span>] + P) + Qry(r2) * (f[<span class="number">2</span>] - f[<span class="number">4</span>] + P)) % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> l1, <span class="keyword">int</span> l2, <span class="keyword">int</span> r1, <span class="keyword">int</span> r2, <span class="keyword">int</span>* f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = l1 | l2, r = r1 | r2;</span><br><span class="line">    LL v, s = Qry();</span><br><span class="line">    <span class="keyword">if</span> (!l1 ^ !r1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) Mul((f[<span class="number">1</span>] - f[<span class="number">3</span>] + P) % P), Add(s * f[<span class="number">3</span>] % P);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            v = Qry(r), s = (s - v + P) % P;</span><br><span class="line">            Mul((f[<span class="number">3</span>] - f[<span class="number">4</span>] + P) % P), Add((s * f[<span class="number">4</span>] + v * f[<span class="number">2</span>]) % P);</span><br><span class="line">            Sgn(l, (s * f[<span class="number">2</span>] + v * f[<span class="number">0</span>]) % P);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) Mul((f[<span class="number">0</span>] - f[<span class="number">2</span>] + P) % P), Add(s * f[<span class="number">2</span>] % P);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            v = Qry(r), s = (s - v + P) % P;</span><br><span class="line">            Mul((f[<span class="number">2</span>] - f[<span class="number">4</span>] + P) % P), Add((s * f[<span class="number">4</span>] + v * f[<span class="number">3</span>]) % P);</span><br><span class="line">            Sgn(l, (s * f[<span class="number">3</span>] + v * f[<span class="number">1</span>]) % P);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Sgn(r, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(C);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(A[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(B[i]);</span><br><span class="line">    <span class="comment">// check</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (A[i] || B[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] == B[i]) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"0"</span>), <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] &amp;&amp; A[i] == A[i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"0"</span>), <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (B[i] &amp;&amp; B[i] == B[i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"0"</span>), <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pos[++m] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (!m) &#123;</span><br><span class="line">        ans = <span class="number">1L</span>L * C * (C - <span class="number">1</span>) % P * fpow((C * (C - <span class="number">3L</span>L) + <span class="number">3</span>) % P, n - <span class="number">1</span>) % P;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans), <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    SDOI::init(C), PreMatrix();</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">int</span> u = A[pos[<span class="number">1</span>]], d = B[pos[<span class="number">1</span>]], t = fpow((C * (C - <span class="number">3L</span>L) + <span class="number">3</span>) % P, pos[<span class="number">1</span>] - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (u &amp;&amp; d) ans = t; <span class="keyword">else</span> Add(t), Sgn(u | d, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> lu = u, ld = d, *f = g[pos[i] - pos[i - <span class="number">1</span>]];</span><br><span class="line">        u = A[pos[i]], d = B[pos[i]];</span><br><span class="line">        <span class="keyword">if</span> (u &amp;&amp; d) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lu &amp;&amp; ld) ans = <span class="number">1L</span>L * ans * brute(lu, ld, u, d, f) % P;</span><br><span class="line">            <span class="keyword">else</span> ans = <span class="number">1L</span>L * ans * close(lu, ld, u, d, f) % P;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lu &amp;&amp; ld) open(lu, ld, u, d, f); <span class="keyword">else</span> move(lu, ld, u, d, f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(u &amp;&amp; d)) ans = ans * Qry() % P;</span><br><span class="line">    ans = <span class="number">1L</span>L * ans * fpow((C * (C - <span class="number">3L</span>L) + <span class="number">3</span>) % P, n - pos[m]) % P;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「SDOI2019」世界地图"><a href="#「SDOI2019」世界地图" class="headerlink" title="「SDOI2019」世界地图"></a>「SDOI2019」世界地图</h3><h4 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3112" target="_blank" rel="noopener">https://loj.ac/problem/3112</a></li></ul><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先有一个朴素的想法. 观察到 $1 &lt; L \le R &lt; m$, 预处理前缀 / 后缀的 MST, 每次查询区间 $[L,\ R]$ 时, 合并 $L$ 前以及 $R$ 后的 MST, 同时加入第一列和最后一列的边.</p><p>时间复杂度为 $O(m ^ 2 n \log nm + q n m\log nm)$, 快乐.</p><p>观察到题目中给定的是网格图, 对于前缀或后缀 MST, 除去边界两列, 其 “内部” 列不会再存在边同其相连. 换句话说, 每次合并 MST 时, 用到的部分只有 $2n$ 个边界两列节点, 其内部节点部分并不受影响.</p><p>那么, 每次只记录和这 $2n$ 个点相关的边, 并记录其余边的边权和, 称之为 “虚树”. 每次合并 MST 时, 取出相关的边跑 Kruksal, 之后对得到的生成树建虚树即可.</p><p>对于建虚树的部分, 为了保持 MST 的性质, 涉及到保留哪些节点以及对应边的边权问题. 我们称保留在虚树中的点为 “关键点”, 那么关键点需满足以下任一条件:</p><ol><li><p>设待合并的两棵虚树分别为 $L$, $R$, 那么 $L$ 中最靠前的部分, 以及 $R$ 中最靠后的部分一定是关键点.</p><p>这一部分并不受新增加的边影响, 显然要保留.</p></li><li><p>至少有两个儿子, 满足在儿子的子树内存在关键点.</p></li></ol><p>同时, 只需记录关键点之间最大边权作为合并后虚树边权即可. 根据 MST 的回路性质, 可以发现这是对的.</p><p>时间复杂度 $O(mn \log n + q n\log n)$.</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p>“为什么你们的代码都是一个叫 <code>MST</code> 的结构体, 然后都用一个叫 <code>merge</code> 的函数合并 ?”</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3112</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(args...) fprintf(stderr, ##args)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e2</span> + <span class="number">5</span>, MAXM = <span class="number">1e4</span> + <span class="number">5</span>, MAXV = MAXN &lt;&lt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    Edge(<span class="keyword">int</span> _u, <span class="keyword">int</span> _v, <span class="keyword">int</span> _w): u(_u), v(_v), w(_w) &#123; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> w &lt; rhs.w; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, q, lim;</span><br><span class="line"><span class="keyword">unsigned</span> SA, SB, SC;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; E;</span><br><span class="line"><span class="keyword">int</span> Idx[MAXV], W1[MAXM][MAXN], W2[MAXM][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to, w; &#125; edges[MAXV &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[MAXV], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, (_n + <span class="number">1</span>) * <span class="keyword">sizeof</span> (<span class="keyword">int</span>)), eidx = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to, w &#125;, head[from] = eidx;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[to], from, w &#125;, head[to] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfsPre</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">const</span> <span class="keyword">int</span>&amp; tot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt)</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) != fa) s += dfsPre(v, u, tot);</span><br><span class="line">        <span class="keyword">if</span> (s &gt;= <span class="number">2</span>) Idx[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> s + Idx[u] &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">int</span> lst, <span class="keyword">int</span> w, LL&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Idx[u] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lst &gt; <span class="number">0</span>) E.push_back(::Edge(Idx[lst], Idx[u], w));</span><br><span class="line">            lst = u, s -= w, w = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt)</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) != fa) dfs(v, u, lst, max(w, edges[i].w), s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> DSU &#123;</span><br><span class="line">    <span class="keyword">int</span> fa[MAXV];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; _n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _n; ++i) fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findfa</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; u)</span> </span>&#123; <span class="keyword">return</span> fa[u] == u? u: fa[u] = findfa(fa[u]); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> fu, <span class="keyword">int</span> fv)</span> </span>&#123;</span><br><span class="line">        fu = findfa(fu), fv = findfa(fv);</span><br><span class="line">        <span class="keyword">return</span> (fu == fv)? <span class="literal">false</span>: (fa[fv] = fu, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MST</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v; LL s;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt; E;</span><br><span class="line"></span><br><span class="line">    MST() &#123; &#125;</span><br><span class="line">    MST(<span class="keyword">int</span>* W) &#123;</span><br><span class="line">        v = n, s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) E.push_back(Edge(i, i + <span class="number">1</span>, W[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    MST(<span class="keyword">int</span> _v, LL _s, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;Edge&gt;&amp; _E): v(_v), s(_s), E(_E) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LL ret = s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e: E) ret += e.w;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; pre[MAXM], suf[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function">MST <span class="title">Mrg</span><span class="params">(<span class="keyword">const</span> MST&amp; L, <span class="keyword">const</span> MST&amp; R, <span class="keyword">const</span> <span class="keyword">int</span> *W)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tot = L.v + R.v;</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    E.clear(), DSU::init(tot), Graph::init(tot);</span><br><span class="line">    <span class="comment">// Kruskal</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> Edge&amp; e: L.E) E.push_back(e);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> Edge&amp; e: R.E)</span><br><span class="line">        E.push_back(Edge(L.v + e.u, L.v + e.v, e.w));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        E.push_back(Edge(L.v - n + i, L.v + i, W[i]));</span><br><span class="line">    sort(E.begin(), E.end());</span><br><span class="line">    LL s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> Edge&amp; e: E)</span><br><span class="line">        <span class="keyword">if</span> (DSU::join(e.u, e.v)) Graph::AddEdge(e.u, e.v, e.w), s += e.w;</span><br><span class="line">    <span class="comment">// build virtual tree</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= tot; ++u)</span><br><span class="line">        Idx[u] = (u &lt;= n || u &gt; tot - n);</span><br><span class="line">    Graph::dfsPre(<span class="number">1</span>, <span class="number">0</span>, tot);</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">        <span class="keyword">if</span> (Idx[i] &gt; <span class="number">0</span>) Idx[i] = ++idx;</span><br><span class="line">    E.clear(), Graph::dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, s);</span><br><span class="line">    <span class="keyword">return</span> MST(idx, L.s + R.s + s, E);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Rnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SA ^= SA &lt;&lt; <span class="number">16</span>, SA ^= SA &gt;&gt; <span class="number">5</span>, SA ^= SA &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> t = SA;</span><br><span class="line">    SA = SB, SB = SC, SC ^= t ^ SA;</span><br><span class="line">    <span class="keyword">return</span> SC % lim + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m);</span><br><span class="line">    read(SA), read(SB), read(SC), read(lim);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) W1[j][i] = Rnd();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) W2[j][i] = Rnd();</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    pre[<span class="number">1</span>] = MST(W2[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; m; ++i)</span><br><span class="line">        pre[i] = Mrg(pre[i - <span class="number">1</span>], MST(W2[i]), W1[i - <span class="number">1</span>]);</span><br><span class="line">    suf[m] = MST(W2[m]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt; <span class="number">1</span>; --i)</span><br><span class="line">        suf[i] = Mrg(MST(W2[i]), suf[i + <span class="number">1</span>], W1[i]);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    read(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> L, R; q; --q) &#123;</span><br><span class="line">        read(L), read(R);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, Mrg(suf[R + <span class="number">1</span>], pre[L - <span class="number">1</span>], W1[m]).calc());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「SDOI2019」热闹的聚会与尴尬的聚会"><a href="#「SDOI2019」热闹的聚会与尴尬的聚会" class="headerlink" title="「SDOI2019」热闹的聚会与尴尬的聚会"></a>「SDOI2019」热闹的聚会与尴尬的聚会</h3><h4 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3113" target="_blank" rel="noopener">https://loj.ac/problem/3113</a></li></ul><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>清新题.</p><p>首先有 $\frac{n}{p + 1} &lt; \lfloor \frac{n}{p + 1} \rfloor + 1 \le q + 1$, 也就是 $n &lt; (p + 1) (q + 1)$.</p><p>再进一步转换, 也就是求尽量大的 $p$, $q$. 那么问题可拆分成两部分:</p><ul><li><p>求 $G$ 点集的某个子集 $V’$, 以 $V’$ 和 $G$ 中对应边构成 $G$ 的一张子图 $G’$, 使得 $G’$ 中度数最小点的度数为 $p$.</p></li><li><p>求 $G$ 的最大独立集, 使其大小 $q$ 满足 $n &lt; (p + 1) (q + 1)$.</p></li></ul><p>对于 $p$, 一个显然的思路是依次删除度数尽量小的点, 并在删点的过程中维护当前得到的最大 $p$ 值.</p><p>对于 $q$, 直接做显然是 NPC. 考虑一个贪心, 每次选择度数最小的点, 然后将这个点周围的点删去, 更新其余点的度数.</p><p>考虑如何证明这个做法的正确性.</p><p>求一个可行的 $q$ 时, 删去的节点不超过 $p$ 个. 即 $q \ge \lceil \frac{n}{p + 1} \rceil$. 进行一些转化, 有</p><p>$$\frac{n}{p + 1} &lt;\lceil \frac{n}{p + 1} \rceil +1 \le q + 1$$</p><p>$$n &lt; (p + 1) (q + 1)$$</p><p>这就是要证的.</p><p>时间复杂度大概是 $O((n + m) \log m)$? 感觉很假…</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3113</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">5</span>, MAXM = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Item</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> d, u;</span><br><span class="line">    Item(<span class="keyword">int</span> _d, <span class="keyword">int</span> _u): d(_d), u(_u) &#123; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Item&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> d &gt; rhs.d; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> deg[MAXN];</span><br><span class="line"></span><br><span class="line">priority_queue&lt;Item&gt; PQ;</span><br><span class="line"><span class="keyword">int</span> vis[MAXN], Time;</span><br><span class="line"><span class="keyword">int</span> f[MAXN], A[MAXN], B[MAXN], nA, nB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXM &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;, head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Lively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> Rmv[MAXN], nR, p, limit;</span><br><span class="line">    ++Time, limit = nR = <span class="number">0</span>, p = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u)</span><br><span class="line">        p = min(p, f[u]), PQ.push(Item(f[u] = deg[u], u));</span><br><span class="line">    <span class="keyword">while</span> (!PQ.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = PQ.top().u, d = PQ.top().d; PQ.pop();</span><br><span class="line">        <span class="keyword">if</span> (d != f[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt; d) p = d, limit = nR;</span><br><span class="line">        Rmv[++nR] = u, vis[u] = Time;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = Graph::head[u]; ~i; i = Graph::edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[v = Graph::edges[i].to] == Time) <span class="keyword">continue</span>;</span><br><span class="line">            PQ.push(Item(--f[v], v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    nA = <span class="number">0</span>, ++Time;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= limit; ++i) vis[Rmv[i]] = Time;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u)</span><br><span class="line">        <span class="keyword">if</span> (vis[u] != Time) A[++nA] = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Awkward</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    nB = <span class="number">0</span>, ++Time;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u)</span><br><span class="line">        PQ.push(Item(f[u] = deg[u], u));</span><br><span class="line">    <span class="keyword">while</span> (!PQ.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = PQ.top().u, d = PQ.top().d; PQ.pop();</span><br><span class="line">        <span class="keyword">if</span> (d != f[u] || vis[u] == Time) <span class="keyword">continue</span>;</span><br><span class="line">        B[++nB] = u, vis[u] = Time;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = Graph::head[u]; ~i; i = Graph::edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[v = Graph::edges[i].to] == Time) <span class="keyword">continue</span>;</span><br><span class="line">            vis[v] = Time;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x, j = Graph::head[v]; ~j; j = Graph::edges[j].nxt)</span><br><span class="line">                <span class="keyword">if</span> (vis[x = Graph::edges[j].to] != Time) PQ.push(Item(--f[x], x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> Ti; read(Ti);</span><br><span class="line">    <span class="keyword">while</span> (Ti--) &#123;</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        Graph::init();</span><br><span class="line">        <span class="built_in">memset</span>(deg, <span class="number">0</span>, <span class="keyword">sizeof</span> deg);</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        read(n), read(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            read(u), read(v);</span><br><span class="line">            Graph::AddEdge(u, v), Graph::AddEdge(v, u);</span><br><span class="line">            ++deg[u], ++deg[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// solve</span></span><br><span class="line">        Lively(), Awkward();</span><br><span class="line">        <span class="comment">// output</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, nA);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nA; ++i) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, A[i], <span class="string">" \n"</span>[i == nA]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, nB);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nB; ++i) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, B[i], <span class="string">" \n"</span>[i == nB]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「SDOI2019」移动金币"><a href="#「SDOI2019」移动金币" class="headerlink" title="「SDOI2019」移动金币"></a>「SDOI2019」移动金币</h3><h4 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3114" target="_blank" rel="noopener">https://loj.ac/problem/3114</a></li></ul><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p><del>似乎是单纯的 Staircase Nim 计数?</del></p><p>对题意做一步转化. 将移动金币的过程看作一定量的格子移动到了金币后. 那么, 将金币看作阶梯的分界, 移动金币看作将阶梯上的石子移动到下一层, 显然就是 “阶梯博弈” 的模型了.</p><p>阶梯博弈中, 先手必胜的条件是所有编号为奇 (注意这里的编号从 $0$ 开始) 的阶梯上石子个数异或和不为 $0$. 此时根据后手的决策讨论一番即可得出证明.</p><p>那么, 现在有 $n - m$ 颗石子, 要将这些石子放在在 $m + 1$ 个阶梯上, 求满足限制的方案数.</p><p>注意到 “异或和不为 $0$” 的条件不好处理, 于是改为处理编号为奇数的阶梯上异或和为 $0$ 的方案数. 考虑二进制下按位 DP, 则需要满足的条件为每一位出现 $1$ 的次数为偶数次.</p><p>设 $f(i, j)$ 表示处理完前 $i$ 位, 剩余 $j$ 个石子的方案数. 为满足异或和为 $0$ 的条件, 需要选择偶数个阶梯, 在这些阶梯上放置 $2 ^ i$ 个石子. </p><p>记编号为奇数的阶梯个数为 $q = \lfloor \frac{m + 1}{2} \rfloor$, 有</p><p>$$f(i, j) = \sum_{k \bmod 2 = 0} ^ q f(i + 1, j + k \cdot 2 ^ {i})$$</p><p>记编号为偶数的阶梯个数为 $p = \lceil \frac{m + 1}{2} \rceil$, 最终答案为</p><p>$$\binom{n}{m} - \sum_{i = 0} ^ {n - m} \binom{i + p - 1}{i} \cdot f\big(0,\ i\big)$$</p><p>时间复杂度 $O(nm\log n)$.</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3114</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">15e4</span> + <span class="number">5</span>, MAXM = <span class="number">55</span>, LOG = <span class="number">19</span>, P = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fac[MAXN], ifac[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * base % P;</span><br><span class="line">        base = <span class="number">1L</span>L * base * base % P, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PolyPre</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = ifac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) fac[i] = <span class="number">1L</span>L * i * fac[i - <span class="number">1</span>] % P;</span><br><span class="line">    ifac[N] = fpow(fac[N], P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N; i; --i) ifac[i - <span class="number">1</span>] = <span class="number">1L</span>L * ifac[i] * i % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt; m? <span class="number">0</span>: <span class="number">1L</span>L * fac[n] * ifac[n - m] % P * ifac[m] % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> f[LOG][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="comment">// sovle</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; m) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"0"</span>), <span class="number">0</span>;</span><br><span class="line">    PolyPre(n + m);</span><br><span class="line">    <span class="keyword">int</span> q = (m + <span class="number">1</span>) / <span class="number">2</span>, lg2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; lg2) &lt;= n - m) ++lg2;</span><br><span class="line">    f[lg2][n - m] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lg2 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n - m; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= q &amp;&amp; j + k * (<span class="number">1L</span>L &lt;&lt; i) &lt;= n - m; k += <span class="number">2</span>)</span><br><span class="line">                f[i][j] = (f[i][j] + <span class="number">1L</span>L * C(q, k) * f[i + <span class="number">1</span>][j + k * (<span class="number">1</span> &lt;&lt; i)] % P) % P;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - m; ++i)</span><br><span class="line">        ans = (ans + <span class="number">1L</span>L * C(i + (m + <span class="number">2</span>) / <span class="number">2</span> - <span class="number">1</span>, i) * f[<span class="number">0</span>][i] % P) % P;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (C(n, m) - ans + P) % P);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「SDOI2019」连续子序列"><a href="#「SDOI2019」连续子序列" class="headerlink" title="「SDOI2019」连续子序列"></a>「SDOI2019」连续子序列</h3><h4 id="题目链接-5"><a href="#题目链接-5" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3115" target="_blank" rel="noopener">https://loj.ac/problem/3115</a></li></ul><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p>根据 <del>T.M. 序列</del> $\text{Thue−Morse}$ 序列的定义, 手玩之后可以发现:</p><ol><li><p>序列从 <code>&#39;0&#39;</code> 出发, 定义 “扩充” 为长度为 $n$ 的序列的每一个字符 <code>&#39;0&#39; --&gt; &#39;01&#39;</code>, <code>&#39;1&#39; --&gt; &#39;10&#39;</code>, 从而得到另一个长度 $2n$ 序列. 不断扩充后得到的序列, 恰好是 Thus-Morse 序列.</p></li><li><p>任何子串包含 <code>111</code> 或 <code>000</code> 的串一定不是 Thus-Morse 序列的子串.</p><p>考虑到性质 1 给出的构造 Thus-Morse 序列的方法, 至多有两个相同字符相邻.</p></li><li><p>长度 $&gt; 3$ 的 Thus-Morse 序列子串 $S$ 一定是由唯一的某个 Thus-Morse 序列子串生成的.</p><p>证明参见: <a href="https://okazakiyumemi.github.io/blog/%E3%80%8CSDOI2019%E3%80%8D%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%88%97/" target="_blank" rel="noopener">https://okazakiyumemi.github.io/blog/「SDOI2019」连续子序列/</a>.</p></li></ol><p>此时得到了一个分治做法: 每次由 $S$ 得到扩充操作之前的串 $T$, 然后分治计算 $T$ 的答案再加以合并.</p><p>注意在得出扩充操作前的串 $T$ 时, 需讨论从 $S$ 开头匹配, 以及在 $S$ 前增加一个字符后两种情况. 后者可看作 “$T$ 是 T.M. 的连续子序列” 条件下多考虑的情况.</p><p>此外, $|S| \le 3$ 时的问题仍然没有解决.</p><p>除去 $|S| = 2$ 或 $|S| = 3$ 的一些特殊情况, 剩余的问题在于 $|S| = 1$.</p><p>设 $f(k)$ 表示一个字符后添加恰好 $k$ 个字符, 得出合法序列的方案数. 不难发现, 这个字符为 <code>0</code> / <code>1</code> 并不影响 $f(k)$ 的值, 并有</p><p>$$f(k) = f(\lfloor \frac{k}{2} \rfloor) + f(\lfloor \frac{k + 1}{2} \rfloor)$$</p><p>记忆化即可. 并存在初值 $f(0) = 1,\ f(1) = 2,\ f(2) = 3$.</p><p>时间复杂度大概是 $O(T \cdot (|S| + \log k))$?</p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3115</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> LL&amp; k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">unordered_map</span>&lt;LL, <span class="keyword">int</span>&gt; mf;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; <span class="number">3</span>) <span class="keyword">return</span> k + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (mf.count(k) &gt; <span class="number">0</span>)? mf[k]: mf[k] = (f(k / <span class="number">2</span>) + f((k + <span class="number">1</span>) / <span class="number">2</span>)) % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">compress</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; S, <span class="built_in">string</span>&amp; T)</span> </span>&#123;</span><br><span class="line">    T.clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; S.size(); i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> != S.size() &amp;&amp; S[i] == S[i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        T += S[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; S, <span class="keyword">const</span> LL&amp; K)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lgt = (<span class="keyword">int</span>) S.size();</span><br><span class="line">    <span class="keyword">if</span> (lgt == <span class="number">1</span>) <span class="keyword">return</span> f(K);</span><br><span class="line">    <span class="keyword">if</span> (lgt == <span class="number">2</span> &amp;&amp; K == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 10 / 01, 11 / 00</span></span><br><span class="line">    <span class="keyword">if</span> (lgt == <span class="number">2</span> &amp;&amp; K == <span class="number">1</span>) <span class="keyword">return</span> (S[<span class="number">0</span>] == S[<span class="number">1</span>])? <span class="number">1</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (lgt == <span class="number">3</span> &amp;&amp; K == <span class="number">0</span>) <span class="keyword">return</span> S[<span class="number">0</span>] != S[<span class="number">1</span>] || S[<span class="number">1</span>] != S[<span class="number">2</span>]; <span class="comment">// 111, 000</span></span><br><span class="line">    <span class="built_in">string</span> T;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (compress(S, T))</span><br><span class="line">        ret = (ret + solve(T, (K + !(lgt &amp; <span class="number">1</span>)) / <span class="number">2</span>)) % P;</span><br><span class="line">    <span class="keyword">if</span> (compress((S[<span class="number">0</span>] == <span class="string">'0'</span>? <span class="string">'1'</span>: <span class="string">'0'</span>) + S, T))</span><br><span class="line">        ret = (ret + solve(T, (K + (lgt &amp; <span class="number">1</span>)) / <span class="number">2</span>)) % P;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> Ti;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; Ti;</span><br><span class="line">    <span class="keyword">for</span> (LL K; Ti; --Ti) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">string</span> str;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str &gt;&gt; K;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; solve(str, K) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;从四月开始摸了两周鱼… 感觉不太行, 又滚过来做省选套题了.&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://depletedprism.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>一些简单的图计数问题</title>
    <link href="https://depletedprism.github.io/%E7%AC%94%E8%AE%B0/graph-count/"/>
    <id>https://depletedprism.github.io/%E7%AC%94%E8%AE%B0/graph-count/</id>
    <published>2020-04-07T13:31:16.000Z</published>
    <updated>2020-04-21T04:41:41.553Z</updated>
    
    <content type="html"><![CDATA[<hr><p><del>老年健忘选手终于下定决心去学数数了.</del></p><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>大概是利用生成函数推出一些式子, 然后拿多项式去算吧 = =</p><a id="more"></a><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ol><li><p>多项式的相关运算</p><p>最好有跑地比谁都快的板子, 以免在做题的时候被卡常.</p></li><li><p>生成函数</p><p>对于一个数列 ${ a_n }$, 有</p><p>${ a_n }$ 的普通生成函数 (<strong>O</strong>rdinary <strong>G</strong>enerating <strong>F</strong>unction, OGF), 为</p><p>$$g(x) = \sum\limits_{k = 0}^\infty a_k x^k$$</p><p>常用于处理无标号问题.</p><p>${ a_n }$ 的指数生成函数, (<strong>E</strong>xponential <strong>G</strong>enerating <strong>F</strong>unction, EGF), 为</p><p>$$g(x) = \sum\limits_{k = 0}^\infty a_k \frac{x^k}{k!}$$</p><p>常用于处理有标号问题.</p><p>${ a_n }$ 的组合生成函数, 为</p><p>$$g(x) = \sum\limits_{k = 0}^\infty a_k \frac{x^k}{2 ^ \binom{k}{2} k!}$$</p><p>其中 “组合生成函数” 是从 JOHNKRAM 课件里看来的新东西, 似乎只在有标号有向图计数中用到过…</p></li><li><p>拉格朗日反演</p><p>在遇到多项式复合逆的时候快速计算出某一位的值.</p><p>设多项式 $F(x),\ G(x)$ 满足 $F(G(x)) = G(F(x)) = x$, 并记 $[x^n]F(x)$ 表示 $F(x)$ 的第 $n$ 次项系数, 那么</p><p>$$ [x^n] G(x) = \frac{1}{n} [x^{n-1}] \left(\frac{x}{F(x)}\right)^n $$</p><p>还有一个拓展形式. 设 $H(x)$ 是另一个多项式, 那么</p><p>$$ [x^n] H\left(G(x)\right) = \frac{1}{n} [x^{n-1}] H’(x) \left(\frac{x}{F(x)}\right)^n $$</p></li></ol><h2 id="连通-不连通"><a href="#连通-不连通" class="headerlink" title="连通 / 不连通?"></a>连通 / 不连通?</h2><p>对于有标号元素 $A$ 组成的集合 $B$, 不妨设 $A$ 的 EGF 为 $A(x)$, 考虑到集合内的元素没有顺序关系. 可以得到 $B$ 的 EGF 为</p><p>$$B(x) = \sum_{k = 0} ^ \infty \frac{A(x) ^ k}{k!} = \exp A(x)$$</p><p>应用在图计数中, 可以将非连通图看作多个连通图构成的集合.</p><p>也就是在确定连通图个数的 EGF 后, 可以通过多项式 $\exp$ 得出非连通图个数的 EGF.</p><h2 id="有标号无向图计数"><a href="#有标号无向图计数" class="headerlink" title="有标号无向图计数"></a>有标号无向图计数</h2><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p>考虑到 Prufer 序列将一个带标号且有 $n$ 个节点的树用 $[1,\ n]$ 中 $n-2$ 个整数表示, 且 Prufer 序列同树一一对应. 那么, 直接统计 Prufer 序列的个数即可.</p><p>记树的 EGF 为 $T(x)$, 那么</p><p>$$T(x) = \sum_{k = 2} ^ \infty \frac{k ^ {k - 2}}{k!} x^k$$</p><p>此时得到是无根树的结果, 而对于有根树, 枚举根的位置计算即可, 也就是无根树的个数乘以点数.</p><h3 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h3><p>对于含有 $n$ 个点的无向图, 先考虑不连通的情况, 直接利用 $\binom{n}{2}$ 条边的存在情况计算即可.</p><p>记无向图的 EGF 为 $G(x)$, 那么</p><p>$$G(x) = \sum_{k = 0} ^ \infty \frac{2 ^ \binom{n}{2}}{k!} x ^ k$$</p><p>根据之前的讨论, 无向连通图的 EGF 即为 $\exp G(x)$.</p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><ul><li><a href="https://www.luogu.com.cn/problem/P4841" target="_blank" rel="noopener">Luogu P4841 城市规划</a></li></ul><h3 id="基环树"><a href="#基环树" class="headerlink" title="基环树"></a>基环树</h3><p>基环树即为包含 $n$ 个节点, $n$ 条边的简单图. 在形态上仅有一个简单环, 且环上每一个节点都是一棵有根树的根节点.</p><p>回忆有标号环的计数, 以及圆排列公式. 对于组合对象 $A$, 由 $A$ 构成的环 $B$ 的 EGF 为</p><p>$$B(x) = \sum_{k = 1} ^ \infty \frac{(k - 1)!}{k!} A(x) ^ k = \sum_{k = 1} ^ \infty \frac{1}{k} A(x) ^ k = - \ln \left(1 - A(x)\right)$$</p><p>注意到基环树上一定存在一个长度 $\ge 3$ 的环, 记有根树的 EGF 为 $T(x)$, 基环树的 EGF 为 $C(x)$, 那么</p><p>$$T(x) = \sum_{k = 1} ^ \infty \frac{k ^ {k - 1}}{k!} x^k $$</p><p>考虑到基环树中的环没有方向, 可以翻转, 直接套用上面的公式会算重.</p><p>$$C(x) = \frac{1}{2} \sum_{k = 3} ^ \infty \frac{T(x) ^ k}{k}$$</p><p>化简之后可得</p><p>$$C(x) = \frac{1}{2} \ln \big(1 - T(x)\big) - \frac{1}{2} T(x) - \frac{1}{4} T(x) ^ 2$$</p><p>利用多项式 $\ln$ 和多项式乘法即可在 $O(n\log n)$ 的时间复杂度内计算.</p><h3 id="仙人掌"><a href="#仙人掌" class="headerlink" title="仙人掌"></a>仙人掌</h3><p>如果一个无向连通图任意一条边最多属于一个简单环, 那么称这个无向连通图为仙人掌.</p><p>先钦定仙人掌上某一点为根, 设 “有根仙人掌” 个数的 EGF 为 $C(x)$, 最后在结果的系数上除 $n$ 即可.</p><p>从 “任意一条边最多属于一个简单环” 这一条件入手. 考虑根节点连出的边, 可以分为简单环上和不属于任何简单环的独立边两种.</p><p>对于环上的边, 设环中点数为 $k + 1$, 考虑环上每一个节点都可以作为有根仙人掌的根, 那么环的生成函数为 $\frac{1}{2} C(x) ^ k$. 对于独立边, 另一端点为有根仙人掌的根, 其生成函数为 $C(x)$.</p><p>而根节点连出的边可看作上述两种情况构成的集合, 同时考虑根节点的影响, 可以得出</p><p>$$C(x) = x \exp\left( C(x) + \frac{1}{2} \sum_{k = 2} ^ \infty C(x) ^ k\right) = x \exp \frac{2C(x) - C(x) ^ 2}{2 - 2 C(x)}$$</p><p><em>此处也可以从圆方树的角度考虑, 可以得到同样的结果.</em></p><p><em>详见: <a href="https://blog.csdn.net/qq_39972971/article/details/89214832" target="_blank" rel="noopener">https://blog.csdn.net/qq_39972971/article/details/89214832</a></em></p><p>然后套牛顿迭代的式子, 记 $C_0(x)$ 为模 $x ^ {\lceil \frac{n}{2} \rceil}$ 意义下的结果, $C(x)$ 为模 $x ^ n$ 意义下的结果, 同时记录 $T(x)$ 来便于表述, 有</p><p>$$T(x) = x \exp \frac{ 2C_0(x) - C_0 (x) ^ 2 }{ 2 - 2 C_0(x) ^ 2 }$$</p><p>$$C(x) = C_0(x) - \frac{ 2T(x) - 2 C_0 }{ \Big( 1 + 1\ /\ \big(C_0(x) ^ 2 - 2C_0(x) + 1\big) \Big) T(x) - 2 }$$</p><p><em>详细的过程可以在 <a href="https://memset0.cn/loj6569" target="_blank" rel="noopener">memset0 的博客</a> 内找到.</em></p><p>至此我们得出了在 $O(n\log n)$ 的时间复杂度内计算 $n$ 项的做法. 实现时可以合并一部分式子来避免重复计算, 以及便于实现.</p><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><ul><li><a href="https://loj.ac/problem/6569" target="_blank" rel="noopener">LOJ #6569 仙人掌计数</a></li><li><a href="https://www.luogu.com.cn/problem/P5434" target="_blank" rel="noopener">Luogu P5434 有标号荒漠计数</a></li></ul><h3 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h3><p>二分图为节点可分作两个集合, 且保证集合内部不存在边的图.</p><p>先考虑将二分图的两个部分黑白染色, 枚举黑色节点的个数 $k$, 容易得到黑白染色的二分图个数 $f_n$ 为</p><p>$$f_n = \sum_{k = 0} ^ n \binom{n}{k} 2 ^ {k (n - k)}$$</p><p>我们有 $k (n - k) = \binom{n}{2} - \binom{k}{2} - \binom{n - k}{2}$, 所以原式可化作</p><p>$$f_n = \sum_{k = 0} ^ n \frac{n!}{k! (n - k)!} 2 ^ \binom{n}{2} 2 ^ {-\binom{k}{2}} 2 ^ {-\binom{n - k}{2}}$$</p><p>$$\frac{f_n}{n!\ 2 ^ {\binom{n}{2}}} = \sum_{k = 0} ^ n \frac{1}{(n - k)!\ 2 ^ \binom{n - k}{2}} \cdot \frac{1}{k!\ 2 ^ \binom{k}{2}}$$</p><p>显然是卷积的形式, 利用 FFT 即可在 $O(n \log n)$ 的时间内计算.</p><p>接下来考虑去掉染色怎么做.</p><p>设黑白染色后的二分图 EGF 为 $F(x)$, 不染色二分图 EGF 为 $B(x)$, 连通的不染色二分图为 $C(x)$. 那么有</p><p>$$F(x) = \sum_{k = 0} ^ \infty \frac{2 ^ k C(x) ^ k}{k!} = \exp \big(2C(x)\big)$$</p><p>$$B(x) = \sum_{k = 0} ^ \infty \frac{C(x) ^ k}{k!} = \exp \big( C(x) \big)$$</p><p>容易发现 $B(x) = \sqrt {F(x)}$, 利用多项式开方即可在 $O(n \log n)$ 的时间内计算.</p><h4 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h4><ul><li><a href="https://zyzoj.com/problem/1191" target="_blank" rel="noopener">ZYZOJ #1191 有标号二分图计数</a></li><li><a href="http://cogs.pro:8081/cogs/problem/problem.php?pid=vzQSJVjPj" target="_blank" rel="noopener">COGS 2393 [HZOI 2015] 有标号的二分图计数 II</a></li><li><a href="http://cogs.pro:8081/cogs/problem/problem.php?pid=vNymQVjPg" target="_blank" rel="noopener">COGS 2395 [HZOI 2015] 有标号的二分图计数 III</a></li></ul><h3 id="边双连通图"><a href="#边双连通图" class="headerlink" title="边双连通图"></a>边双连通图</h3><p>在咕了在咕了.</p><h4 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h4><ul><li><a href="https://www.luogu.com.cn/problem/P5828" target="_blank" rel="noopener">Luogu P5828 边双连通图计数</a></li></ul><h3 id="点双连通图"><a href="#点双连通图" class="headerlink" title="点双连通图"></a>点双连通图</h3><p>在咕了在咕了.</p><h4 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h4><ul><li><a href="https://www.luogu.com.cn/problem/P5827" target="_blank" rel="noopener">Luogu P5827 点双连通图计数</a></li></ul><h2 id="有标号有向图计数"><a href="#有标号有向图计数" class="headerlink" title="有标号有向图计数"></a>有标号有向图计数</h2><h3 id="有向无环图"><a href="#有向无环图" class="headerlink" title="有向无环图"></a>有向无环图</h3><p>考虑容斥.</p><p>设 $d_n$ 表示有 $n$ 个节点的 DAG 个数, 且不要求弱连通. 记 $A_{n, i}$ 表示有 $n$ 个节点, 其中有 $i$ 个节点入度为 $0$. 有</p><p>$$d_n = \mid \bigcap_{i = 0} ^ n A_{n, i} \mid$$</p><p>根据容斥原理展开, 得</p><p>$$d_n = \sum_{k = 1} ^ n (-1) ^ {k - 1} \sum_{1 \le i_1, \ldots, i_k \le n} ^ {} \mid \bigcup_{j = 1} ^ k A_{n, i_j} \mid$$</p><p>注意到后者的并集大小和 $i_j$ 具体取值无关, 也就是在 $n$ 个点中取出 $k$ 个点, 而将这 $k$ 个点删去后剩余 $n - k$ 个点仍然组成 DAG, 且这 $k$ 个点同其余点连边不破坏两边的性质. 因此可得出</p><p>$$d_n = \sum_{k = 1} ^ n (-1) ^ {k - 1} \binom{n}{k} d_{n - k} 2 ^ {k (n - k)}$$</p><p>我们有 $k (n - k) = \binom{n}{2} - \binom{k}{2} - \binom{n - k}{2}$, 所以原式可化作</p><p>$$d_n = \sum_{k = 1} ^ n (-1) ^ {k - 1} \frac{n!}{k! (n - k)!} d_{n - k} 2 ^ \binom{n}{2} 2 ^ {-\binom{k}{2}} 2 ^ {-\binom{n - k}{2}}$$</p><p>$$\frac{d_n}{n!\ 2 ^ {\binom{n}{2}}} = \sum_{k = 1} ^ n \frac{d_{n - k}}{(n - k)!\ 2 ^ {\binom{n - k}{2}}} \cdot \frac{(-1) ^ {k - 1}}{k!\ 2 ^ \binom{k}{2}}$$</p><p>设 $d_n$ 的组合生成函数为 $D(x)$, 同时设</p><p>$$F(x) = \sum\limits_{k = 1} ^ \infty \frac{(-1) ^ {k - 1}}{k!\ 2 ^ \binom{k}{2}}$$</p><p>那么有</p><p>$$D(x) = D(x)  F(x) + 1 \\ D(x) = \frac{1}{1 - F(x)}$$</p><p>一次求乘法逆即可. 时间复杂度 $O(n\log n)$.</p><p>简洁的形式背后一定有我不能理解的高妙组合意义…</p><h4 id="例题-5"><a href="#例题-5" class="headerlink" title="例题"></a>例题</h4><ul><li><a href="https://www.luogu.com.cn/problem/P6295" target="_blank" rel="noopener">Luogu P6295 有标号 DAG 计数</a></li></ul><h3 id="强连通图"><a href="#强连通图" class="headerlink" title="强连通图"></a>强连通图</h3><p>在咕了在咕了.</p><h4 id="例题-6"><a href="#例题-6" class="headerlink" title="例题"></a>例题</h4><ul><li><a href="https://zyzoj.com/problem/1164" target="_blank" rel="noopener">ZYZOJ #1164 有标号强连通图计数</a></li></ul><h2 id="标号-不标号"><a href="#标号-不标号" class="headerlink" title="标号 / 不标号?"></a>标号 / 不标号?</h2><p>首先定义形式幂级数的 Euler 变换. 即</p><p>$$\mathcal E\big(F(x)\big) = \prod_{k = 0} ^ \infty (1 + x ^ k + x ^ {2k} + \cdots) ^ {f_k} = \prod_{k = 0} ^ \infty (\frac{1}{1 - x ^ k}) ^ {f_k}$$</p><p>类比于 exp, Euler 变换的组合意义即为选取若干无标号元素组成集合的方案数. 注意无标号元素的影响, 某些在有标号情况下不同的方案在无标号情况下相同.</p><p>利用一些运算的技巧, 可以得到</p><p>$$\mathcal E\big(F(x)\big) = \exp \left( \sum_{i = 0} ^ \infty f_i \sum_{j = 0} ^ \infty \frac{1}{j} x ^ {ij} \right) = \exp \left( \sum_{k = 0} ^ \infty \frac{1}{k} F(x ^ k) \right)$$</p><p>这个结果也可以通过 Polya 定理得到.</p><h2 id="无标号图计数"><a href="#无标号图计数" class="headerlink" title="无标号图计数"></a>无标号图计数</h2><h3 id="有根树"><a href="#有根树" class="headerlink" title="有根树"></a>有根树</h3><p>借助 Euler 变换, 有根树可看作根节点接上若干子树. 设无标号有根树 OGF 为 $F(x)$, 那么有</p><p>$$F(x) = x \cdot \mathcal E \big(F(x)\big) = x \cdot \prod_{k = 0} ^ \infty (\frac{1}{1 - x ^ k}) ^ {f_k}$$</p><p>两边同时取 $\ln$, 得</p><p>$$\ln F(x) = \ln x - \sum_{k = 0} ^ \infty f_k \ln (1 - x ^ k)$$</p><p>求导, 得</p><p>$$\frac{F(x)’}{F(x)} = \frac{1}{x} + \sum_{k = 1} ^ \infty f_k \cdot \frac{k x ^ {k - 1}}{1 - x ^ k}$$</p><p>两侧同时乘 $F(x) \cdot x$, 得</p><p>$$x \cdot F(x)’ = F(x) + F(x) \left( \sum_{k = 1} ^ \infty k f_k \cdot \frac{x ^ k}{1 - x ^ k}\right)$$</p><p>取第 $n$ 项系数, 同时设 $g_n = \sum_{k \mid n} k f_k$. 则有</p><p>$$n \cdot f_n = f_n + \sum_{k = 1} ^ n f_k g_{n - k}$$</p><p>$$f_n = \frac{1}{n - 1} \sum_{k = 1} ^ n f_k g_{n - k}$$</p><p>分治 FFT 计算即可, 时间复杂度为 $O(n \log ^ 2 n)$.</p><p>实现时, 在计算 $f_n$ 后枚举 $n$ 的倍数更新 $g$. 注意到如果分治的左端点为 $1$, $g$ 位数不够. 在计算左区间对右区间的贡献时, 需要额外注意.</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123; <span class="comment">// [L, R)</span></span><br><span class="line">    <span class="keyword">if</span> (R-L &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        f[L] = (L == <span class="number">1</span>)? <span class="number">1</span>: <span class="number">1L</span>L * f[L] * inv[L - <span class="number">1</span>] % P;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1L</span>L * L * f[L] % P, i = L; i &lt;= n; i += L)</span><br><span class="line">            g[i] = (g[i] + v) % P;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">    solve(L, Mid);</span><br><span class="line">    <span class="keyword">if</span> (L == <span class="number">1</span>) &#123;</span><br><span class="line">        Mul(f, Mid, g + L, Mid - L, h);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = Mid; i &lt; R; ++i) f[i] = (f[i] + h[i - L]) % P;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Mul(f + L, Mid - L, g, R - L, h);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = Mid; i &lt; R; ++i) f[i] = (f[i] + h[i - L]) % P;</span><br><span class="line">        Mul(f, R - L, g + L, Mid - L, h);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = Mid; i &lt; R; ++i) f[i] = (f[i] + h[i - L]) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    solve(Mid, R);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>另外存在时间复杂度为 $O(n \log n)$ 的牛顿迭代实现. 在常数和推导过程上都没有什么优势…</p><h3 id="无根树"><a href="#无根树" class="headerlink" title="无根树"></a>无根树</h3><p>一个经典的套路是只讨论根为重心的情况, 那么用有根树个数 $f_n$ 减去根不是重心的个数即为无根树个数. 此时根据 $n$ 的奇偶性不同存在 $1$ 或 $2$ 个重心, 讨论的情况相对较少.</p><p>对于 $n$ 为奇数的情况, 重心唯一. 考虑根节点和任意一条和儿子相连的边, 如果根节点不是重心, 那么该儿子的子树大小 $&gt; \lfloor \frac{n}{2} \rfloor$. 可以得出无根树个数为</p><p>$$f_n - \sum_{k = \lfloor \frac{n}{2} \rfloor + 1} ^ {n - 1} f_k \cdot f_{n - k}$$</p><p>对于 $n$ 为偶数的情况, 重心不唯一. 如果按照奇数的方法计算, 则另外要注意到根和该儿子都为重心的情况. 此时如果断开这条边, 得到的两棵树不同, 则会在之前的过程中重复统计. 也就是说, 需要在奇数的基础上额外减去</p><p>$$\binom{f_{n / 2}}{2}$$</p><p>利用有根树的计算方法即可.</p><h4 id="例题-7"><a href="#例题-7" class="headerlink" title="例题"></a>例题</h4><ul><li><a href="https://www.luogu.com.cn/problem/P5900" target="_blank" rel="noopener">Luogu P5900 无标号无根树计数</a></li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在咕了在咕了.</p><p>另外还有其他更为复杂的图计数问题, 以及 “二元生成函数” 之类的科技… 等我学明白了再说吧 (</p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>大部分整理自 JOHNKRAM 的课件, <del>也有一些自己的发现</del>.</p><ol><li><a href="http://codeforces.com/problemset/problem/438/E" target="_blank" rel="noopener">CF438E The Child and Binary Tree</a></li><li><a href="http://lydsy.com/JudgeOnline/problem.php?id=3684" target="_blank" rel="noopener">BZOJ 3684 大朋友和多叉树</a></li><li><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5279" target="_blank" rel="noopener">HDU 5279 YJC plays Minecraft</a></li><li><a href="https://loj.ac/problem/6688" target="_blank" rel="noopener">LOJ #6688 最大团计数</a></li><li><a href="https://loj.ac/problem/6684" target="_blank" rel="noopener">LOJ #6684 有根无标号「奇树」计数</a></li><li><a href="https://loj.ac/problem/6570" target="_blank" rel="noopener">LOJ #6570 毛毛虫计数</a></li><li><a href="https://loj.ac/problem/6538" target="_blank" rel="noopener">LOJ #6538 烷基计数 加强版 加强版</a></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>汪乐平, &lt;生成函数, 多项式算法与图的计数&gt;. 2019.1.28.</li><li>金策, &lt;生成函数的运算与组合计数问题&gt;. 国家集训队 2015 论文集.</li><li>AntiLeaf, <a href="https://www.cnblogs.com/hzoier/p/6597833.html" target="_blank" rel="noopener">COGS 有标号的二分图计数系列</a>.</li><li>Weng_Weijie, <a href="https://www.luogu.com.cn/blog/wengweijie/solution-p5900" target="_blank" rel="noopener">题解 P5900【无标号无根树计数】</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;del&gt;老年健忘选手终于下定决心去学数数了.&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;综述&quot;&gt;&lt;a href=&quot;#综述&quot; class=&quot;headerlink&quot; title=&quot;综述&quot;&gt;&lt;/a&gt;综述&lt;/h2&gt;&lt;p&gt;大概是利用生成函数推出一些式子, 然后拿多项式去算吧 = =&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://depletedprism.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Combinatorics" scheme="https://depletedprism.github.io/tags/Combinatorics/"/>
    
      <category term="Polynomial" scheme="https://depletedprism.github.io/tags/Polynomial/"/>
    
  </entry>
  
  <entry>
    <title>HNOI 2019 大赏</title>
    <link href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/HNOI-2019-sol/"/>
    <id>https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/HNOI-2019-sol/</id>
    <published>2020-03-18T14:08:54.000Z</published>
    <updated>2020-04-09T06:10:52.673Z</updated>
    
    <content type="html"><![CDATA[<hr><p>AH 跑去十二省联考了 (</p><p>HNOI 独自毒瘤.</p><a id="more"></a><h3 id="「HNOI2019」鱼"><a href="#「HNOI2019」鱼" class="headerlink" title="「HNOI2019」鱼"></a>「HNOI2019」鱼</h3><h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3054" target="_blank" rel="noopener">https://loj.ac/problem/3054</a></li></ul><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>考虑枚举点 $D$, 将其他点按照极角排序, 在排序后得到的结果中枚举点 $A$.</p><p>先处理鱼头部分. 显然有 $AD$ 垂直平分 $BC$, 可以通过二分找到中点在 $AD$ 上, 且垂直于 $AD$ 的线段的范围. 将所有点两两连线, 记录得到的向量及中点, 并排序, 可以保证排序后, 满足以上条件的线段是连续的.</p><p>再考虑鱼尾部分. 现在已经确定了 $AD$ 位置, 因为有 $DE = DF$, 以及 $\angle ADE,\ \angle ADF$ 的限制, 用 <code>map</code> 记录到点 $D$ 为某一长度的线段出现次数, 并用 Two-Points 的技巧维护合法鱼尾的方案数即可.</p><p>此时将鱼头鱼尾的方案数相乘即可. 因为翻转后视为不同的鱼, 最后统计答案需 $\times 4$.</p><p>实际代码中并没有用到 <code>double</code> 之类的东西… 判断两向量位置关系用叉积和点积就好了 (</p><p>时间复杂度 $O(n^2 \log n)$.</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>在极角序和平面序的浑水里折腾.cpp</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3054</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span> </span>&#123; <span class="keyword">return</span> !b? a: gcd(b, a % b); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Geo &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Vector</span> &#123;</span></span><br><span class="line">        LL x, y;</span><br><span class="line">        Vector(LL _x = <span class="number">0</span>, LL _y = <span class="number">0</span>): x(_x), y(_y) &#123; &#125;</span><br><span class="line">        Vector <span class="keyword">operator</span> + (<span class="keyword">const</span> Vector&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Vector(x + rhs.x, y + rhs.y); &#125;</span><br><span class="line">        Vector <span class="keyword">operator</span> - (<span class="keyword">const</span> Vector&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Vector(x - rhs.x, y - rhs.y); &#125;</span><br><span class="line">        Vector <span class="keyword">operator</span> * (<span class="keyword">const</span> LL&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Vector(p * x, p * y); &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">typedef</span> Vector Point;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; A, <span class="keyword">const</span> Point&amp; B) &#123;</span><br><span class="line">        <span class="keyword">return</span> A.x &lt; B.x || (A.x == B.x &amp;&amp; A.y &lt; B.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">Dot</span><span class="params">(<span class="keyword">const</span> Vector&amp; A, <span class="keyword">const</span> Vector&amp; B)</span> </span>&#123; <span class="keyword">return</span> A.x * B.x + A.y * B.y; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">Cross</span><span class="params">(<span class="keyword">const</span> Vector&amp; A, <span class="keyword">const</span> Vector&amp; B)</span> </span>&#123; <span class="keyword">return</span> A.x * B.y - A.y * B.x; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">Length2</span><span class="params">(<span class="keyword">const</span> Vector&amp; A)</span> </span>&#123; <span class="keyword">return</span> Dot(A, A); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Vector <span class="title">Normal</span><span class="params">(Vector A)</span> </span>&#123;</span><br><span class="line">        LL g = gcd(A.x, A.y);</span><br><span class="line">        A.x /= g, A.y /= g;</span><br><span class="line">        <span class="keyword">if</span> (A.x &lt; <span class="number">0</span> || (A.x == <span class="number">0</span> &amp;&amp; A.y &lt; <span class="number">0</span>)) A.x = -A.x, A.y = -A.y;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Line</span> &#123;</span></span><br><span class="line">        Point p; Vector v;</span><br><span class="line">        Line() &#123; p = v = Point(); &#125;</span><br><span class="line">        Line(Point _p, Vector _v): p(_p), v(_v) &#123; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Line&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (v &lt; rhs.v || rhs.v &lt; v) <span class="keyword">return</span> v &lt; rhs.v;</span><br><span class="line">            <span class="keyword">if</span> (Dot(v, p) != Dot(rhs.v, rhs.p)) <span class="keyword">return</span> Dot(v, p) &lt; Dot(rhs.v, rhs.p);</span><br><span class="line">            <span class="keyword">return</span> p &lt; rhs.p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Geo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">where</span><span class="params">(<span class="keyword">const</span> Vector&amp; A)</span> </span>&#123; <span class="keyword">return</span> A.y &gt; <span class="number">0</span> || (A.y == <span class="number">0</span> &amp;&amp; A.x &lt; <span class="number">0</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Vector&amp; A, <span class="keyword">const</span> Vector&amp; B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> where(A) &lt; where(B) || (where(A) == where(B) &amp;&amp; Cross(A, B) &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, nL, nA;</span><br><span class="line">Point P[MAXN], A[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">Line Li[MAXN * MAXN / <span class="number">2</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;LL, <span class="keyword">int</span>&gt; M;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(P[i].x), read(P[i].y);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            Li[++nL] = Line(P[i] + P[j], Normal(P[i] - P[j]));</span><br><span class="line">    sort(Li+<span class="number">1</span>, Li+<span class="number">1</span>+nL);</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        nA = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="keyword">if</span> (i != j) A[++nA] = P[j] - P[i];</span><br><span class="line">        sort(A+<span class="number">1</span>, A+<span class="number">1</span>+nA, cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nA; ++j) A[nA + j] = A[j];</span><br><span class="line">        M.clear();</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>, L = <span class="number">1</span>, R = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nA; ++j) &#123;</span><br><span class="line">            <span class="comment">// [L, R)</span></span><br><span class="line">            <span class="keyword">while</span> (Cross(A[j], A[R]) &gt; <span class="number">0</span> || (R &lt;= nA &amp;&amp; Cross(A[j], A[R]) == <span class="number">0</span>) || Dot(A[j], A[R]) &lt; <span class="number">0</span>)</span><br><span class="line">                s += M[Length2(A[R++])]++;</span><br><span class="line">            <span class="keyword">while</span> (L &lt; R &amp;&amp; Dot(A[j], A[L]) &gt;= <span class="number">0</span>) s -= --M[Length2(A[L++])];</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            Point v = Normal(Point(A[j].y, -A[j].x)), lp = P[i] * <span class="number">2</span>, rp = (P[i] + A[j]) * <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (rp &lt; lp) swap(lp, rp);</span><br><span class="line">            <span class="keyword">int</span> d = lower_bound(Li+<span class="number">1</span>, Li+<span class="number">1</span>+nL, Line(rp, v)) - upper_bound(Li+<span class="number">1</span>, Li+<span class="number">1</span>+nL, Line(lp, v));</span><br><span class="line">            ans += <span class="number">4L</span>L * d * s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「HNOI2019」JOJO"><a href="#「HNOI2019」JOJO" class="headerlink" title="「HNOI2019」JOJO"></a>「HNOI2019」JOJO</h3><h4 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3055" target="_blank" rel="noopener">https://loj.ac/problem/3055</a></li></ul><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p><del>还是 <a href="https://www.luogu.com.cn/blog/dsidsi/solution-p5287" target="_blank" rel="noopener">dsidsi 的题解</a> 好啊.</del></p><p>时间复杂度 $O(n\log n)$.</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3055</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read; <span class="keyword">using</span> IO::Gc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>, M = <span class="number">1e4</span> + <span class="number">5</span>, SIGMA = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">s1</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * p * (p + <span class="number">1</span>) / <span class="number">2</span> % P; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, uidx, top;</span><br><span class="line"><span class="keyword">int</span> Ans[MAXN], pos[MAXN], val[MAXN];</span><br><span class="line"><span class="keyword">int</span> rt[MAXN][SIGMA], mx[MAXN][SIGMA];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> PSGT &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span> <span class="keyword">int</span> lc, rc, s, t, f; &#125; dat[MAXN &lt;&lt; <span class="number">6</span>];</span><br><span class="line">    <span class="keyword">int</span> nidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        nidx = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(rt[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> rt[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">memset</span>(mx[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> mx[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span>&amp; nd)</span> </span>&#123; dat[++nidx] = dat[nd], nd = nidx; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> nd)</span> </span>&#123;</span><br><span class="line">        dat[nd].s = (dat[dat[nd].lc].s + dat[dat[nd].rc].s) % P;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushset</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        dat[nd].s = <span class="number">1L</span>L * v * (R - L + <span class="number">1</span>) % P, dat[nd].t = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!dat[nd].t) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> &amp;lc = dat[nd].lc, &amp;rc = dat[nd].rc, Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        newnode(lc), pushset(lc, L, Mid, dat[nd].t);</span><br><span class="line">        newnode(rc), pushset(rc, Mid+<span class="number">1</span>, R, dat[nd].t);</span><br><span class="line">        dat[nd].t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [1, p]: 前缀赋值, 前缀求和</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span>&amp; nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; p, <span class="keyword">const</span> <span class="keyword">int</span>&amp; v, <span class="keyword">const</span> <span class="keyword">int</span>&amp; f)</span> </span>&#123;</span><br><span class="line">        newnode(nd);</span><br><span class="line">        <span class="keyword">if</span> (R &lt; p) <span class="keyword">return</span> pushset(nd, L, R, v);</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> dat[nd].f = f, pushset(nd, L, R, v);</span><br><span class="line">        pushdown(nd, L, R);</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        Mdy(dat[nd].lc, L, Mid, p, v, f);</span><br><span class="line">        <span class="keyword">if</span> (p &gt; Mid) Mdy(dat[nd].rc, Mid+<span class="number">1</span>, R, p, v, f);</span><br><span class="line">        maintain(nd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; p, <span class="keyword">int</span>&amp; s, <span class="keyword">int</span>&amp; fail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (R &lt; p) <span class="keyword">return</span> <span class="keyword">void</span>( s = (s + dat[nd].s) % P );</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> s = (s + dat[nd].s) % P, <span class="keyword">void</span>( fail = dat[nd].f );</span><br><span class="line">        pushdown(nd, L, R);</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        Qry(dat[nd].lc, L, Mid, p, s, fail);</span><br><span class="line">        <span class="keyword">if</span> (p &gt; Mid) Qry(dat[nd].rc, Mid+<span class="number">1</span>, R, p, s, fail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> A[MAXN], B[MAXN];</span><br><span class="line">    <span class="comment">// 维护根节点到 u 的一条链, A[i] 记录链上颜色, B[i] 记录链长度</span></span><br><span class="line">    ++top;</span><br><span class="line">    <span class="keyword">int</span> x = val[u] % M, c = val[u] / M, fail = <span class="number">0</span>;</span><br><span class="line">    A[top] = c, B[top] = B[top - <span class="number">1</span>] + x;</span><br><span class="line">    <span class="keyword">if</span> (top == <span class="number">1</span>) Ans[u] = s1(x - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Ans[u] = (Ans[u] + s1(min(mx[top][c], x))) % P;</span><br><span class="line">        PSGT::Qry(rt[top][c], <span class="number">1</span>, M, x, Ans[u], fail);</span><br><span class="line">        <span class="comment">// 特判前缀第一段字符同末尾相同的情况</span></span><br><span class="line">        <span class="keyword">if</span> (!fail &amp;&amp; A[<span class="number">1</span>] == c &amp;&amp; B[<span class="number">1</span>] &lt; x)</span><br><span class="line">            fail = <span class="number">1</span>, Ans[u] = (Ans[u] + <span class="number">1L</span>L * B[<span class="number">1</span>] * max(<span class="number">0</span>, x - mx[top][c]) % P) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    mx[top][c] = max(mx[top][c], x);</span><br><span class="line">    PSGT::Mdy(rt[top][c], <span class="number">1</span>, M, x, B[top - <span class="number">1</span>], top);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v: G[u]) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(rt[top + <span class="number">1</span>], rt[fail + <span class="number">1</span>], <span class="keyword">sizeof</span> rt[top + <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">memcpy</span>(mx[top + <span class="number">1</span>], mx[fail + <span class="number">1</span>], <span class="keyword">sizeof</span> mx[top + <span class="number">1</span>]);</span><br><span class="line">        Ans[v] = Ans[u], dfs(v);</span><br><span class="line">    &#125;</span><br><span class="line">    --top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> opt, x, c;</span><br><span class="line">        read(opt), read(x);</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                c = Gc();</span><br><span class="line">                <span class="keyword">while</span> (<span class="built_in">isspace</span>(c)) c = Gc();</span><br><span class="line">                val[++uidx] = (c - <span class="string">'a'</span>) * M + x;</span><br><span class="line">                G[pos[i - <span class="number">1</span>]].push_back(pos[i] = uidx);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: pos[i] = pos[x]; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERR\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v: G[<span class="number">0</span>]) PSGT::init(), dfs(v);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Ans[pos[i]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「HNOI2019」多边形"><a href="#「HNOI2019」多边形" class="headerlink" title="「HNOI2019」多边形"></a>「HNOI2019」多边形</h3><h4 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3056" target="_blank" rel="noopener">https://loj.ac/problem/3056</a></li></ul><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>通过手玩可以发现, 最终状态一定是多边形内所有的边都连向顶点 $n$. 如果要保证旋转次数最小, 那么每次操作都要使不连向顶点 $n$ 的边, 连向顶点 $n$.</p><p>记 $s$ 为 $S_0$ 中同 $n$ 直接相连的边数, 最小旋转次数即为 $n - 3 - s$. 接下来的问题就是求解方案数了.</p><p>按照顶点 $n$ 出发的边将多边形分成多个部分, 那么各部分之间互不影响.</p><p>单独考虑每个部分. 设当前操作的部分, 边界处顶点为 $[L,\ R]$, 如果要保证旋转次数最小, 那么第一次旋转操作一定选择顶点 $R$ 出边中最靠近 $L$ 的可行边旋转. 设当前选择边为 $(R,\ k)$, 此后该部分被分成两块: $[L,\ k]$, $[k,\ R]$.</p><p>此时就可以建立出二叉树的模型. 方案数可以通过子树大小和树上结构计算.</p><p>考虑子树间的转移, 也就是取出根节点后, 其余节点按照子树内部顺序考虑. 记左儿子为 $lc$, 右儿子为 $rc$, 根据乘法原理, 方案数乘上</p><p>$$\binom{\mathrm{size}(lc) + \mathrm{size}(rc)}{\mathrm{size}(lc)} \cdot \binom{\mathrm{size}(lc) + \mathrm{size}(rc)}{\mathrm{size}(rc)} = \dfrac{(\mathrm{size}(lc) + \mathrm{size}(rc))!}{\mathrm{size}(lc)! \cdot \mathrm{size}(rc)!}$$</p><p>即可. 根节点之间的情况则类似.</p><p>此时的转移, 化简之后可以得到相当简洁的结果. 参见: <a href="https://blog.csdn.net/zhouyuheng2003/article/details/89177440" target="_blank" rel="noopener">zhouyuheng2003 的博客</a>.</p><p>但是原来的式子就很够用了, 只有代码长度与常数的区别.</p><p>接下来考虑做一次旋转对答案的影响.</p><p>在二叉树上考虑. 如果强制旋转一条边, 那么二叉树结构的改变类似于平衡树的旋转操作.</p><p><del>此处有张图会非常好理解, 但是这位退役选手却非常鸽子 (</del></p><p>图例就参考 <a href="https://www.cnblogs.com/xzz_233/p/10672208.html" target="_blank" rel="noopener">https://www.cnblogs.com/xzz_233/p/10672208.html</a> 好了 (</p><p>去掉原有贡献, 并计算新增贡献即可.</p><p>时间复杂度 $O(n\log n)$.</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p>采用了代码较为冗长的写法…</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3056</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * base % P;</span><br><span class="line">        base = <span class="number">1L</span>L * base * base % P, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fac[MAXN &lt;&lt; <span class="number">1</span>], ifac[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * fac[n + m] * ifac[n] % P * ifac[m] % P; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">invc</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * ifac[n + m] * fac[n] % P * fac[m] % P; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, W;</span><br><span class="line"><span class="built_in">map</span>&lt;Pii, <span class="keyword">int</span>&gt; M;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="keyword">int</span> rt[MAXN], ch[<span class="number">2</span>][MAXN], pre[MAXN], size[MAXN], nidx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>&amp; u, <span class="keyword">int</span> fa, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span>&amp; p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L + <span class="number">1</span> &gt;= R) <span class="keyword">return</span>;</span><br><span class="line">    M[Pii(L, R)] = u = ++nidx;</span><br><span class="line">    size[u] = <span class="number">1</span>, pre[u] = fa;</span><br><span class="line">    <span class="keyword">int</span> k = *lower_bound(G[R].begin(), G[R].end(), L + <span class="number">1</span>);</span><br><span class="line">    dfs(ch[<span class="number">0</span>][u], u, L, k, p2), dfs(ch[<span class="number">1</span>][u], u, k, R, p2);</span><br><span class="line">    size[u] += size[ch[<span class="number">0</span>][u]] + size[ch[<span class="number">1</span>][u]];</span><br><span class="line">    p2 = <span class="number">1L</span>L * p2 * calc(size[ch[<span class="number">0</span>][u]], size[ch[<span class="number">1</span>][u]]) % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(W), read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= n<span class="number">-3</span>; ++i)</span><br><span class="line">        read(u), read(v), G[u].push_back(v), G[v].push_back(u);</span><br><span class="line">    <span class="comment">// init factorial</span></span><br><span class="line">    <span class="keyword">int</span> N = n &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    ifac[<span class="number">0</span>] = fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) fac[i] = <span class="number">1L</span>L * i * fac[i<span class="number">-1</span>] % P;</span><br><span class="line">    ifac[N] = fpow(fac[N], P<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N; i; --i) ifac[i<span class="number">-1</span>] = <span class="number">1L</span>L * i * ifac[i] % P;</span><br><span class="line">    <span class="comment">// build polygon</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n) G[i].push_back(i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">1</span>) G[i].push_back(i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    G[<span class="number">1</span>].push_back(n), G[n].push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) sort(G[i].begin(), G[i].end());</span><br><span class="line">    <span class="comment">// calculate</span></span><br><span class="line">    <span class="keyword">int</span> p1 = (n<span class="number">-3</span>) - (G[n].size() - <span class="number">2</span>), p2 = <span class="number">1</span>, s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; G[n].size(); ++i) &#123;</span><br><span class="line">        dfs(rt[i], <span class="number">0</span>, G[n][i], G[n][i + <span class="number">1</span>], p2);</span><br><span class="line">        p2 = <span class="number">1L</span>L * p2 * calc(s, size[rt[i]]) % P, s += size[rt[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (W) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, p1, p2); <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p1);</span><br><span class="line">    <span class="comment">// solve &amp; output</span></span><br><span class="line">    read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> L, R, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        read(L), read(R);</span><br><span class="line">        <span class="keyword">int</span> n1 = p1, n2 = p2, u = M[Pii(L, R)];</span><br><span class="line">        <span class="keyword">if</span> (pre[u]) &#123;</span><br><span class="line">            <span class="keyword">int</span> fa = pre[u], w = ch[<span class="number">1</span>][fa] == u;</span><br><span class="line">            n2 = <span class="number">1L</span>L * n2 * invc(size[ch[<span class="number">0</span>][u]], size[ch[<span class="number">1</span>][u]]) % P;</span><br><span class="line">            n2 = <span class="number">1L</span>L * n2 * invc(size[ch[<span class="number">0</span>][fa]], size[ch[<span class="number">1</span>][fa]]) % P;</span><br><span class="line">            n2 = <span class="number">1L</span>L * n2 * calc(size[ch[w^<span class="number">1</span>][fa]], size[ch[w^<span class="number">1</span>][u]]) % P;</span><br><span class="line">            n2 = <span class="number">1L</span>L * n2 * calc(size[fa] - size[u] + size[ch[w^<span class="number">1</span>][u]], size[ch[w][u]]) % P;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            --n1;</span><br><span class="line">            n2 = <span class="number">1L</span>L * n2 * invc(size[ch[<span class="number">0</span>][u]], size[ch[<span class="number">1</span>][u]]) % P;</span><br><span class="line">            n2 = <span class="number">1L</span>L * n2 * invc(s - size[u], size[u]) % P;</span><br><span class="line">            n2 = <span class="number">1L</span>L * n2 * calc(s - size[u], size[ch[<span class="number">0</span>][u]]) % P;</span><br><span class="line">            n2 = <span class="number">1L</span>L * n2 * calc(s - size[u] + size[ch[<span class="number">0</span>][u]], size[ch[<span class="number">1</span>][u]]) % P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (W) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, n1, n2); <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「HNOI2019」校园旅行"><a href="#「HNOI2019」校园旅行" class="headerlink" title="「HNOI2019」校园旅行"></a>「HNOI2019」校园旅行</h3><p>myy 的题感觉很有意思… 就是做不出来 (</p><h4 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3057" target="_blank" rel="noopener">https://loj.ac/problem/3057</a></li></ul><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>先祭上官方题解: <a href="https://matthew99.blog.uoj.ac/blog/4968" target="_blank" rel="noopener">https://matthew99.blog.uoj.ac/blog/4968</a></p><p>首先有一个朴素的 DP.</p><p>设 $f(i, j)$ 表示节点 $i$ 到 $j$ 是否存在一条路径, 使得标记形成回文串.</p><p>将所有在给定条件下能形成回文串的点对丢到队列中, 枚举边更新 $f$ 即可. 注意到单独一个点也是合法的情况. 此时的时间复杂度为 $O(m^2)$.</p><p>考虑到边数较多, 而点数较少. 可以将连通块内连边情况进行一些改造, 以降低时间复杂度.</p><p>先只考虑连接两相同标记的边, 对于此时的一个连通块, 如果</p><ul><li><p>为二分图, 那么保留连通块的任意一个生成树即可.</p><p>因为不限制为简单路径, 因此可以在连通块内一条边上反复横跳, 此时得到的标记串长度可以改变, 而奇偶性并不改变. 因此保留生成树即可.</p></li><li><p>不为二分图, 此时保留任意一个生成树, 并选择任意一个节点增加一个自环.</p><p>此时存在奇环, 标记串长度和奇偶性都可以任意改变, 增加一个自环就好了.</p></li></ul><p>对于连接两不同标记的边, 直接按标记分类即可得到一个二分图, 因此保留任意一个生成树.</p><p>转化后边数不超过 $2n - 2$, 且不会影响到原来 DP 的转移, 用原来的 DP 就好了.</p><p>时间复杂度 $O(n^2)$.</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3057</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e3</span> + <span class="number">5</span>, MAXM = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Abs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">0</span>? -x: x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="keyword">char</span> S[MAXN];</span><br><span class="line"><span class="keyword">int</span> C[MAXN], U[MAXM], V[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;Pii&gt; Q;</span><br><span class="line"><span class="keyword">bool</span> f[MAXN][MAXN], Odd[MAXN], vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> DSU &#123;</span><br><span class="line">    <span class="keyword">int</span> fa[<span class="number">2</span>][MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) fa[<span class="number">0</span>][i] = fa[<span class="number">1</span>][i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findfa</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; idx, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fa[idx][u] == u? u: fa[idx][u] = findfa(idx, fa[idx][u]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXM &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;, head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front().first, v = Q.front().second; Q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> iu = head[u]; ~iu; iu = edges[iu].nxt) &#123;</span><br><span class="line">                <span class="keyword">int</span> vu = edges[iu].to;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> vv, iv = head[v]; ~iv; iv = edges[iv].nxt)</span><br><span class="line">                    <span class="keyword">if</span> (S[vu] == S[vv = edges[iv].to] &amp;&amp; !f[vu][vv])</span><br><span class="line">                        f[vu][vv] = f[vv][vu] = <span class="literal">true</span>, Q.push(Pii(vu, vv));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        C[u] = c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!C[v = edges[i].to]) dfs(v, -c);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (C[v] == c) Odd[Abs(c)] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="comment">// freopen("input.in", "r", stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    Graph::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%s"</span>, &amp;n, &amp;m, &amp;q, S+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        read(u), read(v), U[i] = u, V[i] = v;</span><br><span class="line">        <span class="keyword">if</span> (S[u] == S[v]) Graph::AddEdge(u, v), Graph::AddEdge(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (!C[i]) Graph::dfs(i, i);</span><br><span class="line">    Graph::init(), DSU::init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> &amp;u = U[i], &amp;v = V[i];</span><br><span class="line">        <span class="keyword">if</span> (S[u] != S[v]) &#123;</span><br><span class="line">            <span class="keyword">int</span> fu = DSU::findfa(<span class="number">1</span>, u), fv = DSU::findfa(<span class="number">1</span>, v);</span><br><span class="line">            <span class="keyword">if</span> (fu == fv) <span class="keyword">continue</span>;</span><br><span class="line">            DSU::fa[<span class="number">1</span>][fv] = fu;</span><br><span class="line">            Graph::AddEdge(u, v), Graph::AddEdge(v, u);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> fu = DSU::findfa(<span class="number">0</span>, u), fv = DSU::findfa(<span class="number">0</span>, v);</span><br><span class="line">            <span class="keyword">if</span> (fu == fv) <span class="keyword">continue</span>;</span><br><span class="line">            DSU::fa[<span class="number">0</span>][fv] = fu;</span><br><span class="line">            Graph::AddEdge(u, v), Graph::AddEdge(v, u);</span><br><span class="line">            Q.push(Pii(u, v)), f[u][v] = f[v][u] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = Abs(C[i]);</span><br><span class="line">        Q.push(Pii(i, i)), f[i][i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (Odd[c] &amp;&amp; !vis[c]) Graph::AddEdge(i, i), vis[c] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Graph::BFS();</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> x, y;</span><br><span class="line">        read(x), read(y), <span class="built_in">puts</span>(f[x][y]? <span class="string">"YES"</span>: <span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「HNOI2019」白兔之舞"><a href="#「HNOI2019」白兔之舞" class="headerlink" title="「HNOI2019」白兔之舞"></a>「HNOI2019」白兔之舞</h3><blockquote><p>强制类型转换而 “溢出” 不会被 <code>-fsanitize=undefined</code> 警告, <code>-Wconversion</code> 报平安.</p></blockquote><h4 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3058" target="_blank" rel="noopener">https://loj.ac/problem/3058</a></li></ul><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><ul><li><p>单位根反演</p><p><del>之前看 <a href="http://vfleaking.blog.uoj.ac/blog/87" target="_blank" rel="noopener">VFleaKing</a> 课件还以为这个东西没考过 (</del></p><p>给定两个长度为 $n$ 的序列 $a_0,\ a_1,\ \ldots,\ a_{n-1}$, $b_0,\ b_1,\ \ldots,\ b_{n-1}$, 求序列 $c$ 满足</p><p>$$c_r = \sum_{p,\ q} [(p + q) \bmod n = r] a_p b_q$$</p><p>由单位根反演, 可得</p><p>$$c_r = \sum_{p,\ q} (\frac{1}{n} \sum_{k = 0} ^ {n-1} \omega_{n}^{-rk} \omega_{n}^{pk} \omega_{n}^{qk} )\ a_p b_q = \frac{1}{n} \sum_{k = 0}^{n-1} \omega_{n}^{-rk} \sum_{p} \omega_{n}^{pk} a_p \sum_{q} \omega_{n}^{qk} b_q$$</p><p>具体证明参见课件好了…</p></li></ul><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>将题目中 “有向图” 看作二维平面, 并称第一维为行, 第二维为列. 那么共有 $L+1$ 行, 以及 $n$ 列.</p><p>考虑朴素 DP. 设 $f(i, j)$ 表示共走 $i$ 步, 到达第 $j$ 行任意位置的方案数. $g(i, j)$ 表示共走 $i$ 步, 达到第 $j$ 行的方案数. 那么有</p><p>$$f(i, j) = \binom{L}{i} g(i, j)$$</p><p>$$g(i, j) = \sum_{k = 1} ^ n g(i-1, k) \cdot w(k, j)$$</p><p>显然 $g$ 的转移可以用矩阵快速幂优化. 记初始矩阵为 $G_0$, 转移矩阵为 $S$. 设所求答案为 $A_t$, 那么</p><p>$$A_t = \sum_{i = 1} ^ L [i \bmod k = t]\ f(i, y)$$</p><p>由单位根反演, 得</p><p>$$A_t = \sum_{i = 1} ^ L \frac{1}{k} \sum_{j = 0} ^ {k-1} \omega_{k}^{-tj} \omega_{k}^{ij}\ f(i, y) $$</p><p>简单整理, 得</p><p>$$A_t = \frac{1}{k} \sum_{j = 0}^{k-1} \omega_{k}^{-tj} \sum_{i = 1} ^ L \omega_{k}^{ij} \binom{L}{i} g(i, j) \\<br>A_t = \frac{1}{k} \sum_{j = 0}^{k-1} \omega_{k}^{-tj} \sum_{i = 1} ^ L \binom{L}{i} \omega_{k}^{ij} G_0 S^i$$</p><p>根据二项式定理, 并设矩阵 $B_t$ 的第 $y$ 项为 $A_t$, 可知</p><p>$$B_t = \frac{1}{k} \sum_{i = 0}^{k-1} \omega_{k}^{-ti} G_0 (\omega_{k}^{i} S + I)^L$$</p><p>设 $h_i$ 为 $G_0 (\omega_{k}^{i} + I) ^ L$ 的第 $y$ 项. 那么</p><p>$$A_t = \frac{1}{k} \sum_{i = 0} ^ {k-1} \omega_{k}^{-ti} h_i$$</p><p>考虑 $\omega_{k}^{ti}$ 如何处理. 此处可以构造</p><p>$$ti = \binom{t + i}{2} - \binom{t}{2} - \binom{i}{2}$$</p><p>容易发现这是对的. 此外还有</p><p>$$ti = \frac{1}{2} (t + i) ^ 2 - \frac{1}{2}\ t ^ 2 - \frac{1}{2}\ i ^ 2$$</p><p>不过在此题中并不适用. <del>想一想, 为什么.</del></p><p>那么答案可写作</p><p>$$A_t = \frac{1}{k} \omega_{k}^{\binom{t}{2}} \sum_{i = 0} ^ {k-1} \omega_{k}^{\binom{i}{2}} h_i \cdot \omega_{k}^{-\binom{t+i}{2}}$$</p><p>模意义下单位根用原根就好了, 翻转即可凑出来卷积…</p><p>使用 MTT, 时间复杂度 $O(n \log n)$.</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3058</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>, MAXM = <span class="number">4</span>, MAXL = <span class="number">64</span>, MAXK = <span class="number">7e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Complex(<span class="keyword">double</span> _x = <span class="number">0.0</span>, <span class="keyword">double</span> _y = <span class="number">0.0</span>): x(_x), y(_y) &#123; &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> + (<span class="keyword">const</span> Complex&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Complex(x + rhs.x, y + rhs.y); &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> - (<span class="keyword">const</span> Complex&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Complex(x - rhs.x, y - rhs.y); &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Complex(x * rhs.x - y * rhs.y, x * rhs.y + y * rhs.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Complex <span class="title">conj</span><span class="params">(<span class="keyword">const</span> Complex&amp; p)</span> </span>&#123; <span class="keyword">return</span> Complex(p.x, -p.y); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> P;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> b, <span class="keyword">int</span> m = P)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * base % m;</span><br><span class="line">        base = <span class="number">1L</span>L * base * base % m, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret % m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">    <span class="keyword">int</span> r[MAXN];</span><br><span class="line">    Complex W[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; Lim, <span class="keyword">const</span> <span class="keyword">int</span>&amp; L)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Lim; ++i) r[i] = (r[i&gt;&gt;<span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (L<span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) W[i] = Complex(<span class="built_in">cos</span>(PI / Lim * i), <span class="built_in">sin</span>(PI / Lim * i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(Complex* f, <span class="keyword">const</span> <span class="keyword">int</span>&amp; Lim)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Lim; ++i) <span class="keyword">if</span> (i &lt; r[i]) swap(f[i], f[r[i]]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> Mid = <span class="number">1</span>; Mid &lt; Lim; Mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; i += Mid &lt;&lt; <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Mid; ++j) &#123;</span><br><span class="line">                    Complex f0 = f[i+j], f1 = W[<span class="number">1L</span>L * j * Lim / Mid] * f[i+j+Mid];</span><br><span class="line">                    f[i+j] = f0 + f1, f[i+j+Mid] = f0 - f1;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MTT</span><span class="params">(<span class="keyword">int</span>* f, <span class="keyword">int</span>* g, <span class="keyword">int</span> Lim, <span class="keyword">int</span>* h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> Complex A[MAXN], B[MAXN];</span><br><span class="line">        <span class="keyword">static</span> Complex dfta[MAXN], dftb[MAXN], dftc[MAXN], dftd[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) A[i] = Complex(f[i] &amp; <span class="number">32767</span>, f[i] &gt;&gt; <span class="number">15</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) B[i] = Complex(g[i] &amp; <span class="number">32767</span>, g[i] &gt;&gt; <span class="number">15</span>);</span><br><span class="line">        FFT(A, Lim), FFT(B, Lim);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) &#123;</span><br><span class="line">            <span class="keyword">static</span> Complex da, db, dc, dd;</span><br><span class="line">            <span class="keyword">int</span> j = (Lim - i) &amp; (Lim - <span class="number">1</span>);</span><br><span class="line">            da = (A[i] + conj(A[j])) * Complex(<span class="number">0.5</span>, <span class="number">0.0</span>);</span><br><span class="line">            db = (A[i] - conj(A[j])) * Complex(<span class="number">0.0</span>, <span class="number">-0.5</span>);</span><br><span class="line">            dc = (B[i] + conj(B[j])) * Complex(<span class="number">0.5</span>, <span class="number">0.0</span>);</span><br><span class="line">            dd = (B[i] - conj(B[j])) * Complex(<span class="number">0.0</span>, <span class="number">-0.5</span>);</span><br><span class="line">            dfta[j] = da * dc, dftb[j] = da * dd;</span><br><span class="line">            dftc[j] = db * dc, dftd[j] = db * dd;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) A[i] = dfta[i] + dftb[i] * Complex(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) B[i] = dftc[i] + dftd[i] * Complex(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">        FFT(A, Lim), FFT(B, Lim);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> da = LL(A[i].x / Lim + <span class="number">0.5</span>) % P, db = LL(A[i].y / Lim + <span class="number">0.5</span>) % P;</span><br><span class="line">            <span class="keyword">int</span> dc = LL(B[i].x / Lim + <span class="number">0.5</span>) % P, dd = LL(B[i].y / Lim + <span class="number">0.5</span>) % P;</span><br><span class="line">            h[i] = (da + (LL(db + dc) &lt;&lt; <span class="number">15</span>) + (LL(dd) &lt;&lt; <span class="number">30</span>)) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mul</span><span class="params">(<span class="keyword">int</span>* f, <span class="keyword">int</span> n, <span class="keyword">int</span>* g, <span class="keyword">int</span> m, <span class="keyword">int</span>* h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Lim = <span class="number">1</span>, L = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (Lim &lt;= n + m) Lim &lt;&lt;= <span class="number">1</span>, ++L;</span><br><span class="line">        init(Lim, L), MTT(f, g, Lim, h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">proot</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> fact[MAXL];</span><br><span class="line">    <span class="keyword">int</span> phi = p - <span class="number">1</span>, tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">2</span>; d*d &lt;= phi; ++d) <span class="keyword">if</span> (phi % d == <span class="number">0</span>) &#123;</span><br><span class="line">        fact[++tot] = d;</span><br><span class="line">        <span class="keyword">while</span> (phi % d == <span class="number">0</span>) phi /= d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (phi &gt; <span class="number">1</span>) fact[++tot] = phi;</span><br><span class="line">    phi = p - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= phi; ++i) &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; flag; ++j)</span><br><span class="line">            <span class="keyword">if</span> (fpow(i, phi / fact[j], p) == <span class="number">1</span>) flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 long long --- 引用部分就是在说这个 (</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">C2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * n * (n<span class="number">-1</span>) / <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, K, L, x, y;</span><br><span class="line"><span class="keyword">int</span> W[MAXM][MAXM], powG[MAXK];</span><br><span class="line"><span class="keyword">int</span> f[MAXN], g[MAXN], h[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> m[MAXM][MAXM];</span><br><span class="line">    Matrix() &#123; <span class="built_in">memset</span>(m, <span class="number">0</span>, <span class="keyword">sizeof</span> m); &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> Matrix&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        Matrix ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                    ret.m[i][j] = (ret.m[i][j] + <span class="number">1L</span>L * m[i][k] * rhs.m[k][j] % P) % P;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">fpow</span><span class="params">(Matrix base, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    Matrix ret;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ret.m[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = ret * base;</span><br><span class="line">        base = base * base, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>, &amp;n, &amp;K, &amp;L, &amp;x, &amp;y, &amp;P);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, W[i] + j);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">int</span> G = fpow(proot(P), (P - <span class="number">1</span>) / K);</span><br><span class="line">    powG[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; K; ++i) powG[i] = <span class="number">1L</span>L * powG[i<span class="number">-1</span>] * G % P;</span><br><span class="line">    Matrix base, G0;</span><br><span class="line">    G0.m[<span class="number">1</span>][x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= n; ++a) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b &lt;= n; ++b) base.m[a][b] = <span class="number">1L</span>L * W[a][b] * powG[i] % P;</span><br><span class="line">            base.m[a][a] = (base.m[a][a] + <span class="number">1</span>) % P;</span><br><span class="line">        &#125;</span><br><span class="line">        base = G0 * fpow(base, L);</span><br><span class="line">        f[i] = <span class="number">1L</span>L * base.m[<span class="number">1</span>][y] * powG[C2(i) % K] % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>*K; ++i) g[i] = powG[(K - C2(i) % K) % K];</span><br><span class="line">    reverse(g, g + <span class="number">2</span>*K + <span class="number">1</span>);</span><br><span class="line">    Poly::Mul(f, K, g, <span class="number">2</span>*K + <span class="number">1</span>, h);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">int</span> invK = fpow(K, P<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; K; ++t) &#123;</span><br><span class="line">        LL s1 = <span class="number">1L</span>L * invK * powG[C2(t) % K] % P;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, s1 * h[<span class="number">2</span>*K - t] % P);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「HNOI2019」序列"><a href="#「HNOI2019」序列" class="headerlink" title="「HNOI2019」序列"></a>「HNOI2019」序列</h3><h4 id="题目链接-5"><a href="#题目链接-5" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3059" target="_blank" rel="noopener">https://loj.ac/problem/3059</a></li></ul><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p>类似于 <a href="https://m1.oi-archive.org:9000/#/problem/bzoj/1367" target="_blank" rel="noopener">BZOJ 1367</a>, 可得到这样的思路:</p><p>将 $A$ 分段, 对每一段 $[L,\ R]$ 构造相同的序列 $B_i$, 并令 $B_i$ 为该段 $A_i$ 的平均值. 在满足 $B$ 单调不降的条件下使每次分出区间长度尽量小, 此时可以得到最优结果.</p><p><del>个人感觉证明方法应该类似于 黄源河 &lt;左偏树的特点及其应用&gt; 例题部分对 BZOJ 1367 的证明</del>.</p><p>证明参见 <a href="https://www.cnblogs.com/Paul-Guderian/p/10801584.html" target="_blank" rel="noopener">https://www.cnblogs.com/Paul-Guderian/p/10801584.html</a> 好了.</p><p>$A$ 的分段情况可以利用单调栈维护.</p><p>具体地说, 每个单调栈中元素对应 $A$ 中一段区间. 假设单调栈内某一元素对应 $A_i$ 中区间 $[L,\ R]$, 记该段平均值为 $\bar x$, 那么区间内的答案为</p><p>$$\sum_{i = L}^ R (A_i - \bar x) ^ 2 = \sum_{i = L}^R A_i^2 - \frac{1}{R - L + 1} (\sum_{i = L}^R A_i) ^ 2$$</p><p>此时记录区间和, 区间平方和, 区间大小就可以快速合并两个区间的信息, 也就是单调栈内两元素的值.</p><p>从前往后扫描 $A$, 假设当前扫描到位置 $i$, 那么在单调栈中加入 $i$. 此时不断检查栈中元素. 如果不满足 $B$ 单调不降, 则不断向栈内元素合并. 同时记录在每个位置得到的答案.</p><p>此时得到了 $m = 0$ 情况下的做法.</p><p>注意到每次都是单点修改, 考虑单点修改对单调栈中元素的影响. 设当前修改位置为 $x$, 那么在修改后重新计算得到单调栈中一定存在一个区间满足 $L \le x \le R$.</p><p>重构单调栈的复杂度过高, 如果确定了 $L$, $R$ 的位置, 那么除去这一部分, 其他部分并不会改变. 因此仿照从前到后维护单调栈的过程, 从后往前扫描 $A$, 这样配合可持久化就能快速得到 $[1,\ L)$ 以及 $(R, n]$ 的信息.</p><p>现在的问题就是如何确定 $L,\ R$ 的位置. 根据单调性, $L,\ R$ 的位置可以通过二分来确定.</p><p>具体地说, 在维护单调栈的过程中, 利用可持久化线段树维护单调栈中每个元素在序列上的实际范围. 线段树向上合并时维护该节点对应实际范围 $[L,\ R]$, 以及最靠左元素对应的右端点位置 $k$.</p><p>不断二分 $x$ 修改后影响到的单调栈编号 $p$, 每次在线段树上查询到该编号对应的右端点位置 $R$. 可以证明, 改变 $x$ 位置的值后, 确定的 $L$, $R$ 位置仍是原有单调栈中某个元素的左右端点之一, 否则答案一定不优.</p><p>另外需保证选择的区间长度尽量小, 因此 $R$ 的位置很好确定, 直接找到编号 $p$ 对应的右端点位置. 根据 $R$ 的位置, 并利用 $B$ 单调不降的限制, 可以确定出左端点 $L$ 的位置, 并在查询 $L$ 位置的同时维护 $[L,\ R]$ 这一段合并后得到的元素. 如果该元素小于后一位置单调栈中元素, 那么编号 $p$ 合法, 减小区间长度继续二分.</p><p><del>似乎也可以通过二分套二分实现这个过程 ?</del></p><p>时间复杂度 $O(n \log n + m \log ^ 2 n)$.</p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3059</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>, P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> inv[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> s0; LL s1; <span class="keyword">int</span> s2;</span><br><span class="line">    Data() &#123; s1 = s0 = s2 = <span class="number">0</span>; &#125;</span><br><span class="line">    Data(<span class="keyword">int</span> _s0, LL _s1, <span class="keyword">int</span> _s2): s0(_s0), s1(_s1), s2(_s2) &#123; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Data&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s1 * rhs.s0 &lt; rhs.s1 * s0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> Data&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(rhs &lt; *<span class="keyword">this</span>); &#125;</span><br><span class="line">    Data <span class="keyword">operator</span> + (<span class="keyword">const</span> Data&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Data(s0 + rhs.s0, s1 + rhs.s1, (s2 + rhs.s2) % P);</span><br><span class="line">    &#125;</span><br><span class="line">    Data <span class="keyword">operator</span> - (<span class="keyword">const</span> Data&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Data(s0 - rhs.s0, s1 - rhs.s1, (s2 - rhs.s2 + P) % P);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">()</span> </span>&#123; <span class="keyword">int</span> s = s1 % P; <span class="keyword">return</span> (s2 - <span class="number">1L</span>L * s % P * s % P * inv[s0] % P + P) % P; &#125;</span><br><span class="line">&#125; Sum[MAXN], stk[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, top;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line"><span class="keyword">int</span> pre[MAXN], suf[MAXN];</span><br><span class="line"><span class="keyword">int</span> Ansp[MAXN], Anss[MAXN], Posp[MAXN], Poss[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Data <span class="title">Part</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == <span class="number">0</span> || R == <span class="number">0</span>) <span class="keyword">return</span> Data();</span><br><span class="line">    <span class="keyword">return</span> Sum[R] - Sum[L - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> PSGT &#123;</span><br><span class="line">    <span class="comment">// [L, k], (k, ..., R]</span></span><br><span class="line">    <span class="comment">// [L, k] 为一段, 其余部分不一定是一段 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span> <span class="keyword">int</span> lc, rc, L, R, k; &#125; dat[MAXN &lt;&lt; <span class="number">6</span>];</span><br><span class="line">    <span class="keyword">int</span> nidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> nd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> &amp;rc = dat[nd].rc, &amp;lc = dat[nd].lc;</span><br><span class="line">        dat[nd].L = dat[nd].R = dat[lc].L;</span><br><span class="line">        <span class="keyword">if</span> (rc) dat[nd].R = dat[rc].R;</span><br><span class="line">        dat[nd].k = dat[lc].k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; pos, <span class="keyword">const</span> <span class="keyword">int</span>&amp; vL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; vR)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nxt = ++nidx;</span><br><span class="line">        dat[nxt] = dat[nd];</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> dat[nxt].L = vL, dat[nxt].R = dat[nxt].k = vR, nxt;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= Mid) dat[nxt].lc = Mdy(dat[nxt].lc, L, Mid, pos, vL, vR);</span><br><span class="line">        <span class="keyword">else</span> dat[nxt].rc = Mdy(dat[nxt].rc, Mid+<span class="number">1</span>, R, pos, vL, vR);</span><br><span class="line">        <span class="keyword">return</span> maintain(nxt), nxt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">QryR</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> dat[nd].R;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= Mid) <span class="keyword">return</span> QryR(dat[nd].lc, L, Mid, pos);</span><br><span class="line">        <span class="keyword">return</span> QryR(dat[nd].rc, Mid+<span class="number">1</span>, R, pos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">QryL</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; pos, Data&amp; d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (R &lt;= pos) &#123;</span><br><span class="line">            Data vL = Part(dat[nd].L, dat[nd].k), vR = Part(dat[nd].k + <span class="number">1</span>, dat[nd].R);</span><br><span class="line">            <span class="keyword">if</span> (vR + d &lt;= vL)</span><br><span class="line">                <span class="keyword">return</span> d = d + Part(dat[nd].L, dat[nd].R), <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (L == R) <span class="keyword">return</span> dat[nd].R;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 尽可能找到最大的可行 L</span></span><br><span class="line">        <span class="keyword">if</span> (pos &gt; Mid) &#123;</span><br><span class="line">            <span class="keyword">int</span> ret = QryL(dat[nd].rc, Mid+<span class="number">1</span>, R, pos, d); </span><br><span class="line">            <span class="keyword">if</span> (ret != <span class="number">0</span>) <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> QryL(dat[nd].lc, L, Mid, pos, d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(A[i]);</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) inv[i] = <span class="number">1L</span>L * (P - P / i) * inv[P % i] % P;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        Sum[i] = Sum[i<span class="number">-1</span>] + Data(<span class="number">1</span>, A[i], <span class="number">1L</span>L * A[i] * A[i] % P);</span><br><span class="line">    <span class="comment">// pre done</span></span><br><span class="line">    stk[top = <span class="number">0</span>] = Data();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        stk[++top] = Data(<span class="number">1</span>, A[i], <span class="number">1L</span>L * A[i] * A[i] % P);</span><br><span class="line">        <span class="keyword">while</span> (top &gt; <span class="number">1</span> &amp;&amp; stk[top] &lt;= stk[top<span class="number">-1</span>])</span><br><span class="line">            stk[top<span class="number">-1</span>] = stk[top<span class="number">-1</span>] + stk[top], --top;</span><br><span class="line">        Posp[i] = top;</span><br><span class="line">        Ansp[i] = (Ansp[i - stk[top].s0] + stk[top].calc()) % P;</span><br><span class="line">        pre[i] = PSGT::Mdy(pre[i<span class="number">-1</span>], <span class="number">1</span>, n, top, i - stk[top].s0 + <span class="number">1</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// suf done</span></span><br><span class="line">    stk[top = <span class="number">0</span>] = Data();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">        stk[++top] = Data(<span class="number">1</span>, A[i], <span class="number">1L</span>L * A[i] * A[i] % P);</span><br><span class="line">        <span class="keyword">while</span> (top &gt; <span class="number">1</span> &amp;&amp; stk[top<span class="number">-1</span>] &lt;= stk[top])</span><br><span class="line">            stk[top<span class="number">-1</span>] = stk[top<span class="number">-1</span>] + stk[top], --top;</span><br><span class="line">        Poss[i] = top;</span><br><span class="line">        Anss[i] = (Anss[i + stk[top].s0] + stk[top].calc()) % P;</span><br><span class="line">        suf[i] = PSGT::Mdy(suf[i+<span class="number">1</span>], <span class="number">1</span>, n, top, i, i + stk[top].s0 - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Ansp[n]);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> x, val;</span><br><span class="line">        read(x), read(val);</span><br><span class="line">        <span class="keyword">int</span> L = <span class="number">0</span>, R = Poss[x + <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (L &lt;= R) &#123;</span><br><span class="line">            <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> Rp = Mid? PSGT::QryR(suf[x+<span class="number">1</span>], <span class="number">1</span>, n, Poss[x+<span class="number">1</span>] - Mid + <span class="number">1</span>): x;</span><br><span class="line">            Data d = Data(<span class="number">1</span>, val, <span class="number">1L</span>L * val * val % P) + Part(x+<span class="number">1</span>, Rp);</span><br><span class="line">            <span class="keyword">if</span> (x &gt; <span class="number">1</span>) PSGT::QryL(pre[x<span class="number">-1</span>], <span class="number">1</span>, n, Posp[x<span class="number">-1</span>], d);</span><br><span class="line">            <span class="keyword">if</span> (d &lt; Part(Rp + <span class="number">1</span>, PSGT::QryR(suf[x+<span class="number">1</span>], <span class="number">1</span>, n, Poss[x+<span class="number">1</span>] - Mid))) R = Mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> L = Mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> Rp = (R + <span class="number">1</span> &gt; <span class="number">0</span>)? PSGT::QryR(suf[x+<span class="number">1</span>], <span class="number">1</span>, n, Poss[x+<span class="number">1</span>] - R): x;</span><br><span class="line">        Data d = Data(<span class="number">1</span>, val, <span class="number">1L</span>L * val * val % P) + Part(x+<span class="number">1</span>, Rp);</span><br><span class="line">        <span class="keyword">int</span> Lp = x &gt; <span class="number">1</span>? PSGT::QryL(pre[x<span class="number">-1</span>], <span class="number">1</span>, n, Posp[x<span class="number">-1</span>], d): x;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ((Ansp[Lp] + d.calc()) % P + Anss[Rp+<span class="number">1</span>]) % P);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;AH 跑去十二省联考了 (&lt;/p&gt;
&lt;p&gt;HNOI 独自毒瘤.&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://depletedprism.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>十二省联考 2019 大赏</title>
    <link href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/union-2019-sol/"/>
    <id>https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/union-2019-sol/</id>
    <published>2020-03-16T06:43:17.000Z</published>
    <updated>2020-04-13T14:14:15.471Z</updated>
    
    <content type="html"><![CDATA[<hr><p>其实之前都已经写地差不多了…</p><a id="more"></a><h3 id="「十二省联考-2019」异或粽子"><a href="#「十二省联考-2019」异或粽子" class="headerlink" title="「十二省联考 2019」异或粽子"></a>「十二省联考 2019」异或粽子</h3><p><del>听说是原题? 原题没写过怎么办啊.</del></p><h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3048" target="_blank" rel="noopener">https://loj.ac/problem/3048</a></li></ul><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>考虑到区间异或值, 可以看作前缀异或值的两点异或值. 那么在处理出前缀异或值后, 所求即为前 $k$ 大有序对, 对应位置异或值的和.</p><p>考虑到 $a\ \mathrm {xor}\ b$ = $b\ \mathrm{xor}\ a$, 以及 $a\ \mathrm{xor}\ a = 0$, 求出前 $2k$ 大两两异或最大值, 并将最终答案 / 2 即可.</p><p>整个过程可以用 0-1 Trie 和优先队列实现.</p><p>具体地说, 对每个位置在 Trie 上查出最大异或值, 丢进优先队列. 此后在优先队列中取出 $2k$ 个元素, 若取出元素为该位置第 $x$ 大异或值, 那么重新放入第 $x+1$ 大异或值.</p><p>类似的优先队列技巧也在<a href="https://www.luogu.com.cn/problem/P2048" target="_blank" rel="noopener">「NOI2010」超级钢琴</a> 中使用过.</p><p>时间复杂度 $O(\ (n + k)\ (\log n + \log v)\ )$.</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3048</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e5</span> + <span class="number">5</span>, LOG = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Item</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, k; LL s;</span><br><span class="line">    Item(<span class="keyword">int</span> _u, <span class="keyword">int</span> _k, LL _s): u(_u), k(_k), s(_s) &#123; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Item&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s &lt; rhs.s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, K;</span><br><span class="line">LL A[MAXN];</span><br><span class="line">priority_queue&lt;Item&gt; PQ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Trie &#123;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">2</span>][MAXN &lt;&lt; <span class="number">5</span>], size[MAXN &lt;&lt; <span class="number">5</span>], nidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; nidx = <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(LL S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = LOG - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = (S &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">            ++size[u];</span><br><span class="line">            <span class="keyword">if</span> (!ch[c][u]) ch[c][u] = ++nidx;</span><br><span class="line">            u = ch[c][u];</span><br><span class="line">        &#125;</span><br><span class="line">        ++size[u];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">Qry</span><span class="params">(LL S, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        LL ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>, i = LOG - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = (S &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!ch[!c][u]) u = ch[c][u];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (k &lt;= size[ch[!c][u]]) u = ch[!c][u], ret |= <span class="number">1L</span>L &lt;&lt; i;</span><br><span class="line">            <span class="keyword">else</span> k -= size[ch[!c][u]], u = ch[c][u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    Trie::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(K), K &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">static</span> LL x;</span><br><span class="line">        read(x), A[i] = A[i<span class="number">-1</span>] ^ x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="comment">// 注意到要往 Trie 里塞个 0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) Trie::insert(A[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) PQ.push(Item(i, <span class="number">1</span>, Trie::Qry(A[i], <span class="number">1</span>)));</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (K--) &#123;</span><br><span class="line">        Item u = PQ.top(); PQ.pop();</span><br><span class="line">        ans += u.s;</span><br><span class="line">        <span class="keyword">if</span> (u.k + <span class="number">1</span> &lt;= n) PQ.push(Item(u.u, u.k + <span class="number">1</span>, Trie::Qry(A[u.u], u.k + <span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「十二省联考-2019」字符串问题"><a href="#「十二省联考-2019」字符串问题" class="headerlink" title="「十二省联考 2019」字符串问题"></a>「十二省联考 2019」字符串问题</h3><h4 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3049" target="_blank" rel="noopener">https://loj.ac/problem/3049</a></li></ul><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>我之前有写过的说… 参见<a href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/oj/luogu-P5284/">「十二省联考 2019」字符串问题 题解</a>.</p><p>时间复杂度 $O(n \log n)$.</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p><del>假装自己又写了一遍</del></p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3049</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">5</span>, MAXM = MAXN &lt;&lt; <span class="number">1</span>, LOG = <span class="number">19</span>, SIGMA = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = MAXM &lt;&lt; <span class="number">1</span>, MAXE = MAXV &lt;&lt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, uidx;</span><br><span class="line"><span class="keyword">char</span> S[MAXN];</span><br><span class="line"><span class="keyword">int</span> A[MAXN], B[MAXN], nA, nB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> isA[MAXV];</span><br><span class="line"><span class="keyword">int</span> pre[LOG][MAXM], pos[MAXN], len[MAXV], lst[MAXM];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXE];</span><br><span class="line">    <span class="keyword">int</span> head[MAXV], in[MAXV], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span> in), <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;, head[from] = eidx, ++in[to];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">Toposort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> LL f[MAXV];</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, (uidx + <span class="number">1</span>) * <span class="keyword">sizeof</span> (LL));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= uidx; ++i) <span class="keyword">if</span> (!in[i]) Q.push(i);</span><br><span class="line">        LL ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line">            ret = max(ret, f[u] + len[u]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = edges[i].to;</span><br><span class="line">                f[v] = max(f[v], f[u] + len[u]);</span><br><span class="line">                <span class="keyword">if</span> (!(--in[v])) Q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= uidx; ++i) <span class="keyword">if</span> (in[i]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SAM &#123;</span><br><span class="line">    <span class="keyword">int</span> ch[MAXM][SIGMA], lnk[MAXM], nidx, last;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        nidx = last = <span class="number">1</span>, <span class="built_in">memset</span>(ch[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">        len[++nidx] = l, lnk[nidx] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">memset</span>(ch[nidx], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[nidx]), nidx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nd = newnode(len[last] + <span class="number">1</span>), p = last;</span><br><span class="line">        <span class="keyword">while</span> (p &amp;&amp; !ch[p][val]) ch[p][val] = nd, p = lnk[p];</span><br><span class="line">        <span class="keyword">if</span> (!p) lnk[nd] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> q = ch[p][val];</span><br><span class="line">            <span class="keyword">if</span> (len[q] == len[p] + <span class="number">1</span>) lnk[nd] = q;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> nxt = newnode(len[p] + <span class="number">1</span>);</span><br><span class="line">                lnk[nxt] = lnk[q], <span class="built_in">memcpy</span>(ch[nxt], ch[q], <span class="keyword">sizeof</span> ch[nxt]);</span><br><span class="line">                <span class="keyword">while</span> (p &amp;&amp; ch[p][val] == q) ch[p][val] = nxt, p = lnk[p];</span><br><span class="line">                lnk[q] = lnk[nd] = nxt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        last = nd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nidx; ++i) pre[<span class="number">0</span>][i] = lnk[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; LOG; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nidx; ++i) pre[j][i] = pre[j<span class="number">-1</span>][pre[j<span class="number">-1</span>][i]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Jump</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">const</span> <span class="keyword">int</span>&amp; lgt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = LOG - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            <span class="keyword">if</span> (pre[j][u] &amp;&amp; len[pre[j][u]] &gt;= lgt) u = pre[j][u];</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> len[a] &lt; len[b] || (len[a] == len[b] &amp;&amp; isA[a] &lt; isA[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="comment">// freopen("input.in", "r", stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> Ti; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Ti);</span><br><span class="line">    <span class="keyword">while</span> (Ti--) &#123;</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        SAM::init(), Graph::init();</span><br><span class="line">        <span class="built_in">memset</span>(isA, <span class="literal">false</span>, <span class="keyword">sizeof</span> isA);</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, S+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// solve</span></span><br><span class="line">        n = (<span class="keyword">int</span>) <span class="built_in">strlen</span>(S + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) SAM::insert(S[i] - <span class="string">'a'</span>), pos[i] = SAM::last;</span><br><span class="line">        SAM::build();</span><br><span class="line">        <span class="comment">// build graph</span></span><br><span class="line">        uidx = SAM::nidx;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;nA);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> L, R, i = <span class="number">1</span>; i &lt;= nA; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;L, &amp;R);</span><br><span class="line">            <span class="keyword">int</span> lgt = R - L + <span class="number">1</span>, u = SAM::Jump(pos[L], lgt);</span><br><span class="line">            len[++uidx] = lgt, A[i] = uidx, isA[uidx] = <span class="literal">true</span>;</span><br><span class="line">            G[u].push_back(uidx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;nB);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> L, R, i = <span class="number">1</span>; i &lt;= nB; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;L, &amp;R);</span><br><span class="line">            <span class="keyword">int</span> lgt = R - L + <span class="number">1</span>, u = SAM::Jump(pos[L], lgt);</span><br><span class="line">            len[++uidx] = lgt, B[i] = uidx;</span><br><span class="line">            G[u].push_back(uidx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, u = <span class="number">1</span>; u &lt;= SAM::nidx; ++u) &#123;</span><br><span class="line">            <span class="keyword">int</span> last = u;</span><br><span class="line">            sort(G[u].begin(), G[u].end(), cmp);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; G[u].size(); ++i) &#123;</span><br><span class="line">                Graph::AddEdge(last, v = G[u][i]);</span><br><span class="line">                <span class="keyword">if</span> (!isA[v]) last = v;</span><br><span class="line">            &#125;</span><br><span class="line">            lst[u] = last, G[u].clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">2</span>; u &lt;= SAM::nidx; ++u) Graph::AddEdge(lst[SAM::lnk[u]], u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= uidx; ++i) <span class="keyword">if</span> (!isA[i]) len[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v), Graph::AddEdge(A[u], B[v]);</span><br><span class="line">        <span class="comment">// output</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, Graph::Toposort());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「十二省联考-2019」骗分过样例"><a href="#「十二省联考-2019」骗分过样例" class="headerlink" title="「十二省联考 2019」骗分过样例"></a>「十二省联考 2019」骗分过样例</h3><h4 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3050" target="_blank" rel="noopener">https://loj.ac/problem/3050</a></li></ul><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li><p>$\texttt{1_998244353}$</p><p>观察到结果是 $19$ 的幂次, 直接快速幂即可. 对于较大的数, 读入的同时模 $\varphi(998244353) = 998244352$ 即可.</p></li><li><p>$\texttt{1?}$</p><p><del>可以开始吐槽出题人了 (</del></p><p>观察到结果的最大值为 $1145099$, 从此处枚举模数 $p$, 并用一个大数验证即可.</p><p>为防止出题人毒瘤, 可以用 <a href="https://oi-wiki.org/math/fermat/#_6" target="_blank" rel="noopener">拓展欧拉定理</a> 处理这个较大数. 实际上得到的模数是 $1145141$, 恰好是一个 <del>恶臭的</del> 素数.</p></li><li><p>$\texttt{1?+}$</p><p>此时需要猜一个 $10^{18}$ 级别的大模数…</p><p>观察到数据中有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">264708066 1996649514996338529</span><br><span class="line">264708068 1589589654696467295</span><br></pre></td></tr></table></figure><p>那么有</p><p>$$1996649514996338529 \times 19^2 \equiv 1589589654696467295\pmod m$$</p><p>即</p><p>$$m \mid (1996649514996338529 \times 19^2 -1589589654696467295 ) \\<br>  m \mid 719200885258981741674$$</p><p>先考虑 $m$ 是素数的情况, 用 Linux 下命令 <code>factor</code> 分解, 得</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">719200885258981741674: 2 3 23 5211600617818708273</span><br></pre></td></tr></table></figure><p>选择 $5211600617818708273$ 检验, 发现这就是要找的模数.</p></li><li><p>$\texttt{1wa_998244353}$</p><p><del>那么出题人是怎么写挂的呢</del></p><p>猜测这个写法是 <code>int</code> 溢出得到的… 而测试点 #6 也印证了这一点.</p><p>此时答案会出现循环, 找到起始位置和循环节长度即可. 似乎可以手算, 但是我选择写程序暴力.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; M;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    M[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; ; ++i) &#123;</span><br><span class="line">        x = <span class="number">19</span> * x % P;</span><br><span class="line">        <span class="keyword">if</span> (M.count(x) != <span class="number">0</span>) &#123; <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, M[x], i); <span class="keyword">break</span>; &#125;</span><br><span class="line">        M[x] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到 <code>55245 100944</code>, 那么循环节长度为 <code>45699</code>, 起始位置为 <code>55245</code>, 预处理出前 <code>100944</code> 位答案即可.</p><p>尽管出题人提醒自然溢出是 ub, 但是强制类型转换我没能调出来, 于是只能 “自然溢出啥事没有” 了, <del>感谢编译器没有把我的电脑关掉</del>.</p></li><li><p>$\texttt{2p}$</p><p>题意: 判断区间内每一个数是否为素数, 若为素数输出 <code>&#39;p&#39;</code>, 否则输出 <code>&#39;.&#39;</code>.</p><p>观察到区间长度是 $10^6$ 级别的, 那么用 Miller-Rabin 判素即可.</p><p>单次 Miller-Rabin 判素的时间复杂度为 $O(k \log^3 n)$. 来源: <a href="https://zh.wikipedia.org/wiki/%E7%B1%B3%E5%8B%92-%E6%8B%89%E5%AE%BE%E6%A3%80%E9%AA%8C" target="_blank" rel="noopener">米勒-拉宾素性检验</a>.</p><p>此处只选择 $2$, $3$ 两个素数即可. 虽然正确性堪忧, 但是可以通过给定的数据.</p></li><li><p>$\texttt{2u}$</p><p>题意: 计算区间内每一个数的 $\mu(n)$, 根据 $\mu(n)$ 的值输出 <code>&#39;0&#39;</code> / <code>&#39;+&#39;</code> / <code>&#39;-&#39;</code>.</p><p>观察到区间长度为 $10^6$, 最大值为 $10^{18}$. 在筛出 $10^6$ 以内的素数后, 枚举素数的该区间内的倍数.</p><p>由 $\mu$ 的定义可知, </p><ul><li>如果此时某个数 $n$ 被 $p^2$ 整除, 那么 $\mu(n) = 0$.</li><li>如果此时某个数 $n$ 被 $p$ 整除, 则令 $\mu(n) := -\mu(n)$.</li></ul><p>此后剩下的数 $n$, 若 $n \neq 1$, 那么 $n$ 可表示为最多两个 $&gt; 10^6$ 的素数的乘积.</p><ul><li>如果 $n$ 为素数, 那么 $\mu(n)$ 取反.</li><li>如果 $n$ 为完全平方数, 那么 $\mu(n) = 0$.</li><li>对于其余情况, $n$ 为两不同素数乘积, 对 $\mu(n)$ 取值没有影响.</li></ul></li><li><p>$\texttt{2g}$</p><p>题意: 判断区间内每一个数是否为给定数的原根, 若为原根输出 <code>&#39;g&#39;</code>, 否则输出 <code>&#39;.&#39;</code>.</p><p>神仙曾经教育过, “求原根大多数情况直接按定义暴力”. 此时可解决求 $998244353$ 原根的情况.</p><p>具体地说, 若 $g$ 为 $m$ 原根, 将 $\varphi(m)$ 质因数分解, 对于每个质因数 $p_i$ 都满足 $g ^ {\frac{\varphi(m)}{p_i}} \not\equiv 1 \pmod m$. from <a href="https://oi-wiki.org/math/primitive-root/#_5" target="_blank" rel="noopener">OI-Wiki 原根</a>.</p><p>显然这个方法在 $\varphi(m)$ 质因数个数较多, 判断区间长度较大时有效率问题. 考虑此种情况下的数 $13123111$ 较小, 可以预处理出答案后 $O(1)$ 回答.</p><p>假定已经找到了 $m$ 的一个原根 $g$, 设 $x = g ^ k\mod m$, 那么 $x$ 为 $m$ 的原根当且仅当 $k$ 同 $\varphi(m)$ 互质.</p><p>此时枚举指标 $k$, 并标记 $\varphi(m)$ 质因数的倍数即可.</p></li><li><p>$\texttt{2g?}$</p><p>此时又需要猜数…</p><blockquote><p>// Hint: ? is a prime number larger than 1000000000 but smaller than 2000000000</p></blockquote><p>考虑到存在原根的数必然形如 $2,\ 4,\ p^a,\ 2p^a$, 其中 $p$ 为奇素数. $a$ 为正整数. from <a href="https://oi-wiki.org/math/primitive-root/#_3" target="_blank" rel="noopener">OI-Wiki 原根</a>.</p><p>直接在这个范围内大力寻找就好了.</p><p>还是优先考虑素数, 可以得到结果 <code>1515343657</code>.</p></li></ol><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p>写得很垃圾…</p><p>Miller-Rabin 的快速幂部分用 <code>__int128</code> / <code>__float128</code> 才能勉强保证精度, 为了拯救代码的大常数只用了 2 个素数, 没救了.</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3050</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> uLL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, LL m)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = (x * <span class="number">10L</span>L + ch - <span class="string">'0'</span>) % m, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Solve1 &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * base % P;</span><br><span class="line">            base = <span class="number">1L</span>L * base * base % P, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n; read(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x, i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            read(x, P<span class="number">-1</span>), <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, fpow(<span class="number">19</span>, x));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Solve2 &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1145141</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * base % P;</span><br><span class="line">            base = <span class="number">1L</span>L * base * base % P, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n; read(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x, i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            read(x, P<span class="number">-1</span>), <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, fpow(<span class="number">19</span>, x));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Solve3 &#123;</span><br><span class="line">    <span class="keyword">const</span> LL P = <span class="number">5211600617818708273</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">plus</span><span class="params">(uLL a, uLL b)</span> </span>&#123; <span class="keyword">return</span> a + b &gt;= P? a + b - P: a + b; &#125;</span><br><span class="line">    <span class="function">LL <span class="title">smul</span><span class="params">(LL base, LL b)</span> </span>&#123;</span><br><span class="line">        LL ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = plus(ret, base);</span><br><span class="line">            base = plus(base, base), b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">fpow</span><span class="params">(LL base, LL b)</span> </span>&#123;</span><br><span class="line">        LL ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = smul(ret, base);</span><br><span class="line">            base = smul(base, base), b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n; read(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x, i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            read(x), <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, fpow(<span class="number">19</span>, x));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Solve4 &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>, BEG = <span class="number">55244</span>, LOOP = <span class="number">45699</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, A[BEG + LOOP + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        A[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= BEG + LOOP; ++i) A[i] = <span class="number">19</span> * A[i<span class="number">-1</span>] % P;</span><br><span class="line">        read(n); LL x;</span><br><span class="line">        <span class="keyword">while</span> (n--) read(x), <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, A[x &lt; BEG? x: (x - BEG) % LOOP + BEG]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MillerRabin &#123;</span><br><span class="line">    <span class="function">LL <span class="title">fpow</span><span class="params">(LL base, LL b, LL m)</span> </span>&#123;</span><br><span class="line">        LL ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = __int128(ret) * base % m;</span><br><span class="line">            base = __int128(base) * base % m, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret % m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(LL p, <span class="keyword">int</span> L = <span class="number">2</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">2</span> || p == <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt; <span class="number">2</span> || p % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">2</span>; a &lt;= L; ++a) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fpow(a, p<span class="number">-1</span>, p) != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            LL t, k = p - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (!(k &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">                k &gt;&gt;= <span class="number">1</span>, t = fpow(a, k, p);</span><br><span class="line">                <span class="keyword">if</span> (t != p<span class="number">-1</span> &amp;&amp; t != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (t == p<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> MillerRabin::isPrime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Solve5 &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n; read(n);</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            <span class="keyword">static</span> LL L, R; </span><br><span class="line">            read(L), read(R);</span><br><span class="line">            <span class="keyword">for</span> (LL i = L; i &lt;= R; ++i) <span class="built_in">putchar</span>(isPrime(i, <span class="number">3</span>)? <span class="string">'p'</span>: <span class="string">'.'</span>);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Solve6 &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    LL L, R, A[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> notPrime[MAXN];</span><br><span class="line">    <span class="keyword">int</span> mu[MAXN], Prime[MAXN], tot;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">EulerSieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notPrime[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAXN; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!notPrime[i]) Prime[++tot] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i*Prime[j] &lt; MAXN; ++j) &#123;</span><br><span class="line">                notPrime[i*Prime[j]] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (i % Prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">val</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (x == <span class="number">0</span>)? <span class="string">'0'</span>: (x &lt; <span class="number">0</span>? <span class="string">'-'</span>: <span class="string">'+'</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EulerSieve(), read(n);</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            read(L), read(R);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= R - L + <span class="number">1</span>; ++i) mu[i] = <span class="number">1</span>, A[i] = i + L - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot; ++j) &#123;</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">int</span>&amp; p = Prime[j];</span><br><span class="line">                <span class="comment">// 枚举倍数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1L</span>L * p * ((L<span class="number">-1</span>) / p + <span class="number">1</span>) - L + <span class="number">1</span>; i &lt;= R-L+<span class="number">1</span>; i += p) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (A[i] % (<span class="number">1L</span>L * p * p) == <span class="number">0</span>) mu[i] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> mu[i] = -mu[i], A[i] /= p;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= R - L + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mu[i] != <span class="number">0</span> &amp;&amp; A[i] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    LL m = <span class="built_in">sqrt</span>(A[i]);</span><br><span class="line">                    <span class="keyword">if</span> (m * m == A[i]) mu[i] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (A[i] &lt;= <span class="number">1e12</span> || isPrime(A[i])) mu[i] = -mu[i];</span><br><span class="line">                    <span class="comment">// A[i] &lt;= 1e12 时, 一定是素数</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">putchar</span>(val(mu[i]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Solve7 &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e7</span>+<span class="number">5</span>, MAXM = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, p, L, R;</span><br><span class="line">    <span class="keyword">int</span> fact[MAXM], tot;</span><br><span class="line">    <span class="keyword">int</span> vis[MAXN], lg[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prime</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i*i &lt; x; ++i) <span class="keyword">if</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            fact[++tot] = i;</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">1</span>) fact[++tot] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> b, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * base % m;</span><br><span class="line">            base = <span class="number">1L</span>L * base * base % m, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret % m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">            <span class="keyword">if</span> (fpow(g, (p - <span class="number">1</span>) / fact[i], p) == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        read(n);</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            read(L), read(R);</span><br><span class="line">            <span class="keyword">if</span> (R != <span class="number">234133333</span>) read(p); <span class="keyword">else</span> p = <span class="number">1515343657</span>;</span><br><span class="line">            prime(p - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">13123111</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot; ++j)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (p<span class="number">-1</span>) / fact[j]; ++i) vis[i * fact[j]] = <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 6 为 13123111 原根</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">6</span>, i = <span class="number">1</span>; i &lt; p; ++i, x = <span class="number">6L</span>L * x % p) lg[x] = i;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) <span class="built_in">putchar</span>(vis[lg[i]]? <span class="string">'.'</span>: <span class="string">'g'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) <span class="built_in">putchar</span>(isroot(i)? <span class="string">'g'</span>: <span class="string">'.'</span>);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXL = <span class="number">32</span>;</span><br><span class="line"><span class="keyword">char</span> cmd[MAXL];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"output.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, cmd);</span><br><span class="line">    <span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cmd[<span class="number">1</span>] == <span class="string">'_'</span>) <span class="keyword">return</span> Solve1::main();</span><br><span class="line">        <span class="keyword">if</span> (cmd[<span class="number">1</span>] == <span class="string">'?'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cmd[<span class="number">2</span>] == <span class="string">'+'</span>) <span class="keyword">return</span> Solve3::main();</span><br><span class="line">            <span class="keyword">return</span> Solve2::main();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmd[<span class="number">1</span>] == <span class="string">'w'</span>) <span class="keyword">return</span> Solve4::main();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">'2'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cmd[<span class="number">1</span>] == <span class="string">'p'</span>) <span class="keyword">return</span> Solve5::main();</span><br><span class="line">        <span class="keyword">if</span> (cmd[<span class="number">1</span>] == <span class="string">'u'</span>) <span class="keyword">return</span> Solve6::main();</span><br><span class="line">        <span class="keyword">if</span> (cmd[<span class="number">1</span>] == <span class="string">'g'</span>) <span class="keyword">return</span> Solve7::main();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「十二省联考-2019」皮配"><a href="#「十二省联考-2019」皮配" class="headerlink" title="「十二省联考 2019」皮配"></a>「十二省联考 2019」皮配</h3><p>不 是 网 络 流.</p><h4 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3051" target="_blank" rel="noopener">https://loj.ac/problem/3051</a></li></ul><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>考虑背包.</p><p>如果 $k = 0$, 此时为城市选定阵营, 为学校选定导师两种决策互不影响, 直接朴素背包计算方案数, 利用乘法原理相乘即可.</p><p>具体地说, 用 $f(i)$ 表示选择蓝阵营总人数为 $i$ 的方案数, $g(i)$ 表示选择鸭派系总人数为 $i$ 的方案数, 记 $S$ 为总人数和, 那么答案为</p><p>$$\sum_{i = S - C1} ^ {C0} f(i) \sum_{j = S - D1} ^ {D0} g(j)$$</p><p>此时时间复杂度为 $O((n + c) M)$.</p><p>如果 $k &gt; 0$, 没有偏好的城市 / 学校不会受到影响, 直接用以上方法处理即可.</p><p>考虑有偏好的城市 / 学校如何处理. 观察到 $k$ 很小, 此时使用高维 DP. 设 $F(i, j)$ 表示在有偏好的城市及学校中, 城市选择蓝阵营人数为 $i$, 学校选择鸭派系人数为 $j$ 的方案数.</p><p>转移有些复杂… 大力讨论学校偏好即可. 此时动态维护阵营和派系的人数上限可减小常数.</p><p>最后分别枚举蓝阵营和鸭派系人数, 利用 $f,\ g$ 的前缀和 $O(1)$ 合并答案即可.</p><p>综上, 时间复杂度为 $O((n + c) M + kM \min \{M,\ k \cdot \max \{ s_i \}\})$.</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3051</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">5</span>, MAXM = <span class="number">2.5e3</span> + <span class="number">5</span>, MAXK = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, c, K;</span><br><span class="line"><span class="keyword">int</span> C0, C1, D0, D1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> b[MAXN], s[MAXN], cs[MAXN], p[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[MAXM], g[MAXM], pf[MAXM], pg[MAXM];</span><br><span class="line"><span class="keyword">int</span> F[MAXM][MAXM], G[MAXM][MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    read(n), read(c);</span><br><span class="line">    read(C0), read(C1), read(D0), read(D1);</span><br><span class="line">    <span class="built_in">memset</span>(p, <span class="number">-1</span>, (n+<span class="number">1</span>) * <span class="keyword">sizeof</span> (<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; ++i)</span><br><span class="line">        vis[i] = <span class="literal">false</span>, cs[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    <span class="keyword">int</span> S = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        read(b[i]), read(s[i]), cs[b[i]] += s[i], S += s[i];</span><br><span class="line">    read(K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> idx, i = <span class="number">1</span>; i &lt;= K; ++i)</span><br><span class="line">        read(idx), read(p[idx]), vis[b[idx]] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, (C0 + <span class="number">1</span>) * <span class="keyword">sizeof</span> (<span class="keyword">int</span>));</span><br><span class="line">    pf[<span class="number">0</span>] = f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; ++i) <span class="keyword">if</span> (!vis[i] &amp;&amp; cs[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span>&amp; w = cs[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = C0; j &gt;= w; --j)</span><br><span class="line">            f[j] = (f[j] + f[j - w]) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= C0; ++i) pf[i] = (pf[i<span class="number">-1</span>] + f[i]) % P;</span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">0</span>, (D0 + <span class="number">1</span>) * <span class="keyword">sizeof</span> (<span class="keyword">int</span>));</span><br><span class="line">    pg[<span class="number">0</span>] = g[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (p[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span>&amp; w = s[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = D0; j &gt;= w; --j)</span><br><span class="line">            g[j] = (g[j] + g[j - w]) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= D0; ++i) pg[i] = (pg[i<span class="number">-1</span>] + g[i]) % P;</span><br><span class="line">    <span class="built_in">memset</span>(F, <span class="number">0</span>, <span class="keyword">sizeof</span> F);</span><br><span class="line">    <span class="built_in">memset</span>(G, <span class="number">0</span>, <span class="keyword">sizeof</span> G);</span><br><span class="line">    F[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> Cs = <span class="number">0</span>, Ss = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ci = <span class="number">1</span>; ci &lt;= c; ++ci) <span class="keyword">if</span> (vis[ci]) &#123;</span><br><span class="line">        Cs = min(C0, Cs + cs[ci]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Cs; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= Ss; ++j) G[i][j] = F[i][j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> si = <span class="number">1</span>; si &lt;= n; ++si) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> &amp;w = s[si], &amp;h = p[si];</span><br><span class="line">            <span class="keyword">if</span> (b[si] != ci || h == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            Ss = min(D0, Ss + w);</span><br><span class="line">            <span class="keyword">if</span> (h == <span class="number">1</span> || h == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="comment">// 二维指针不会开.c</span></span><br><span class="line">                <span class="comment">// auto 真香.cpp</span></span><br><span class="line">                <span class="keyword">auto</span> A = (h == <span class="number">1</span>)? F: G;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Cs; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = Ss; j &gt;= w; --j) A[i][j] = A[i][j - w];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; w; ++j) A[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">auto</span> A = (h &gt;= <span class="number">2</span>)? F: G;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Cs; ++i)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = Ss; j &gt;= w; --j)</span><br><span class="line">                    A[i][j] = (A[i][j] + A[i][j - w]) % P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span>&amp; w = cs[ci];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= Ss; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = Cs; i &gt;= w; --i) F[i][j] = F[i - w][j];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w; ++i) F[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Cs; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= Ss; ++j) F[i][j] = (F[i][j] + G[i][j]) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Cs; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= Ss; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> L1 = max(<span class="number">0</span>, S - C1 - i), R1 = C0 - i,</span><br><span class="line">                L2 = max(<span class="number">0</span>, S - D1 - j), R2 = D0 - j;</span><br><span class="line">            <span class="keyword">if</span> (L1 &gt; R1 || L2 &gt; R2) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> s1 = (pf[R1] + (L1 &gt; <span class="number">0</span>? P - pf[L1<span class="number">-1</span>]: <span class="number">0</span>)) % P,</span><br><span class="line">                s2 = (pg[R2] + (L2 &gt; <span class="number">0</span>? P - pg[L2<span class="number">-1</span>]: <span class="number">0</span>)) % P;</span><br><span class="line">            ret = (ret + <span class="number">1L</span>L * s1 * s2 % P * F[i][j] % P) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> Ti; read(Ti);</span><br><span class="line">    <span class="keyword">while</span> (Ti--) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「十二省联考-2019」春节十二响"><a href="#「十二省联考-2019」春节十二响" class="headerlink" title="「十二省联考 2019」春节十二响"></a>「十二省联考 2019」春节十二响</h3><p><del>清 明 十 二 响</del></p><h4 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3052" target="_blank" rel="noopener">https://loj.ac/problem/3052</a></li></ul><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>这是一道清新题.</p><p>部分分的提示很明显了, 先考虑一条链的情况怎么做.</p><p>假设当前链被根分成了两段, 且这两段之间没有祖先-后代关系. 记这两段序列为 $a_1,\ a_2,\ \ldots,\ a_n$, $b_1,\ b_2,\ \ldots,\ b_m$.</p><p>令 $n \ge m$, 那么将 $a$ 前 $m$ 大元素取出, 并从大到小依次对应 $b$ 中每一个元素, 取最大值作为当前段的权值, 也就是 “这个段的子程序所需内存大小的最大值”. 此时同 $b$ 合并后得到权值, $a$ 中剩余元素, 根的权值的和即为答案.</p><p>对于树的情况, 直接把每个儿子的答案序列, 按链的方式依次合并即可.</p><p>具体证明参见官方题解好了 (</p><p>用优先队列实现这个过程就好了. 由于每个节点出队后不会再进队, 换句话说, 总的合并次数为 $O(n)$.</p><p>时间复杂度 $O(n \log n)$.</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3052</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; PQ[MAXN];</span><br><span class="line"><span class="keyword">int</span> pre[MAXN], M[MAXN], Idx[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXN];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;, head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> A[MAXN], nA;</span><br><span class="line">        Idx[u] = u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            dfs(v = edges[i].to);</span><br><span class="line">            <span class="keyword">int</span> &amp;iu = Idx[u], &amp;iv = Idx[v];</span><br><span class="line">            <span class="keyword">if</span> (PQ[iv].size() &gt; PQ[iu].size()) swap(iu, iv);</span><br><span class="line">            nA = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (!PQ[iv].empty())</span><br><span class="line">                A[++nA] = max(PQ[iv].top(), PQ[iu].top()), PQ[iv].pop(), PQ[iu].pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nA; ++j) PQ[iu].push(A[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        PQ[Idx[u]].push(M[u]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="comment">// freopen("input.in", "r", stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    Graph::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(M[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) read(pre[i]);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) Graph::AddEdge(pre[i], i);</span><br><span class="line">    Graph::dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span>&amp; u = Idx[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (!PQ[u].empty()) ans += PQ[u].top(), PQ[u].pop();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「十二省联考-2019」希望"><a href="#「十二省联考-2019」希望" class="headerlink" title="「十二省联考 2019」希望"></a>「十二省联考 2019」希望</h3><h4 id="题目链接-5"><a href="#题目链接-5" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/3053" target="_blank" rel="noopener">https://loj.ac/problem/3053</a></li></ul><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p><del>没希望, 走了.</del></p><p>可以发现, 对于一个联通块 $S$, 设满足在 $S$ 中且到 $S$ 中任意点距离都 $\le L$ 的点集为 $T$, 则 $T$ 也是一个联通块.</p><p>推广到 $k$ 个连通块的情况, 也就是满足题目要求的点集 $T$ 为一个连通块.</p><p>设连通块边集为 $E$, 点集为 $V$, 考虑到树上连通块的性质, 有 $|E| - |V| = 1$.</p><p>那么可以通过容斥计算答案. 设 $f(u)$ 表示以点 $u$ 为中心点的联通块数, $g(e)$ 表示以边 $e$ 的两个端点为中心点联通块数, 那么答案可表示为</p><p>$$\sum_{u \in V} f(u)^k - \sum_{e \in E} g(e)^k$$</p><p>于是就可以 DP 了. 以下过程中钦定根节点为 $1$.</p><p>设 $f(i, j)$ 表示以 $i$ 为根的子树, 包含节点 $i$ 且同 $i$ 距离不超过 $j$ 的连通块个数. 那么转移为</p><p>$$f(u, i) = \prod_{v \in son(u)} \left(f(v, i-1) + 1\right)$$</p><p>设 $g(i, j)$ 表示包含节点 $i$, 不包含以 $i$ 为根的子树, 且同 $i$ 距离不超过 $j$ 的连通块个数. 记 $fa$ 为 $u$ 父亲节点, 那么转移为</p><p>$$g(u, i) = g(fa, i-1) \prod_{v \in son(fa),\ v \neq u} \left(f(v, i-2) + 1\right) + 1$$</p><p>记边 $(u, v)$ 中 $v$ 为较深节点, 那么答案为</p><p>$$\sum_{u = 1} ^ n \big(f(u, L)\cdot g(u, L)\big) ^ k - \sum_{(u, v) \in E} \big(f(v, L-1) \cdot (g(v, L) - 1)\big) ^ k$$</p><p>此时直接树形 DP, 两次 DFS 分别处理 $f,\ g$ 即可.</p><p>时间复杂度 $O(nL)$. 36 pts 滚出.</p><p><del>使用长链剖分, 可回退数据结构, 离线求逆元优化即可 AC</del>.</p><p>注意到 $f,\ g$ 的转移可以通过长链剖分优化, 转移时可以用数据结构维护.</p><p>另外 $f,\ g$ 的状态在设计时, 给出的限制是 “距离不超过”. 记 $d(u)$ 为节点 $u$ 到子树内叶子的最长距离, 那么不管 $L$ 的限制, 第二维 $\geq d(u)$ 的状态和第二维等于 $d(u)$ 的状态值相等.</p><p>直接记录 $d(u)$ 的值, 对于超过 $d(u)$ 的部分直接取 $d(u)$ 的值即可.</p><p>转移对 $f,\ g$ 的修改只是后缀乘, 全局加, 以及单点修改. 利用可回退数据结构 — 也就是用类似栈的结构记录操作, 每次记录修改的位置和值, 回退时恢复 — 即可. 此步骤的时间复杂度和空间复杂度都是 $O(n)$.</p><p>回退时还有一个细节. 在更新 $g$ 的值时, 为了使将来会用到的值不会被提前弹出, 所以转移 $g$ 时需要将 DFS 序翻转.</p><p>后缀乘时可能出现模数 $P$ 的倍数, 也就是要考虑后缀乘 $0$ 的问题. 另外维护一个标记, 表示这个标记后的值全部为 $0$ 即可. 注意此时的 “为 $0$” 指经过 $ax + b$ 的标记运算后为 $0$, 也就是后缀赋值 $-\frac{b}{a}$.</p><p>但是转移 $g$ 时需要用到乘法逆元. 所幸需要用到的值的逆元可以不考虑 $L$ 的限制, 通过一次 DFS 求出. 那么用 “线性求逆元” 的 Trick $O(n)$ 计算就好了.</p><p>综上, 得出了时间复杂度为 $O(n)$ 的做法.</p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><p><em>36 pts 代码.</em></p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #3053</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>, MAXL = <span class="number">1e3</span> + <span class="number">5</span>, P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * base * ret % P;</span><br><span class="line">        base = <span class="number">1L</span>L * base * base % P, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, L, K, ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; f[MAXN], g[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123; G[from].push_back(to); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v: G[u]) <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">            dfs1(v, u);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= L; ++i)</span><br><span class="line">                f[u][i] = <span class="number">1L</span>L * f[u][i] * (f[v][i<span class="number">-1</span>] + <span class="number">1</span>) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> p[MAXN], s[MAXN], A[MAXN], nA;</span><br><span class="line">        nA = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v: G[u]) <span class="keyword">if</span> (v != fa) A[++nA] = v;</span><br><span class="line">        p[<span class="number">0</span>] = s[nA + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= L; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nA; ++j)</span><br><span class="line">                    p[j] = <span class="number">1L</span>L * p[j<span class="number">-1</span>] * (f[A[j]][i<span class="number">-2</span>] + <span class="number">1</span>) % P;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = nA; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">                    s[j] = <span class="number">1L</span>L * s[j+<span class="number">1</span>] * (f[A[j]][i<span class="number">-2</span>] + <span class="number">1</span>) % P;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nA; ++j) p[j] = s[j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nA; ++j)</span><br><span class="line">                g[A[j]][i] = (<span class="number">1L</span>L * g[u][i<span class="number">-1</span>] * p[j<span class="number">-1</span>] % P * s[j+<span class="number">1</span>] % P + <span class="number">1</span>) % P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v: G[u]) <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">            ans = (ans + fpow(<span class="number">1L</span>L * f[v][L<span class="number">-1</span>] * (g[v][L] - <span class="number">1</span>) % P, K)) % P;</span><br><span class="line">            dfs2(v, u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dfs1(<span class="number">1</span>, <span class="number">0</span>), dfs2(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        ans = P - ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u)</span><br><span class="line">            ans = (ans + fpow(<span class="number">1L</span>L * f[u][L] * g[u][L] % P, K)) % P;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(L), read(K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        read(u), read(v), Graph::AddEdge(u, v), Graph::AddEdge(v, u);</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        f[i].resize(L + <span class="number">1</span>, <span class="number">1</span>), g[i].resize(L + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    Graph::solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p><em>100 pts 代码.</em></p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 码力尚弱, 码力尚弱.</span></span><br></pre></td></tr></table></figure></div></div><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;其实之前都已经写地差不多了…&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://depletedprism.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>AHOI / HNOI 2018 大赏</title>
    <link href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/AHOI-HNOI-2018-sol/"/>
    <id>https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/AHOI-HNOI-2018-sol/</id>
    <published>2020-03-14T06:11:32.000Z</published>
    <updated>2020-04-09T06:10:52.673Z</updated>
    
    <content type="html"><![CDATA[<hr><p>其实不想再写 18 年的题了… 再写就没时间写 19 年的了 (</p><p>果然立 flag 就是用来倒的.</p><p><del>话说这套题单看正解, 还挺考验思维的?</del></p><a id="more"></a><p>其实写不写都不重要了.</p><h3 id="「AHOI-HNOI2018」寻宝游戏"><a href="#「AHOI-HNOI2018」寻宝游戏" class="headerlink" title="「AHOI / HNOI2018」寻宝游戏"></a>「AHOI / HNOI2018」寻宝游戏</h3><p>挺有意思的一道题.</p><h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2494" target="_blank" rel="noopener">https://loj.ac/problem/2494</a></li></ul><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>先祭上官方题解: <a href="http://matthew99.blog.uoj.ac/blog/3488" target="_blank" rel="noopener">http://matthew99.blog.uoj.ac/blog/3488</a>.</p><p>着重解释一下什么是 “容易证明, 第 $i$ 位的结果为 $1$, 当且仅当 $x&lt;b_i$.”</p><p>首先根据 myy 的题解, 构造出长度为 $n$ 的串 $x$, 以及 $m$ 个长度为 $n$ 的串 $b_i$.</p><p>对于二进制下某一位的值, 此时对这一位 <code>| 0</code> 或者 <code>&amp; 1</code>, 并不会对原来的该位上的值造成影响. 那么, 如果第 $i$ 位为 <code>1</code>, 那么在一次形如 <code>&amp; 0</code> 的操作后, 一定存在操作 <code>&amp; 1</code>.</p><p>也就是说, 如果把左边看作低位, 那么 $x$ 形如 <code>...1...0...</code>, $b_i$ 形如 <code>...0...1...</code>. 换句话说, $x &lt; b_i$.</p><p>大体思路就是这样了, 也不知道考场 AC 的 “逆推” 做法是什么样的. 还有一些值得注意的细节, 也在代码里了.</p><p>由于使用了基数排序, 时间复杂度 $O(nm + mq)$.</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2494</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">5</span>, MAXM = <span class="number">5e5</span> + <span class="number">5</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="keyword">char</span> S[MAXM];</span><br><span class="line"><span class="keyword">int</span> idx[MAXM], pos[MAXM], A[MAXM];</span><br><span class="line"><span class="keyword">int</span> pow2[MAXN], val[MAXM], Ans[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    pow2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) pow2[i] = <span class="number">2L</span>L * pow2[i<span class="number">-1</span>] % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) A[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> c[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, S+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 字符集为 2 的基数排序相当清爽啊</span></span><br><span class="line">        c[<span class="number">0</span>] = <span class="number">0</span>, c[<span class="number">1</span>] = m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">            <span class="keyword">if</span> (S[j] == <span class="string">'1'</span>) val[j] = (val[j] + pow2[i - <span class="number">1</span>]) % P; <span class="keyword">else</span> ++c[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j; --j) idx[c[S[A[j]] - <span class="string">'0'</span>]--] = A[j];</span><br><span class="line">        <span class="built_in">memcpy</span>(A, idx, (m + <span class="number">1</span>) * <span class="keyword">sizeof</span> (<span class="keyword">int</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) Ans[i] = val[A[i]];</span><br><span class="line">    Ans[m + <span class="number">1</span>] = pow2[n];</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, S+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> L = <span class="number">0</span>, R = m + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &gt;= <span class="number">1</span>; --i) <span class="keyword">if</span> (S[A[i]] == <span class="string">'0'</span>) &#123; L = i; <span class="keyword">break</span>; &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="keyword">if</span> (S[A[i]] == <span class="string">'1'</span>) &#123; R = i; <span class="keyword">break</span>; &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, L &lt; R? (Ans[R] - Ans[L] + P) % P: <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「AHOI-HNOI2018」转盘"><a href="#「AHOI-HNOI2018」转盘" class="headerlink" title="「AHOI / HNOI2018」转盘"></a>「AHOI / HNOI2018」转盘</h3><h4 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2495" target="_blank" rel="noopener">https://loj.ac/problem/2495</a></li></ul><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>将选择物品这个过程的顺序倒过来, 也就是在某个时刻 $t$, 从位置 $i$ 开始先前移动, 每个物品在时刻 $T_j$ 消失, 需要在每个物品消失前到达该物品的位置.</p><p>此时容易看出, 选择好位置和时刻之后, 一刻不停地走才能得到当前状态下的最优解. 本题做法就此展开.</p><p>首先将出现时刻序列 $T_i$ 倍长, 记当前出发位置为 $i$ ($i \in [n,\ 2n)$), 当前时刻为 $t$, 则标记所有物品的限制可以表示为</p><p>$$\forall\ j \in (i-n,\ i],\ t - (i - j) \ge T_j$$</p><p>即</p><p>$$t \ge (T_j - j) + i$$</p><p>记 $a_j = T_j - j$, 那么答案为</p><p>$$\min_{i = n} ^ {2n - 1} \{ \max_{j = i - n + 1} ^ {i} \{ a_j \} + i \}$$</p><p>对 $i$ 进行一些变换, 得</p><p>$$\min_{i = 1} ^ n \{ \max_{j = i} ^ {i + n -1} \{ a_j \} + i \} + (n-1)$$</p><p>考虑到 $i \le j &lt; i + n$ 这个限制又臭又长, 因为 $a_i = T_i - i &gt; a_{i + n} = T_{i + n} - (i + n) = T_i - i - n$, 所以此时的 $a_j$ 就是个后缀最大值, 即</p><p>$$\min_{i = 1} ^ n \{ \max_{j = i} ^ {2 n} \{ a_j \} + i \} + (n-1)$$</p><p>考虑某一个位置 $j$, 令 $j$ 满足 $a_j$ 为后缀最大值, 那么从 $j-1$ 往前找到第一个满足 $a_i &gt; a_j$ 的位置 $i$, 此时答案为 $a_j + i + 1$.</p><p>如果此时 $a_j$ 不是后缀最大值, 那么答案和后缀最大值的情况相同.</p><p>就此我们得到了一个单调栈做法, 即维护一个 $a_j$ 值从右到左单调上升的栈, 并设栈中元素为 $p_i$, 令 $p_0 = 0$, 答案即为</p><p>$$\min_{i = 1} ^ j \{ a_{p_i} + p_{i-1} + 1\} + n - 1 = \min_{i = 1} ^ j \{ a_{p_i} + p_{i-1}\} + n$$</p><p>利用线段树维护这个单调栈即可. 还是由于 $a_i = T_i - i,\ a_{i + n} = T_{i + n} - i - n$, 此时只需要维护 $[1,\ n]$ 即可.</p><p>类似的技巧也在 <a href="https://www.luogu.com.cn/problem/P4198" target="_blank" rel="noopener">Luogu P4198 楼房重建</a> 中使用过.</p><p>时间复杂度 $O(n \log ^2 n)$.</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2495</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, p;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SGT &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc (nd&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc (nd&lt;&lt;1|1)</span></span><br><span class="line">    <span class="keyword">int</span> datMax[MAXN &lt;&lt; <span class="number">2</span>], dat[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> datMax[nd] &gt; k? k + L: INF;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; datMax[rc]) <span class="keyword">return</span> min(dat[nd], Qry(rc, Mid+<span class="number">1</span>, R, k));</span><br><span class="line">        <span class="keyword">return</span> Qry(lc, L, Mid, k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        datMax[nd] = max(datMax[lc], datMax[rc]);</span><br><span class="line">        dat[nd] = Qry(lc, L, Mid, datMax[rc]);</span><br><span class="line">        <span class="comment">// 用右子树的最大值在左子树中查询, 以更新答案</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> <span class="keyword">void</span>( datMax[nd] = A[L] - L );</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        build(lc, L, Mid), build(rc, Mid+<span class="number">1</span>, R);</span><br><span class="line">        maintain(nd, L, R);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; pos, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> <span class="keyword">void</span>( datMax[nd] = val - L );</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= Mid) Mdy(lc, L, Mid, pos, val);</span><br><span class="line">        <span class="keyword">else</span> Mdy(rc, Mid+<span class="number">1</span>, R, pos, val);</span><br><span class="line">        maintain(nd, L, R);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> lc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m), read(p);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(A[i]);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    SGT::build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">int</span> x, y, lstans = SGT::Qry(<span class="number">1</span>, <span class="number">1</span>, n, SGT::datMax[<span class="number">1</span>] - n) + n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lstans);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        read(x), read(y);</span><br><span class="line">        x ^= p * lstans, y ^= p * lstans;</span><br><span class="line">        SGT::Mdy(<span class="number">1</span>, <span class="number">1</span>, n, x, y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lstans = SGT::Qry(<span class="number">1</span>, <span class="number">1</span>, n, SGT::datMax[<span class="number">1</span>] - n) + n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「AHOI-HNOI2018」毒瘤"><a href="#「AHOI-HNOI2018」毒瘤" class="headerlink" title="「AHOI / HNOI2018」毒瘤"></a>「AHOI / HNOI2018」毒瘤</h3><p>毒瘤.</p><h4 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2496" target="_blank" rel="noopener">https://loj.ac/problem/2496</a></li></ul><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先考虑树的情况下怎么做.</p><p>设 $f(i, j)$ 表示以节点 $i$ 为根的子树内, 第 $i$ 个点选 ($j = 1$) / 不选 ($j = 0$) 时的方案数, 容易得到转移</p><p>$$f(u, 1) \prod_{v \in son(u)} f(v, 0) \\ f(u, 0) = \prod_{v \in son(u)} (\ f(v, 0) + f(v, 1)\ )$$</p><p>观察到 $n - 1 \le m \le n + 10$ 的限制, 可以得到一个 $O(n 2 ^ {m - n + 1})$, 即依次枚举非树边的选择情况, 以此为限制修改 DP 初始值, 每次都做一次整棵树的 DP.</p><p>此时仍有优化的余地, 考虑到非树边很少, 影响到的点很少, 可以对这些点建出虚树, 并在虚树上 DP.</p><p>具体地说, 考虑虚树上一条边 $(u, v)$, 其在树边上路径为 $k_1,\ k_2,\ \ldots,\ k_n$ (其中 $k_1 = u$, $k_n = v$), 此时 $v$ 对 $u$ 的答案有贡献. 即</p><p>$$f(k_i, 1) := f(k_i, 1) \cdot f(k_{i+1}, 0) \\ f(k_i, 0) := f(k_i, 0) \cdot (\ f(k_{i+1}, 0) + f(k_{i+1}, 1)\ )$$</p><p>手动展开之后式子有些复杂… 冷静一下可以发现, 其中的系数都是一样的, 直接按照定义预处理出来就好了.</p><p>记 $k(u, i, j)$ 表示节点 $u$, 由状态 $i$ 到达状态 $j$, DP 转移时的系数. 则虚树边上的转移可写作</p><p>$$f(u, 0) = \prod_{v \in son(u)} (\ k(v, 1, 0) \cdot f(v, 1) + k(v, 0, 0) \cdot f(v, 0)\ ) \\ f(u, 1) = \prod_{v \in son(u)} (\ k(v, 1, 1) \cdot f(v, 1) + k(v, 0, 1) \cdot f(v, 0)\ )$$</p><p>还应注意到, 虚树上 DP 的初始值并不是 $1$ — 而是原树上, 子树内不包含虚树上结点的 DP 值.</p><p>考虑为什么是这样. 如果原树某个节点, 其子树包含有虚数上节点, 那么此时原树上的答案已经在计算系数的过程中贡献到最终答案了. 因而只考虑子树内不包含虚树上节点的部分即可.</p><p>时间复杂度 $O(n + (m-n+1)\ 2 ^ {m - n + 1})$.</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p>实际为了缓存友好, DP 状态的顺序稍有改变.</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2496</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">114</span>, P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> U[MAXN], V[MAXN], nE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> pre[MAXN], dfn[MAXN], A[MAXN], nA;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">2</span>][MAXN], g[<span class="number">2</span>][MAXN], K[<span class="number">2</span>][<span class="number">2</span>][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx;</span><br><span class="line">    Edge edges[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    Graph() &#123; init(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;, head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; G, T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> HLD &#123;</span><br><span class="line">    <span class="keyword">int</span> son[MAXN], depth[MAXN], size[MAXN], topfa[MAXN], dfs_clock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        pre[u] = fa, size[u] = <span class="number">1</span>, son[u] = <span class="number">-1</span>;</span><br><span class="line">        dfn[u] = ++dfs_clock, depth[u] = depth[fa] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = G.head[u]; ~i; i = G.edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v = G.edges[i].to) == fa) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">                dfs1(v, u), size[u] += size[v];</span><br><span class="line">                <span class="keyword">if</span> (son[u] == <span class="number">-1</span> || size[son[u]] &lt; size[v]) son[u] = v;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dfn[v] &lt; dfn[u])</span><br><span class="line">                U[++nE] = v, V[nE] = u, vis[u] = vis[v] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">        topfa[u] = top;</span><br><span class="line">        <span class="keyword">if</span> (~son[u]) dfs2(son[u], top), vis[u] |= vis[son[u]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = G.head[u]; ~i; i = G.edges[i].nxt)</span><br><span class="line">            <span class="keyword">if</span> ((v = G.edges[i].to) != pre[u] &amp;&amp; v != son[u])</span><br><span class="line">                dfs2(v, v), vis[u] |= vis[v];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (topfa[u] != topfa[v]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (depth[topfa[u]] &lt; depth[topfa[v]]) swap(u, v);</span><br><span class="line">            u = pre[topfa[u]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth[u] &gt; depth[v]? v: u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dfs1(<span class="number">1</span>, <span class="number">0</span>), G.init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (pre[i]) G.AddEdge(pre[i], i);</span><br><span class="line">        dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> VT &#123;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123; <span class="keyword">return</span> dfn[a] &lt; dfn[b]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> stk[MAXN], top;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nE; ++i) A[++nA] = U[i], A[++nA] = V[i];</span><br><span class="line">        sort(A+<span class="number">1</span>, A+<span class="number">1</span>+nA, cmp);</span><br><span class="line">        stk[top = <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nA; ++i) <span class="keyword">if</span> (A[i] != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] == stk[top]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> lca = HLD::LCA(A[i], stk[top]);</span><br><span class="line">            <span class="keyword">if</span> (lca != stk[top]) &#123;</span><br><span class="line">                <span class="keyword">while</span> (top &gt; <span class="number">1</span> &amp;&amp; dfn[lca] &lt; dfn[stk[top<span class="number">-1</span>]])</span><br><span class="line">                    T.AddEdge(stk[top<span class="number">-1</span>], stk[top]), --top;</span><br><span class="line">                <span class="keyword">if</span> (top &gt; <span class="number">1</span> &amp;&amp; dfn[lca] &gt; dfn[stk[top<span class="number">-1</span>]])</span><br><span class="line">                    T.AddEdge(lca, stk[top]), stk[top] = lca;</span><br><span class="line">                <span class="keyword">else</span> T.AddEdge(lca, stk[top--]);</span><br><span class="line">            &#125;</span><br><span class="line">            stk[++top] = A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; top; ++i) T.AddEdge(stk[i], stk[i + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在原树上 DP, 辅助计算系数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">const</span> <span class="keyword">int</span>&amp; ban)</span> </span>&#123;</span><br><span class="line">        f[<span class="number">0</span>][u] = f[<span class="number">1</span>][u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = G.head[u]; ~i; i = G.edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v = G.edges[i].to) == ban || v == pre[u]) <span class="keyword">continue</span>;</span><br><span class="line">            DP(v, u);</span><br><span class="line">            f[<span class="number">1</span>][u] = <span class="number">1L</span>L * f[<span class="number">1</span>][u] * f[<span class="number">0</span>][v] % P;</span><br><span class="line">            f[<span class="number">0</span>][u] = <span class="number">1L</span>L * f[<span class="number">0</span>][u] * (f[<span class="number">0</span>][v] + f[<span class="number">1</span>][v]) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算 DP 初始值 g</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DPinit</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        g[<span class="number">0</span>][u] = g[<span class="number">1</span>][u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = G.head[u]; ~i; i = G.edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v = G.edges[i].to) == fa || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">            DPinit(v, u);</span><br><span class="line">            g[<span class="number">1</span>][u] = <span class="number">1L</span>L * g[<span class="number">1</span>][u] * g[<span class="number">0</span>][v] % P;</span><br><span class="line">            g[<span class="number">0</span>][u] = <span class="number">1L</span>L * g[<span class="number">0</span>][u] * (g[<span class="number">0</span>][v] + g[<span class="number">1</span>][v]) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算系数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Jump</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">const</span> <span class="keyword">int</span>&amp; fa)</span> </span>&#123;</span><br><span class="line">        K[<span class="number">0</span>][<span class="number">0</span>][u] = K[<span class="number">0</span>][<span class="number">1</span>][u] = K[<span class="number">1</span>][<span class="number">0</span>][u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = u; pre[i] != fa; i = pre[i]) &#123;</span><br><span class="line">            DP(pre[i], i);</span><br><span class="line">            <span class="keyword">int</span> ft = pre[i], k0 = K[<span class="number">0</span>][<span class="number">0</span>][u], k1 = K[<span class="number">0</span>][<span class="number">1</span>][u];</span><br><span class="line">            K[<span class="number">0</span>][<span class="number">0</span>][u] = (<span class="number">1L</span>L * f[<span class="number">0</span>][ft] * k0 % P + <span class="number">1L</span>L * f[<span class="number">1</span>][ft] * K[<span class="number">1</span>][<span class="number">0</span>][u] % P) % P;</span><br><span class="line">            K[<span class="number">0</span>][<span class="number">1</span>][u] = (<span class="number">1L</span>L * f[<span class="number">0</span>][ft] * k1 % P + <span class="number">1L</span>L * f[<span class="number">1</span>][ft] * K[<span class="number">1</span>][<span class="number">1</span>][u] % P) % P;</span><br><span class="line">            K[<span class="number">1</span>][<span class="number">1</span>][u] = <span class="number">1L</span>L * f[<span class="number">0</span>][ft] * k1 % P;</span><br><span class="line">            K[<span class="number">1</span>][<span class="number">0</span>][u] = <span class="number">1L</span>L * f[<span class="number">0</span>][ft] * k0 % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在虚树上 DFS 以初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        A[++nA] = u, DPinit(u, fa);</span><br><span class="line">        <span class="keyword">if</span> (fa &amp;&amp; u != fa) Jump(u, fa);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = T.head[u]; ~i; i = T.edges[i].nxt)</span><br><span class="line">            <span class="keyword">if</span> ((v = T.edges[i].to) != fa) init(v, u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123; build(), nA = <span class="number">0</span>, init(<span class="number">1</span>, <span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 虚树上 DP</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = T.head[u]; ~i; i = T.edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v = T.edges[i].to) == fa) <span class="keyword">continue</span>;</span><br><span class="line">            dfs(v, u);</span><br><span class="line">            f[<span class="number">0</span>][u] = <span class="number">1L</span>L * f[<span class="number">0</span>][u] *</span><br><span class="line">                (<span class="number">1L</span>L * K[<span class="number">0</span>][<span class="number">0</span>][v] * f[<span class="number">0</span>][v] % P + <span class="number">1L</span>L * K[<span class="number">0</span>][<span class="number">1</span>][v] * f[<span class="number">1</span>][v] % P) % P;</span><br><span class="line">            f[<span class="number">1</span>][u] = <span class="number">1L</span>L * f[<span class="number">1</span>][u] *</span><br><span class="line">                (<span class="number">1L</span>L * K[<span class="number">1</span>][<span class="number">0</span>][v] * f[<span class="number">0</span>][v] % P + <span class="number">1L</span>L * K[<span class="number">1</span>][<span class="number">1</span>][v] * f[<span class="number">1</span>][v] % P) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        read(u), read(v), G.AddEdge(u, v), G.AddEdge(v, u);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    HLD::solve(), VT::solve();</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; (<span class="number">1</span> &lt;&lt; nE); ++s) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nA; ++i)</span><br><span class="line">            f[<span class="number">0</span>][A[i]] = g[<span class="number">0</span>][A[i]], f[<span class="number">1</span>][A[i]] = g[<span class="number">1</span>][A[i]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nE; ++i)</span><br><span class="line">            <span class="keyword">if</span> ((s &gt;&gt; (i<span class="number">-1</span>)) &amp; <span class="number">1</span>) f[<span class="number">0</span>][U[i]] = f[<span class="number">1</span>][V[i]] = <span class="number">0</span>; <span class="keyword">else</span> f[<span class="number">1</span>][U[i]] = <span class="number">0</span>;</span><br><span class="line">        VT::dfs(<span class="number">1</span>, <span class="number">0</span>), ans = (ans + (f[<span class="number">0</span>][<span class="number">1</span>] + f[<span class="number">1</span>][<span class="number">1</span>]) % P) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「AHOI-HNOI2018」游戏"><a href="#「AHOI-HNOI2018」游戏" class="headerlink" title="「AHOI / HNOI2018」游戏"></a>「AHOI / HNOI2018」游戏</h3><h4 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2508" target="_blank" rel="noopener">https://loj.ac/problem/2508</a></li></ul><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先将房间按上锁的门分割, 处理出房间 $i$ 能到达的房间位置 $[L_i,\ R_i]$. 这样判断 $s$ 是否能到达 $t$, 只需要判断 $t$ 是否在区间 $[L_i,\ R_i]$ 就好了.</p><p>有一个显然的暴力, 对于每个位置向左右两个方向扩展, 并逐步更新 $L_i$ / $R_i$.</p><p>思考如何优化这个暴力. 考虑到对每个位置扩展时, 很多状态被计算了多次. 而题目中钥匙放置位置, 又存在这样的性质:</p><ol><li><p>如果房间 $i$ 和房间 $i+1$ 存在锁, 且钥匙在房间 $i$ 左侧 (包含 $i$), 那么房间 $i+1$ 之后的位置一定不能越过这扇门.</p></li><li><p>如果房间 $i$ 和房间 $i+1$ 存在锁, 且钥匙在房间 $i+1$ 右侧 (包含 $i+1$), 那么房间 $i$ 之前的位置一定不能越过这扇门.</p></li></ol><p>每次遇到一个锁时, 将一个位置向该位置不能到达的地方连边, 建完边后可以得到一个 DAG, 在拓扑排序时更新可到达位置区间即可.</p><p>实际实现时, 直接使用按锁分割后的编号, 也就是所谓 “缩点” 了.</p><p>虽然拓扑排序更新到达位置区间 $[L_i, R_i]$ 时的复杂度看起来很不对劲, 但其实均摊是线性的… 这也是建图方法所保证的.</p><p>时间复杂度 $O(n + m)$.</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2508</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="keyword">int</span> L[MAXN], R[MAXN];</span><br><span class="line"><span class="keyword">int</span> Key[MAXN], Idx[MAXN], idx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXN];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], in[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;, head[from] = eidx;</span><br><span class="line">        ++in[to];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Toposort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= idx; ++i) <span class="keyword">if</span> (!in[i]) Q.push(i);</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">int</span> p1 = Key[L[u] - <span class="number">1</span>], p2 = Key[R[u]];</span><br><span class="line">                <span class="keyword">while</span> (L[u] &lt;= p1 &amp;&amp; p1 &lt;= R[u])</span><br><span class="line">                    flag = <span class="literal">true</span>, L[u] = L[Idx[L[u] - <span class="number">1</span>]], p1 = Key[L[u] - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">while</span> (L[u] &lt;= p2 &amp;&amp; p2 &lt;= R[u])</span><br><span class="line">                    flag = <span class="literal">true</span>, R[u] = R[Idx[R[u] + <span class="number">1</span>]], p2 = Key[R[u]];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt)</span><br><span class="line">                <span class="keyword">if</span> (!(--in[v = edges[i].to])) Q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    Graph::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m), read(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x, i = <span class="number">1</span>; i &lt;= m; ++i) read(x), read(Key[x]);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    L[<span class="number">1</span>] = R[<span class="number">1</span>] = idx = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Key[i - <span class="number">1</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">            L[++idx] = i;</span><br><span class="line">            <span class="keyword">if</span> (Key[i - <span class="number">1</span>] &lt;= i - <span class="number">1</span>) Graph::AddEdge(idx, idx - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> Graph::AddEdge(idx - <span class="number">1</span>, idx);</span><br><span class="line">        &#125;</span><br><span class="line">        R[idx] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记 Idx[i] 为实际房间标号 i, 对应按锁分割后块的编号</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= idx; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L[i]; j &lt;= R[i]; ++j) Idx[j] = i;</span><br><span class="line">    Graph::Toposort();</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> s, t;</span><br><span class="line">        read(s), read(t);</span><br><span class="line">        <span class="built_in">puts</span>((L[Idx[s]] &lt;= t &amp;&amp; t &lt;= R[Idx[s]])? <span class="string">"YES"</span>: <span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「AHOI-HNOI2018」排列"><a href="#「AHOI-HNOI2018」排列" class="headerlink" title="「AHOI / HNOI2018」排列"></a>「AHOI / HNOI2018」排列</h3><h4 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2509" target="_blank" rel="noopener">https://loj.ac/problem/2509</a></li></ul><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>考虑题目中这个很奇怪的限制在说什么.</p><p>既然满足 “如果 $a_{p_j} = p_k$, 那么 $k &lt; j$”, 换句话说, 如果增量构造出这个排列, 在选择 $j$ 时, 一定要先选 $a_j$.</p><p>此时将 $a_j$ 向 $j$ 连边, 如果形成环则一定无解, 否则就是一颗以 $0$ 为根的树.</p><p>考虑如何构造出最优解, 可以发现, 权值都是固定的, 要做的事就是在合法的范围内, 将尽量大的 $w_i$ 放在后面.</p><p>于是可以得到一个贪心策略. 首先找到当前权值最小的位置 $p$, 如果 $p$ 在树上没有父亲, 也就是 $a_p = 0$, 此时一定选择 $p$; 否则在选择 $a_p$ 后立刻选择 $p$.</p><p>因此可以将 $p$ 和 $a_p$ 合并, 具体而言, 每次取出最小值, 更新信息并利用并查集合并即可.</p><p>剩余的问题就是如何找到这个最小值了. 考虑到合并一些节点之后, 得到的就是一个序列. 假有两个序列 $a$, $b$, 记两个序列的权值分别为 $W_a$, $W_b$, 那么</p><p>$$W_a = \sum_{i = p}^{s_a} (p + i)\ w_{a_i} \\ W_b = \sum_{i = p} ^ {s_b} (p + i)\ w_{b_i}$$</p><p>考虑两序列拼接的两种方式, 即</p><p>$$W_{ab} = \sum_{i = 1} ^ {s_a} (p + i)\ w_{a_i} + \sum_{i = 1} ^ {s_b} (p + i + s_a)\ w_{b_i} \\ W_{ba} = \sum_{i = 1} ^ {s_b} (p + i)\ w_{b_i} + \sum_{i = 1} ^ {s_a} (p + i + s_b)\ w_{a_i}$$</p><p>若选择 $ab$ 的形式使得答案更大, 那么有 $W_{ab} &gt; W_{ba}$, 即</p><p>$$s_b \sum_{i = 1} ^ {s_a} w_{a_i} &lt; s_a \sum_{i = 1} ^ {s_b} w_{b_i}$$</p><p>于是万事大吉.</p><p>时间复杂度 $O(n \log n)$.</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><p>如果考虑节点 $0$ 在计算答案时的影响, 则需要把 <code>W[0]</code> 设为 INF, 但是这个 INF 太大爆 <code>long long</code> (虽然不影响结果), 太小会 WA = =</p><p>那就直接不考虑吧 (</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2509</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Item</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, s; LL w;</span><br><span class="line">    Item(<span class="keyword">int</span> _u, <span class="keyword">int</span> _s, LL _w): u(_u), s(_s), w(_w) &#123; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Item&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w * rhs.s &gt; rhs.w * s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], size[MAXN];</span><br><span class="line">LL W[MAXN];</span><br><span class="line">priority_queue&lt;Item&gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> DSU &#123;</span><br><span class="line">    <span class="keyword">int</span> fa[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) fa[i] = i, size[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">findfa</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123; <span class="keyword">return</span> u == fa[u]? u: fa[u] = findfa(fa[u]); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NoAns</span><span class="params">()</span> </span>&#123; <span class="built_in">puts</span>(<span class="string">"-1"</span>), <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXN];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;, head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">bool</span> vis[MAXN];</span><br><span class="line">        <span class="keyword">int</span> s = vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) == fa) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (vis[v]) NoAns();</span><br><span class="line">            s += dfs(v, u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    Graph::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(A[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(W[i]);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) Graph::AddEdge(A[i], i);</span><br><span class="line">    <span class="keyword">if</span> (Graph::dfs(<span class="number">0</span>, <span class="number">-1</span>) != n + <span class="number">1</span>) NoAns();</span><br><span class="line">    DSU::init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) Q.push(Item(i, size[i], W[i]));</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">        Item x = Q.top(); Q.pop();</span><br><span class="line">        <span class="keyword">int</span> u = DSU::findfa(x.u), fa = DSU::findfa(A[u]);</span><br><span class="line">        <span class="keyword">if</span> (size[u] != x.s) <span class="keyword">continue</span>;</span><br><span class="line">        ans += W[u] * size[fa];</span><br><span class="line">        DSU::fa[u] = fa, W[fa] += W[u], size[fa] += size[u];</span><br><span class="line">        <span class="keyword">if</span> (fa) Q.push(Item(fa, size[fa], W[fa]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「AHOI-HNOI2018」道路"><a href="#「AHOI-HNOI2018」道路" class="headerlink" title="「AHOI / HNOI2018」道路"></a>「AHOI / HNOI2018」道路</h3><p>这是一道 NOIP 题…</p><h4 id="题目链接-5"><a href="#题目链接-5" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2510" target="_blank" rel="noopener">https://loj.ac/problem/2510</a></li></ul><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p>观察式子</p><p>$$c_i \cdot (a_i + x) \cdot (b_i + y)$$</p><p>可以发现, 这个式子没有用.</p><p>题目给定的其实是一颗以 $1$ 为根, 共 $2n - 1$ 个节点的二叉树, 叶节点都是乡村. 并钦定连向左儿子的边为公路, 连向右儿子的边为铁路.</p><p>设 $f(u, i, j)$ 表示节点 $u$, 其到根节点共经过 $i$ 条公路, $j$ 条铁路. 则</p><p>对于叶子 $u$, 有</p><p>$$f(u, i, j) = c_u \cdot (a_u + i) \cdot (b_u + j)$$</p><p>对于其他节点 $u$, 记 $u$ 左儿子为 $lc$, 右儿子为 $rc$, 有转移</p><p>$$f(u, i, j) = \min \{ f(lc, i + 1, j) + f(rc, i, j),\ f(lc, i, j) + f(rc, i,  j + 1) \}$$</p><p>答案即为 $f(1, 0, 0)$.</p><p>以及一个卡空间的方法. 考虑到每次计算 $f(u, i, j)$ 时, 只是利用了一条链, 不相交的链之间不会互相影响, 若记二叉树最大深度为 $h$, 第一维只需记录 $2h$ 位即可.</p><p>时间复杂度 $O(h ^ 2 n)$.</p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2510</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">4e4</span> + <span class="number">5</span>, MAXH = <span class="number">41</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], B[MAXN], C[MAXN];</span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">2</span>][(MAXN &gt;&gt; <span class="number">1</span>) | <span class="number">1</span>], dfn[MAXN];</span><br><span class="line">LL f[MAXH][MAXH][(MAXH &lt;&lt; <span class="number">1</span>) | <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> clk, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> du = dfn[u] = clk;</span><br><span class="line">    <span class="keyword">if</span> (u &gt;= n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= x; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= y; ++j)</span><br><span class="line">                f[i][j][du] = <span class="number">1L</span>L * C[u] * (A[u] + i) * (B[u] + j);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 假装自己在下传 DFS 序.png</span></span><br><span class="line">    dfs(ch[<span class="number">0</span>][u], clk + <span class="number">1</span>, x + <span class="number">1</span>, y), dfs(ch[<span class="number">1</span>][u], clk + <span class="number">2</span>, x, y + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> d1 = dfn[ch[<span class="number">0</span>][u]], d2 = dfn[ch[<span class="number">1</span>][u]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= x; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= y; ++j)</span><br><span class="line">            f[i][j][du] = min(f[i + <span class="number">1</span>][j][d1] + f[i][j][d2], f[i][j][d1] + f[i][j + <span class="number">1</span>][d2]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        read(u), read(v);</span><br><span class="line">        ch[<span class="number">0</span>][i] = u &lt; <span class="number">0</span>? -u + n - <span class="number">1</span>: u, ch[<span class="number">1</span>][i] = v &lt; <span class="number">0</span>? -v + n - <span class="number">1</span>: v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt;= n + n<span class="number">-1</span>; ++i) read(A[i]), read(B[i]), read(C[i]);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[<span class="number">0</span>][<span class="number">0</span>][dfn[<span class="number">1</span>]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这周比上周少写了一整套 SDOI = =, 退役稳了.</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;其实不想再写 18 年的题了… 再写就没时间写 19 年的了 (&lt;/p&gt;
&lt;p&gt;果然立 flag 就是用来倒的.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;话说这套题单看正解, 还挺考验思维的?&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://depletedprism.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>HAOI 2018 大赏</title>
    <link href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/HAOI-2018-sol/"/>
    <id>https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/HAOI-2018-sol/</id>
    <published>2020-03-12T08:00:47.000Z</published>
    <updated>2020-04-09T06:10:52.673Z</updated>
    
    <content type="html"><![CDATA[<hr><p>先祭上出题人题解.</p><ul><li><a href="https://dy0607.github.io/%E7%9C%81%E9%80%89/oi%E5%8E%86%E7%A8%8B/2018/04/24/HAOI2018-Round1-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A.html" target="_blank" rel="noopener">dy0607 的 HAOI2018 Round1 解题报告</a></li></ul><p>然而没有找到 Round 2 的官方题解 (</p><a id="more"></a><h3 id="「HAOI2018」奇怪的背包"><a href="#「HAOI2018」奇怪的背包" class="headerlink" title="「HAOI2018」奇怪的背包"></a>「HAOI2018」奇怪的背包</h3><p>要命的 $\gcd$…</p><h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2523" target="_blank" rel="noopener">https://loj.ac/problem/2523</a></li></ul><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>所求即为满足</p><p>$$\sum_{i \in S} a_i V_i \equiv w \pmod P$$</p><p>的不同集合 $S$ 个数, 其中 $a_i &gt; 0$, 表示物品选择个数.</p><p>写成不定方程的形式, 即</p><p>$$\sum_{i \in S} a_i V_i + yP = w$$</p><p>根据裴蜀定理, 该方程有解, 则需满足 $\gcd(V_1, V_2, \ldots, P) \mid w$.</p><p>可以发现, 对所有值, 同 $P$ 取 $\gcd$ 并不会影响答案, 那么枚举 $P$ 的约数, 直接 DP 即可.</p><p>直接 DP… 令 $d(P)$ 表示 $P$ 的约数个数, 容易得到时间复杂度 $O(nd(P)$ 的做法, 但是可以进一步优化.</p><p>枚举 $P$ 的约数, 对于同 $P$ 取 $\gcd$ 相同的 $V_i$, 在 DP 时一起算即可.</p><p>具体地, 设 $f(i, j)$ 表示选择 $P$ 前 $i$ 个约数, 得到 $P$ 的第 $j$ 个约数的方案数. 记 $s(i)$ 表示第 $i$ 个约数在 $\gcd(V_j, P)$ 中的出现次数, $d_i$ 表示 $P$ 第 $i$ 个约数. 那么有</p><p>$$f(i, k) = f(i-1, k) + \sum_{\gcd(d_i, d_j) = d_k} f(i-1, j) \cdot (2 ^ {s(i)} -1)$$</p><p>由于 $P$ 的约数中可能存在一些整除关系, 最后 $O(d^2(P))$ 枚举一遍把贡献加起来就好了.</p><p>时间复杂度 $O(\sqrt{P} + n \log P + d ^ 2(P) \log P)$.</p><p>另外祭上某张流传已久的表格…</p><div style="text-align:center;"><img src="/images/HAOI-2018-sol/wd.jpg"> </div><p><em><p style="text-align:center;">图源 UOJ 用户群, 至少我是从那里找到的</p></em></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2523</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>, MAXD = <span class="number">2e3</span> + <span class="number">5</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, q, P, idx;</span><br><span class="line"><span class="keyword">int</span> id1[MAXN], id2[MAXN], pow2[MAXN];</span><br><span class="line"><span class="keyword">int</span> fact[MAXD], s[MAXD], f[MAXD][MAXD], g[MAXD];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> !b? a: gcd(b, a  % b); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(q), read(P);</span><br><span class="line">    m = <span class="built_in">sqrt</span>(P);</span><br><span class="line">    <span class="comment">// sovle</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d * d &lt;= P; ++d) <span class="keyword">if</span> (P % d == <span class="number">0</span>) &#123;</span><br><span class="line">        fact[++idx] = d, id1[d] = idx;</span><br><span class="line">        <span class="keyword">if</span> (d * d != P) fact[++idx] = P / d, id2[d] = idx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v, i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        read(v), v = gcd(v, P), ++s[(v &lt;= m)? id1[v]: id2[P / v]];</span><br><span class="line">    pow2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) pow2[i] = <span class="number">2L</span>L * pow2[i<span class="number">-1</span>] % MOD;</span><br><span class="line">    f[<span class="number">0</span>][id2[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= idx; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= idx; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> w = gcd(fact[i], fact[j]), k = (w &lt;= m)? id1[w]: id2[P / w];</span><br><span class="line">            f[i][k] = (f[i][k] + <span class="number">1L</span>L * f[i<span class="number">-1</span>][j] * (pow2[s[i]] - <span class="number">1</span> + MOD) % MOD) % MOD;</span><br><span class="line">            f[i][j] = (f[i][j] + f[i<span class="number">-1</span>][j]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= idx; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= idx; ++j)</span><br><span class="line">            <span class="keyword">if</span> (fact[i] % fact[j] == <span class="number">0</span>) g[i] = (g[i] + f[idx][j]) % MOD;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> w;</span><br><span class="line">        read(w), w = gcd(w, P), <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, g[(w &lt;= m)? id1[w]: id2[P / w]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「HAOI2018」反色游戏"><a href="#「HAOI2018」反色游戏" class="headerlink" title="「HAOI2018」反色游戏"></a>「HAOI2018」反色游戏</h3><h4 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2524" target="_blank" rel="noopener">https://loj.ac/problem/2524</a></li></ul><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先有一个简洁的结论, 所求的方案数为 $2^{m - n + p}$, 其中 $m$ 为边数, $n$ 为点数, $p$ 为连通分量个数.</p><p>官方题解从图论和线性代数两个角度解释了这个结论, 然而我只能流下学不会线性代数的泪水…</p><p>于是从图的连通性入手解释这个结论.</p><p>单独考虑每一个连通分量, 如果该连通分量中存在偶数个黑点, 那么一定存在可行方案; 否则不存在.</p><p>考虑将该连通分量中的黑点任意两两配对, 由于存在偶数个黑点, 所以没有多余. 可以发现</p><ul><li>对于两黑点间的任意一条路径, 不论经过的边数是奇是偶, 总可以构造出一种方案, 使得路径上只有这两个黑点颜色反转.</li><li>对于这些路径的交, 每次把边选 / 不选的状态取反, 不会影响到原来的局面.</li></ul><p>如果存在奇数个黑点, 则不存在以上性质… 因而不存在合法方案.</p><p>同时我们知道了, 配对数和方案数是等价的. 换言之, 每种黑点两两匹配的方案, 唯一对应着一个合法解.</p><p>所以对于一个点数为 $n$ 的连通分量, 有解的情况有 $2^{n-1}$ 种 (拿组合数加起来推一推可知), 由于边数为 $m$, 共 $2^m$ 种情况, 所以每种有解的情况下, 解的个数为 $2^{m-n+1}$. 对 $p$ 个连通分量进行推广, 答案即为 $2 ^ {m - n + p}$.</p><p>似乎还可以从另一个角度解释? 参见 <a href="https://www.cnblogs.com/xjqxjq/p/11781185.html" target="_blank" rel="noopener">https://www.cnblogs.com/xjqxjq/p/11781185.html</a>.</p><p>知道结论后的做法就很明晰了, 跑 tarjan 求割点, 讨论是否有解, 以及删边后整体边数, 点数, 连通分量个数的变化即可.</p><p>时间复杂度 $O(n + m)$.</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2524</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> V[MAXN], pow2[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], deg[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(deg, <span class="number">0</span>, <span class="keyword">sizeof</span> deg), <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;, head[from] = eidx;</span><br><span class="line">        ++deg[to];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> Even[MAXN];</span><br><span class="line">    <span class="keyword">int</span> cut[MAXN], dfn[MAXN], low[MAXN], dfs_clock;</span><br><span class="line">    <span class="keyword">int</span> Idx[MAXN], size[MAXN], sub[MAXN], idx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> child = <span class="number">0</span>;</span><br><span class="line">        Idx[u] = idx, size[u] = V[u];</span><br><span class="line">        low[u] = dfn[u] = ++dfs_clock;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dfn[v = edges[i].to]) &#123;</span><br><span class="line">                tarjan(v, u);</span><br><span class="line">                size[u] += size[v], ++child;</span><br><span class="line">                low[u] = min(low[u], low[v]);</span><br><span class="line">                <span class="keyword">if</span> (low[v] &gt;= dfn[u])</span><br><span class="line">                    ++cut[u], sub[u] += size[v], Even[u] &amp;= !(size[v] &amp; <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dfn[v] &lt; dfn[u] &amp;&amp; v != fa)</span><br><span class="line">                low[u] = min(low[u], dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fa) --cut[u];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        dfs_clock = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u)</span><br><span class="line">            Even[u] = <span class="literal">true</span>, sub[u] = dfn[u] = low[u] = cut[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// solve</span></span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>, s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u)</span><br><span class="line">            <span class="keyword">if</span> (!dfn[u]) idx = u, ++p, tarjan(u, <span class="number">0</span>), s += size[u] &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// output</span></span><br><span class="line">        <span class="keyword">int</span> tot = m - n + p;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, s &gt; <span class="number">0</span>? <span class="number">0</span>: pow2[tot]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!deg[u]) <span class="built_in">printf</span>(<span class="string">"%d"</span>, s - size[u] &gt; <span class="number">0</span>? <span class="number">0</span>: pow2[tot]);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d"</span>, (!Even[u] || s - (size[Idx[u]] &amp; <span class="number">1</span>) &gt; <span class="number">0</span> || ((size[Idx[u]] - V[u] - sub[u]) &amp; <span class="number">1</span>))?</span><br><span class="line">                    <span class="number">0</span>: pow2[tot - deg[u] + <span class="number">1</span> + cut[u]]);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">" \n"</span>[u == n]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    pow2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXN; ++i) pow2[i] = <span class="number">2L</span>L * pow2[i<span class="number">-1</span>] % P;</span><br><span class="line">    <span class="keyword">int</span> Ti;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Ti);</span><br><span class="line">    <span class="keyword">while</span> (Ti--) &#123;</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        Graph::init();</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">            Graph::AddEdge(u, v), Graph::AddEdge(v, u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%1d"</span>, V+i);</span><br><span class="line">        <span class="comment">// solve</span></span><br><span class="line">        Graph::solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「HAOI2018」字串覆盖"><a href="#「HAOI2018」字串覆盖" class="headerlink" title="「HAOI2018」字串覆盖"></a>「HAOI2018」字串覆盖</h3><h4 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2525" target="_blank" rel="noopener">https://loj.ac/problem/2525</a></li></ul><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>出题人称本题算法并不优美… 其实也的确不怎么优美 = =</p><p>LOJ 上的题面并没有所有数据点的限制, 可以参考洛谷的题面: <a href="https://www.luogu.com.cn/problem/P4493" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P4493</a>.</p><p>观察数据点的限制, 可以发现 $r-l$ 的限制非常独特, 于是分两种情况讨论:</p><ul><li><p>$r-l \ge 2000$</p><p>此时串 $P$ 较长, 那么 $P$ 在 $T$ 中匹配次数较小.</p><p>考虑覆盖操作, 每次选择位置最靠前, 且未被覆盖的位置去覆盖, 直到单次对答案的贡献 $\le 0$. 此时得到的答案一定是最优的.</p><p>设匹配次数为 $p$, 利用 SAM 以及线段树合并维护 $endpos$ 集合的套路, 可以在 $O(p \log n)$ 的时间完成单次询问.</p><p>具体地说, 对串 $A$ 建 SAM, 在线段树上维护 $endpos$ 中最靠后位置. 对于串 $P$, 利用倍增找到其在 SAM 上对应节点. 如果可以匹配, 每次在线段树上二分, 找到一个最靠前位置, 累计答案, 并继续匹配.</p><p>对于 $50 &lt; r-l &lt; 2000$ 的情况, 数据中限制了该情况的出现次数, 直接按以上方法做即可.</p></li><li><p>$r-l \le 50$</p><p>此时串 $P$ 较短, 那么串 $A$ 中所有长度为 $|P|$ 的子串只有 $n - |P| + 1$ 种. 考虑用倍增处理所有的这些子串.</p><p>参考 <a href="http://phantasmdragon.leanote.com/post/%5B%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA%5D%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5D%5B%E5%80%8D%E5%A2%9E%5D%5B%E4%B9%B1%E6%90%9E%5D%E3%80%8CHAOI2018%E3%80%8D%E5%AD%97%E4%B8%B2%E8%A6%86%E7%9B%96" target="_blank" rel="noopener">PhantasmDragon</a> 的思路, 对于串 $A$ 中一个从位置 $i$ 开始的子串 $s$, 设 $\operatorname{nxt}(|s|, i, j)$ 表示后 $2^j$ 个字符同 $s$ 相同的字符串的左端点位置.</p><p>同时记录 $f(|s|, i, j)$, 表示此时对答案的贡献.</p><p>单次查询时形同上面一种情况, 先找到串 $P$ 对应在 SAM 的节点, 以及第一个匹配位置, 然后倍增统计答案即可.</p><p>对于预处理, 枚举每个长度, 对于每个不同的子串, 利用哈希和双端队列维护 $\operatorname{nxt}$. 接着套路倍增即可.</p><p>直接预处理似乎不太可行, 可以将所有询问离线, 按串 $P$ 长度排序, 遇到不同长度直接重新计算倍增数组就好了.</p><p>单次询问时间复杂度 $O(\log n)$.</p></li></ul><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p><del>直 接 自 然 溢 出 啥 事 没 有</del></p><p>然后流下了只会写双哈希的泪水…</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2525</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>, MAXM = <span class="number">2e5</span> + <span class="number">5</span>, SIGMA = <span class="number">26</span>, LOG = <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ask</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> idx, s, t, L, R;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Ask&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R - L &lt; rhs.R - rhs.L;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, K, q;</span><br><span class="line"><span class="keyword">char</span> A[MAXN], B[MAXN];</span><br><span class="line"><span class="keyword">int</span> Bpos[MAXN], Blgt[MAXN], rt[MAXM], pre[LOG][MAXM];</span><br><span class="line">LL Ans[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SGT &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span> <span class="keyword">int</span> lc, rc, pos; &#125; dat[MAXM &lt;&lt; <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> nidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> nd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> &amp;lc = dat[nd].lc, &amp;rc = dat[nd].rc;</span><br><span class="line">        dat[nd].pos = max(dat[lc].pos, dat[rc].pos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> <span class="keyword">void</span>( dat[nd].pos = L );</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= Mid) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dat[nd].lc) dat[nd].lc = ++nidx;</span><br><span class="line">            Mdy(dat[nd].lc, L, Mid, pos);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dat[nd].rc) dat[nd].rc = ++nidx;</span><br><span class="line">            Mdy(dat[nd].rc, Mid+<span class="number">1</span>, R, pos);</span><br><span class="line">        &#125;</span><br><span class="line">        maintain(nd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Mrg</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line">        <span class="keyword">int</span> nd = ++nidx;</span><br><span class="line">        dat[nd].lc = Mrg(dat[x].lc, dat[y].lc);</span><br><span class="line">        dat[nd].rc = Mrg(dat[x].rc, dat[y].rc);</span><br><span class="line">        <span class="keyword">return</span> maintain(nd), nd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> L;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (dat[dat[nd].lc].pos &gt;= pos) <span class="keyword">return</span> Qry(dat[nd].lc, L, Mid, pos);</span><br><span class="line">        <span class="keyword">return</span> Qry(dat[nd].rc, Mid+<span class="number">1</span>, R, pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SAM &#123;</span><br><span class="line">    <span class="keyword">int</span> ch[MAXM][SIGMA], len[MAXM], lnk[MAXM], nidx, last;</span><br><span class="line">    <span class="keyword">int</span> cnt[MAXN], idx[MAXM];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; nidx = last = <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nd = ++nidx, p = last;</span><br><span class="line">        len[nd] = len[last] + <span class="number">1</span>, SGT::Mdy(rt[nd] = ++SGT::nidx, <span class="number">1</span>, n, i);</span><br><span class="line">        <span class="keyword">while</span> (p &amp;&amp; !ch[p][val]) ch[p][val] = nd, p = lnk[p];</span><br><span class="line">        <span class="keyword">if</span> (!p) lnk[nd] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> q = ch[p][val];</span><br><span class="line">            <span class="keyword">if</span> (len[q] == len[p] + <span class="number">1</span>) lnk[nd] = q;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> nxt = ++nidx;</span><br><span class="line">                len[nxt] = len[p] + <span class="number">1</span>, lnk[nxt] = lnk[q];</span><br><span class="line">                <span class="built_in">memcpy</span>(ch[nxt], ch[q], <span class="keyword">sizeof</span> ch[nxt]);</span><br><span class="line">                <span class="keyword">while</span> (p &amp;&amp; ch[p][val] == q) ch[p][val] = nxt, p = lnk[p];</span><br><span class="line">                lnk[nd] = lnk[q] = nxt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        last = nd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// toposort</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nidx; ++i) ++cnt[len[i]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cnt[i] += cnt[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nidx; ++i) idx[cnt[len[i]]--] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u, i = nidx; i &gt; <span class="number">1</span>; --i)</span><br><span class="line">            u = idx[i], rt[lnk[u]] = SGT::Mrg(rt[lnk[u]], rt[u]);</span><br><span class="line">        <span class="comment">// multi</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nidx; ++i) pre[<span class="number">0</span>][i] = lnk[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; LOG; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nidx; ++i) pre[j][i] = pre[j<span class="number">-1</span>][pre[j<span class="number">-1</span>][i]];</span><br><span class="line">        <span class="comment">// match B</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>, l = <span class="number">0</span>, i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = B[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (ch[u][val]) u = ch[u][val], ++l;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (u &amp;&amp; !ch[u][val]) u = lnk[u];</span><br><span class="line">                <span class="keyword">if</span> (!u) u = <span class="number">1</span>, l = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> l = len[u] + <span class="number">1</span>, u = ch[u][val];</span><br><span class="line">            &#125;</span><br><span class="line">            Bpos[i] = u, Blgt[i] = l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Jump</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">const</span> <span class="keyword">int</span>&amp; lgt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Blgt[u] &lt; lgt) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        u = Bpos[u];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = LOG<span class="number">-1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            <span class="keyword">if</span> (pre[j][u] &amp;&amp; len[pre[j][u]] &gt;= lgt) u = pre[j][u];</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lgt = R - L + <span class="number">1</span>, u = Jump(R, lgt);</span><br><span class="line">        <span class="keyword">if</span> (!u || SGT::dat[rt[u]].pos &lt; s + lgt - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        LL ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = SGT::Qry(rt[u], <span class="number">1</span>, n, s + lgt - <span class="number">1</span>); i &lt;= t; i = SGT::Qry(rt[u], <span class="number">1</span>, n, i + lgt)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (K - (i - lgt + <span class="number">1</span>) &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            ret += K - (i - lgt + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (SGT::dat[rt[u]].pos &lt; i + lgt) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Hash &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Hash</span> &#123;</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> P1 = <span class="number">998244353</span>, P2 = <span class="number">1e9</span> + <span class="number">7</span>, B = <span class="number">19260817</span>;</span><br><span class="line">        <span class="keyword">int</span> H1, H2;</span><br><span class="line"></span><br><span class="line">        Hash(<span class="keyword">int</span> _H1 = <span class="number">0</span>, <span class="keyword">int</span> _H2 = <span class="number">0</span>): H1(_H1), H2(_H2) &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; ch)</span> </span>&#123;</span><br><span class="line">            H1 = (<span class="number">1L</span>L * H1 * B % P1 + ch) % P1, H2 = (<span class="number">1L</span>L * H2 * B % P2 + ch) % P2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Hash <span class="keyword">operator</span> + (<span class="keyword">const</span> Hash&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Hash((H1 + rhs.H1) % P1, (H2 + rhs.H2) % P2);</span><br><span class="line">        &#125;</span><br><span class="line">        Hash <span class="keyword">operator</span> - (<span class="keyword">const</span> Hash&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Hash((H1 - rhs.H1 + P1) % P1, (H2 - rhs.H2 + P2) % P2);</span><br><span class="line">        &#125;</span><br><span class="line">        Hash <span class="keyword">operator</span> * (<span class="keyword">const</span> Hash&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Hash(<span class="number">1L</span>L * H1 * rhs.H1 % P1, <span class="number">1L</span>L * H2 * rhs.H2 % P2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Hash&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> H1 &lt; rhs.H1 || (H1 == rhs.H1 &amp;&amp; H2 &lt; rhs.H2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; P[MAXN], hA[MAXN];</span><br><span class="line">    LL f[LOG][MAXM];</span><br><span class="line">    <span class="keyword">int</span> nxt[LOG][MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        P[<span class="number">0</span>] = Hash(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            P[i] = P[i<span class="number">-1</span>] * Hash(Hash::B, Hash::B);</span><br><span class="line">            hA[i] = hA[i<span class="number">-1</span>], hA[i].insert(A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lgt)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;Hash, <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; &gt; Q;</span><br><span class="line">        <span class="built_in">memset</span>(nxt, <span class="number">0</span>, <span class="keyword">sizeof</span> nxt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - lgt + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            Hash h = hA[i + lgt - <span class="number">1</span>] - hA[i<span class="number">-1</span>] * P[lgt];</span><br><span class="line">            <span class="keyword">while</span> (!Q[h].empty() &amp;&amp; Q[h].front() &lt;= i - lgt)</span><br><span class="line">                nxt[<span class="number">0</span>][Q[h].front()] = i, Q[h].pop_front();</span><br><span class="line">            Q[h].push_back(i), f[<span class="number">0</span>][i] = K - i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; LOG; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - lgt + <span class="number">1</span>; ++i)</span><br><span class="line">                nxt[j][i] = nxt[j<span class="number">-1</span>][nxt[j<span class="number">-1</span>][i]], f[j][i] = f[j<span class="number">-1</span>][i] + f[j<span class="number">-1</span>][nxt[j<span class="number">-1</span>][i]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lgt = R - L + <span class="number">1</span>, u = SAM::Jump(R, lgt);</span><br><span class="line">        <span class="keyword">if</span> (!u || SGT::dat[rt[u]].pos &lt; s + lgt - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> st = SGT::Qry(rt[u], <span class="number">1</span>, n, s + lgt - <span class="number">1</span>) - lgt + <span class="number">1</span>, ed = t - lgt + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (st &gt; ed) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        LL ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = LOG<span class="number">-1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            <span class="keyword">if</span> (nxt[j][st] &amp;&amp; nxt[j][st] &lt;= ed) ret += f[j][st], st = nxt[j][st];</span><br><span class="line">        <span class="keyword">return</span> ret + f[<span class="number">0</span>][st];</span><br><span class="line">        <span class="comment">// nxt[j][st] 不行, 不代表我 st 不行了 (</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    SAM::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%s%s"</span>, &amp;n, &amp;K, A+<span class="number">1</span>, B+<span class="number">1</span>);</span><br><span class="line">    read(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s, t, L, R, i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        read(s), read(t), read(L), read(R);</span><br><span class="line">        Q[i] = (Ask)&#123; i, s, t, L, R &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    Hash::init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) SAM::insert(A[i] - <span class="string">'a'</span>, i);</span><br><span class="line">    SAM::build();</span><br><span class="line">    sort(Q+<span class="number">1</span>, Q+<span class="number">1</span>+q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Q[i].R - Q[i].L &gt; <span class="number">50</span>) Ans[Q[i].idx] = SAM::Qry(Q[i].s, Q[i].t, Q[i].L, Q[i].R);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> || Q[i].R - Q[i].L != Q[i<span class="number">-1</span>].R - Q[i<span class="number">-1</span>].L)</span><br><span class="line">                Hash::build(Q[i].R - Q[i].L + <span class="number">1</span>);</span><br><span class="line">            Ans[Q[i].idx] = Hash::Qry(Q[i].s, Q[i].t, Q[i].L, Q[i].R);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「HAOI2018」苹果树"><a href="#「HAOI2018」苹果树" class="headerlink" title="「HAOI2018」苹果树"></a>「HAOI2018」苹果树</h3><h4 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2526" target="_blank" rel="noopener">https://loj.ac/problem/2526</a></li></ul><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>先吐槽出题人不把模数的限制写详细一点…</p><p>不过不怎么影响做题来着.</p><p>首先可以发现, 期望再乘 $n!$ 就是大忽悠 = =, 所求即为所有节点数为 $n$ 的二叉树, 两两距离之和的和.</p><p>有一个性质, 一条边 $(i,\ j)$ 被经过的次数为 $s (n - s)$, 其中 $s$ 为 $j$ 对应子树大小. 考虑到 $n \le 2000$, 可以枚举一个点, 以及对应这个点对应子树大小来计算答案.</p><p>设当前枚举到第 $i$ 个点, 前 $i$ 个点的位置都确定了, 且节点 $i$ 某一个儿子的子树大小为 $j$.</p><p>$$\sum_{i=1}^n i! \sum_{j=1}^{n-i} j(n-j) \cdot 2\ \binom{n-i}{j} j! \cdot \prod_{k=i}^{n-j-1}k$$</p><p>再稍微解释一下, 前 $i$ 个点的选择顺序是一个排列, $i$ 到其某一个儿子的边被经过 $j(n-j)$ 次.</p><p>考虑大小为 $j$ 子树的内节点排布情况, 也就是在剩余 $n-i$ 个节点中挑出 $j$ 个节点做一个排列, 由于是二叉树, 方案数 $\times 2$.</p><p>再考虑该子树外的情况, 对于剩下的 $n - j - i$ 个节点, 不能挂在该子树内, 依次有 $i,\ i+1,\ \ldots, n-j-1$ 种选择 (因为每次都新加了一个节点), 由乘法原理乘起来就好了.</p><p>似乎做完了, 其实已经做完了, 后面的累乘预处理一下就好了.</p><p>其实后面的累乘化简一下就消掉了, 也就是</p><p>$$2\sum_{i=1}^n i!(n-i)! \sum_{j=1}^{n-i} j(n-j) \binom{n-j-1}{i-1}$$</p><p>总感觉这个式子有着什么高妙的组合意义.</p><p>时间复杂度 $O(n^2)$.</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><p>代码中使用了 1 式.</p><p>2 式代码也交在 loj 上了, 常数小了一倍…</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2526</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, Mod;</span><br><span class="line"><span class="keyword">int</span> fac[MAXN], C[MAXN][MAXN], f[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;Mod);</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j) C[i][j] = (C[i<span class="number">-1</span>][j<span class="number">-1</span>] + C[i<span class="number">-1</span>][j]) % Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) f[i][j] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; ++j) f[i][j] = <span class="number">1L</span>L * f[i][j<span class="number">-1</span>] * j % Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) fac[i] = <span class="number">1L</span>L * fac[i<span class="number">-1</span>] * i % Mod;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n - i; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> s1 = <span class="number">1L</span>L * j * (n-j) % Mod;</span><br><span class="line">            <span class="keyword">int</span> s2 = <span class="number">2L</span>L * C[n-i][j] * fac[j] % Mod;</span><br><span class="line">            now = (now + <span class="number">1L</span>L * s1 * s2 % Mod * f[i][n - j - <span class="number">1</span>] % Mod) % Mod;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = (ans + <span class="number">1L</span>L * fac[i] * now % Mod) % Mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「HAOI2018」染色"><a href="#「HAOI2018」染色" class="headerlink" title="「HAOI2018」染色"></a>「HAOI2018」染色</h3><h4 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2527" target="_blank" rel="noopener">https://loj.ac/problem/2527</a></li></ul><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>如果想到了二项式反演, 那么这道题还算套路吧…</p><p><del>可惜没有, 溜了溜了, 还在化卷积上浪费时间, 退役稳了</del></p><p>设 $f(x)$ 表示钦定 $x$ 种颜色出现 $S$ 次, $g(x)$ 表示恰好 $x$ 种颜色出现 $S$ 次.</p><p>记 $N = \min \{ m,\ \lfloor \dfrac{n}{S} \rfloor \}$, 那么答案即为</p><p>$$\sum_{k=0}^N W_k \cdot g(k)$$</p><p>先考虑如何计算 $f(x)$, 也就是在 $m$ 种颜色中挑出 $x$ 种出现 $S$ 次, 任意排列, 且不管其余位置的颜色, 那么可以得到</p><p>$$f(x) = \binom{m}{x} \cdot \frac{n!}{(S!)^x \cdot (n-Sx)!} \cdot (m-x)^{n-Sx}$$</p><p>(中间部分是一个多重集合的排列数, 为了方便就拆开了)</p><p>对于 $f(x)$ 和 $g(x)$, 有</p><p>$$f(x) = \sum_{i=x}^N \binom{i}{x} g(i)$$</p><p>二项式反演一通之后可以得到</p><p>$$g(x) = \sum_{i=x}^N (-1) ^ {i-x} \binom{i}{x} f(i)$$</p><p>把组合数展开, 得</p><p>$$g(x) \cdot x! = \sum_{i=x}^N \frac{(-1)^{i-x}}{(i-x)!}\ i! \cdot f(i)$$</p><p>接下来, 卷积登场. 记 $h(x) = \frac{(-1)^{N-x}}{(N-x)!}$, 那么</p><p>$$g(x) \cdot x! = \sum_{i=x}^N h(N+x-i)\ i!\cdot f(i)$$</p><p>用 NTT 优化计算即可. 时间复杂度 $O(n \log n)$.</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2527</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXL = <span class="number">1e7</span> + <span class="number">5</span>, MAXN = <span class="number">1</span> &lt;&lt; <span class="number">19</span> | <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1004535809</span>, G = <span class="number">3</span>, iG = <span class="number">334845270</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fac[MAXL], ifac[MAXL];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; m)? <span class="number">0</span>: <span class="number">1L</span>L * fac[n] * ifac[n-m] % P * ifac[m] % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * base % P;</span><br><span class="line">        base = <span class="number">1L</span>L * base * base % P, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">    <span class="keyword">int</span> r[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; Lim, <span class="keyword">const</span> <span class="keyword">int</span>&amp; L)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Lim; ++i) r[i] = (r[i&gt;&gt;<span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (L<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span>* f, <span class="keyword">const</span> <span class="keyword">int</span>&amp; Lim, <span class="keyword">const</span> <span class="keyword">int</span>&amp; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Lim; ++i) <span class="keyword">if</span> (i &lt; r[i]) swap(f[i], f[r[i]]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> Mid = <span class="number">1</span>; Mid &lt; Lim; Mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> unit = fpow(type &gt; <span class="number">0</span>? G: iG, (P - <span class="number">1</span>) / (Mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; i += Mid &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> w = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Mid; ++j, w = <span class="number">1L</span>L * w * unit % P) &#123;</span><br><span class="line">                    <span class="keyword">int</span> f0 = f[i+j], f1 = <span class="number">1L</span>L * w * f[i+j+Mid] % P;</span><br><span class="line">                    f[i+j] = (f0 + f1) % P, f[i+j+Mid] = (f0 - f1 + P) % P;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> inv = fpow(Lim, P<span class="number">-2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) f[i] = <span class="number">1L</span>L * f[i] * inv % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, S;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], f[MAXN], g[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m), read(S);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) read(A[i]);</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    <span class="keyword">int</span> N = max(max(n, m), S);</span><br><span class="line">    ifac[<span class="number">0</span>] = fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) fac[i] = <span class="number">1L</span>L * fac[i<span class="number">-1</span>] * i % P;</span><br><span class="line">    ifac[N] = fpow(fac[N], P<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N; i; --i) ifac[i<span class="number">-1</span>] = <span class="number">1L</span>L * ifac[i] * i % P;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    N = min(m, n / S);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> s1 = <span class="number">1L</span>L * fac[n] * fpow(ifac[S], i) % P * ifac[n - S * i] % P;</span><br><span class="line">        <span class="keyword">int</span> s2 = <span class="number">1L</span>L * fpow(m - i, n - S * i) * fac[i] % P;</span><br><span class="line">        f[i] = <span class="number">1L</span>L * C(m, i) * s1 % P * s2 % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        g[i] = ifac[N - i];</span><br><span class="line">        <span class="keyword">if</span> ((N - i) &amp; <span class="number">1</span>) g[i] = P - g[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> Lim = <span class="number">1</span>, L = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (Lim &lt;= N + N) Lim &lt;&lt;= <span class="number">1</span>, ++L;</span><br><span class="line">    Poly::init(Lim, L), Poly::NTT(f, Lim, <span class="number">1</span>), Poly::NTT(g, Lim, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) g[i] = <span class="number">1L</span>L * g[i] * f[i] % P;</span><br><span class="line">    Poly::NTT(g, Lim, <span class="number">-1</span>);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= N; ++i) ans = (ans + <span class="number">1L</span>L * g[i+N] * ifac[i] % P * A[i] % P) % P;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;先祭上出题人题解.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dy0607.github.io/%E7%9C%81%E9%80%89/oi%E5%8E%86%E7%A8%8B/2018/04/24/HAOI2018-Round1-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dy0607 的 HAOI2018 Round1 解题报告&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而没有找到 Round 2 的官方题解 (&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://depletedprism.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>九省联考 2018 大赏</title>
    <link href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/union-2018-sol/"/>
    <id>https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/union-2018-sol/</id>
    <published>2020-03-11T03:13:32.000Z</published>
    <updated>2020-04-09T06:10:52.673Z</updated>
    
    <content type="html"><![CDATA[<hr><p>高一玩泥巴的时候陪着学长做过… 然而只是暴力的忠实选手.</p><p><del>结果现在还是暴力的忠实选手.</del></p><a id="more"></a><h3 id="「九省联考-2018」一双木棋"><a href="#「九省联考-2018」一双木棋" class="headerlink" title="「九省联考 2018」一双木棋"></a>「九省联考 2018」一双木棋</h3><h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2471" target="_blank" rel="noopener">https://loj.ac/problem/2471</a></li></ul><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>当年真是菜啊… 看不懂状压.</p><p>落子的规则很有意思, 手玩以后可以发现, 落子的形状是一个上三角…</p><p>考虑到 $n,\ m \le 10$, 可以状压表示这个上三角的轮廓. 具体地说, 用一条包含 <code>0</code> / <code>1</code> 的序列表示一条从左下角到右上角的轮廓线. </p><p>假如用 <code>1</code> 表示轮廓线中横线, 用 <code>0</code> 表示竖线, 那么起始状态就是 <code>((1 &lt;&lt; m) - 1) &lt;&lt; n</code>, 最终的状态为 <code>(1 &lt;&lt; m) - 1</code>. (从低位到高位, 从左下角到右上角)</p><p>此时每落一子就是把形同 <code>10</code> 的位置改为 <code>01</code>. 在扫描状态的同时确定就可以确定落子位置.</p><p>接下来就很常规了. 记 $f(S)$ 表示状态 $S$ 最大得分差值. 考虑到转移比较抽象, 于是用记忆化搜索实现, 并记录当前是轮到谁落子, 在转移时对应取 $\max$ / $\min$ 以确保正确性.</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2471</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> A[MAXN][MAXN], B[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1</span> &lt;&lt; (MAXN &lt;&lt; <span class="number">1</span>)];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1</span> &lt;&lt; (MAXN &lt;&lt; <span class="number">1</span>)];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> sta, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[sta]) <span class="keyword">return</span> f[sta];</span><br><span class="line">    <span class="keyword">int</span>&amp; ret = f[sta];</span><br><span class="line">    ret = s? -INF: INF;</span><br><span class="line">    <span class="keyword">int</span> x = n, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + m - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((sta &gt;&gt; i) &amp; <span class="number">1</span>) ++y; <span class="keyword">else</span> --x;</span><br><span class="line">        <span class="keyword">if</span> (((sta &gt;&gt; i) &amp; <span class="number">3</span>) != <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (s) ret = max(ret, dfs(sta ^ (<span class="number">3</span> &lt;&lt; i), s ^ <span class="number">1</span>) + A[x][y]);</span><br><span class="line">        <span class="keyword">else</span> ret = min(ret, dfs(sta ^ (<span class="number">3</span> &lt;&lt; i), s ^ <span class="number">1</span>) - B[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vis[sta] = <span class="literal">true</span>, ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, A[i] + j);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, B[i] + j);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">int</span> ed = (<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>;</span><br><span class="line">    vis[ed] = <span class="literal">true</span>, f[ed] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dfs(((<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>) &lt;&lt; n, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「九省联考-2018」IIIDX"><a href="#「九省联考-2018」IIIDX" class="headerlink" title="「九省联考 2018」IIIDX"></a>「九省联考 2018」IIIDX</h3><h4 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2472" target="_blank" rel="noopener">https://loj.ac/problem/2472</a></li></ul><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>可以发现曲目的解锁顺序构成了一个树形结构, 要求当前节点的权值 $\le$ 其子树内的权值.</p><p>于是有一个朴素的想法, 即后序遍历这棵树, 把权值从大到小依次填进去.</p><p>但是存在相同权值的时候这个贪心会有问题. 为什么?</p><p>考虑一组样例 from <a href="https://www.cnblogs.com/HocRiser/p/8742680.html" target="_blank" rel="noopener">HocRiser</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 2.0</span><br><span class="line">1 1 1 2</span><br></pre></td></tr></table></figure><p>这样在填以 $2$ 为根的子树的时候, 节点 $4$ 的点权为 $2$. 但此时 $4$ 的点权为 $1$, 而把权值 $2$ 丢给 $3$ 可以得到更优的答案…</p><p>接下来考虑如何避免相等权值的影响.</p><p>首先有一个事实, 可能填入权值的节点一定和已经填入权值的节点相邻.</p><p>现在我们维护出节点 $u$ 子树大小 <code>size[u]</code>. 并加入一个 “预约” 操作, 也就是把当前可填但未填的节点 (也就是其父亲都填完了) 的子树大小放入线段树中.</p><p>将权值从小到大排序, 每次填入一个权值, 处理出相同权值所在区间 $[L,\ R]$.</p><p>在该区间内从后往前枚举, 设当前是从前到后第 $k$ 个相等权值, 在线段树上二分一个位置 $u$, 并将当前权值填入 $u$. 同时把 $u$ 的子树大小从线段树中删去, 再把 $u$ 儿子 $v$ 的子树大小加入线段树.</p><p>线段树上二分时, 找到标号从大到小第一个合法节点 $u$, 使其满足线段树上大于 $u$ 标号的子树大小总和 $&gt; k$.</p><p>感性解释一下, 每个节点 $u$ 为其子孙预留了 <code>size[u]</code> 个位置, 填相同权值时需要考虑 “预约” 的影响, 并做出最优的选择. 也就是把靠后的位置, 在合法的情况下填入尽量小的权值. 线段树上二分的过程, 就是在满足限制的同时找到这个 “靠后的位置”.</p><p>时间复杂度 $O(n \log n)$.</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2472</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n; <span class="keyword">double</span> K;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], Ans[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SGT &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc (nd&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc (nd&lt;&lt;1|1)</span></span><br><span class="line">    <span class="keyword">int</span> datSum[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; pos, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        datSum[nd] += val;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= Mid) Mdy(lc, L, Mid, pos, val);</span><br><span class="line">        <span class="keyword">else</span> Mdy(rc, Mid+<span class="number">1</span>, R, pos, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> L;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>, d = datSum[rc];</span><br><span class="line">        <span class="keyword">if</span> (k &gt; d) <span class="keyword">return</span> Qry(lc, L, Mid, k - d);</span><br><span class="line">        <span class="keyword">return</span> Qry(rc, Mid+<span class="number">1</span>, R, k);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> lc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXN];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx, size[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;, head[from] = eidx;</span><br><span class="line">        size[from] += size[to];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// pre done</span></span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) size[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) AddEdge(<span class="built_in">floor</span>(i / K), i);</span><br><span class="line">        <span class="comment">// solve</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[<span class="number">0</span>]; ~i; i = edges[i].nxt)</span><br><span class="line">            v = edges[i].to, SGT::Mdy(<span class="number">1</span>, <span class="number">1</span>, n, v, size[v]);</span><br><span class="line">        sort(A+<span class="number">1</span>, A+<span class="number">1</span>+n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> L = <span class="number">1</span>; L &lt;= n; ++L) &#123;</span><br><span class="line">            <span class="keyword">int</span> R = L;</span><br><span class="line">            <span class="keyword">while</span> (R &lt; n &amp;&amp; A[R+<span class="number">1</span>] == A[L]) ++R;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = R - L + <span class="number">1</span>; j; --j) &#123;</span><br><span class="line">                <span class="keyword">int</span> u = SGT::Qry(<span class="number">1</span>, <span class="number">1</span>, n, j);</span><br><span class="line">                Ans[u] = A[L], SGT::Mdy(<span class="number">1</span>, <span class="number">1</span>, n, u, -size[u]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt)</span><br><span class="line">                    v = edges[i].to, SGT::Mdy(<span class="number">1</span>, <span class="number">1</span>, n, v, size[v]);</span><br><span class="line">            &#125;</span><br><span class="line">            L = R;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// output</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, Ans[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lf"</span>, &amp;n, &amp;K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(A[i]);</span><br><span class="line">    Graph::solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「九省联考-2018」秘密袭击"><a href="#「九省联考-2018」秘密袭击" class="headerlink" title="「九省联考 2018」秘密袭击"></a>「九省联考 2018」秘密袭击</h3><h4 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2473" target="_blank" rel="noopener">https://loj.ac/problem/2473</a></li></ul><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p><del>首先, 有正解 “<a href="https://zhang-rq.github.io/2018/05/04/%E4%B9%9D%E7%9C%81%E8%81%94%E8%80%832018-%E7%A7%98%E5%AF%86%E8%A2%AD%E5%87%BBCoaT/" target="_blank" rel="noopener">线段树合并, 拉格朗日插值, 生成函数, 以及整体 DP</a>“.</del></p><p>考虑到本题时限 5s, 以及正解繁杂常数大, 于是暴力碾标算…</p><p>枚举 Access Globe 所操控士兵潜入的城市 $u$, 考虑潜入 $u$ 的方案数.</p><p>如果节点 $u$ 可以对答案产生贡献, 那么包含 $u$ 的连通块内一定有 $k-1$ 个满足 $d_i &gt; d_u$ 的节点. 把权值小于 $d_u$ 的节点大小标记为 $0$, 把权值大于 $d_u$ 的节点标记为 $1$, 做一个类似于树形背包的 DP 即可.</p><p>那么权值等于 $d_u$ 的呢? 为避免对某个节点重复计算, 在权值相等的时候, 仅考虑编号大于等于 (别忘了自己) $u$ 的节点.</p><p>具体地说, 设 $f(i, j)$ 表示深度最小节点为 $i$, 大小和为 $j$ 的连通块个数.</p><p>枚举每条边 $(u,\ v)$, 设 $g(i)$ 表示选择 $u$ 其余节点, 以及 $v$ 的子树内节点, 大小总和为 $i$ 的连通块个数, 显然转移是一个卷积的形式, 最后把 $g(i)$ 累加到 $f(u, i)$ 上就好了.</p><p>以及一些卡常的方法.</p><ol><li>使用 SDOI 2017 苹果树 同样的技巧, DP 数组 $f$ 开成一维, 减少 cache miss.</li><li>转移数组 $g$ 使用 <code>long long</code>, 减少取模次数.</li><li>考虑到树是一个稀疏图, 于是使用 <code>vector</code> 存图, 相比手写链表访问加快.</li></ol><p><del>然后没了, 难道要把 <code>g</code> 的转移用 MTT 优化?</del></p><p>时间复杂度 $O(nk(n-k))$.</p><p><del>如果有机会, 我一定会去学正解</del></p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2473</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1675</span>, P = <span class="number">64123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, K, W, T, M;</span><br><span class="line">LL g[MAXN];</span><br><span class="line"><span class="keyword">int</span> A[MAXN], V[MAXN], f[MAXN * MAXN], size[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f + u * M, <span class="number">0</span>, T);</span><br><span class="line">    f[u * M + V[u]] = <span class="number">1</span>, size[u] = V[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v: G[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= K &amp;&amp; j &lt;= size[u]; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= K &amp;&amp; k &lt;= size[v]; ++k)</span><br><span class="line">                g[j + k] += <span class="number">1L</span>L * f[u * M + j] * f[v * M + k];</span><br><span class="line">        size[u] += size[v];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= K &amp;&amp; j &lt;= size[u]; ++j)</span><br><span class="line">            f[u * M + j] = (f[u * M + j] + g[j]) % P, g[j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(K), read(W);</span><br><span class="line">    M = K + <span class="number">1</span>, T = M * <span class="keyword">sizeof</span> (<span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(A[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        read(u), read(v), G[u].push_back(v), G[v].push_back(u);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cnt, u = <span class="number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            V[i] = (A[i] &gt; A[u] || (A[i] == A[u] &amp;&amp; i &gt;= u)), cnt += V[i];</span><br><span class="line">        <span class="keyword">if</span> (cnt &lt; K) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(u, <span class="number">0</span>), ans = (ans + A[u] * f[u * M + K] % P) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「九省联考-2018」劈配"><a href="#「九省联考-2018」劈配" class="headerlink" title="「九省联考 2018」劈配"></a>「九省联考 2018」劈配</h3><h4 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2477" target="_blank" rel="noopener">https://loj.ac/problem/2477</a></li></ul><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>容易发现, 题目要求我们做的就是一个二分图匹配. 考虑用网络流解决这个问题.</p><p>对于第一问, 从 $1$ 到 $n$ 依次考虑每个选手 $i$ 的匹配情况.</p><p>如果只有一位选手 $i$, 那么</p><ul><li>新建源汇 $S$, $T$, 其中 $S$ 对选手 $i$ 连边, 容量为 $1$; 每位导师 $j$ 向 $T$ 连边, 容量为 $b_j$.</li><li>枚举选手志愿, $i$ 向该档志愿导师 $j$ 连边, 容量为 $1$.<ul><li>如果此时存在增广路, 那么该选手被该档志愿录取</li><li>否则继续枚举志愿, 直到选手被录取 / 出局</li></ul></li></ul><p>考虑其他选手的影响. 由录取方案的最优性可知, 只有排名比 $i$ 靠前的选手对 $i$ 有影响, 那么每位选手直接在上一位选手的残量网络上建边即可.</p><p>未被枚举到的志愿录取时, 需要及时把此档志愿所建的边回退掉, 以避免多出用不到的废边, 从而影响时间复杂度的正确性…</p><p>对于第二问, 可以发现答案可以二分 — 如果选手到了第 $1$ 名, 还不能达到自己的要求, 那肯定会沮丧了.</p><p>我们二分一个答案 $x$, 表示选手 $i$ 不沮丧时的 <strong>最小排名</strong>. <code>check</code> 的时候前 $x-1$ 名选手的录取情况并不会改变, 再次基础上加入选手 $i$ 的前 $s_i$ 个志愿, 判断新图是否存在增广路即可.</p><p>每次都建一次新图, 并把前 $x-1$ 名选手匹配好有些麻烦, 时间复杂度还很高. 考虑到解决第一问时, 已经把这些匹配求过一遍了, 所以记录选手录取情况的前缀图, 每次 <code>check</code> 调用即可. 因为点数很小, 所以可以保证每次暴力复制的复杂度.</p><p>时间复杂度大概是 $O(\ T(n^2m + n^2 \log n)\ )$?</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><p>由于这道题的特殊性, Dinic 当前弧优化并不适用.</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2477</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">205</span>, MAXV = MAXN &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, C, S, T;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> Ans1[MAXN], Ans2[MAXN], B[MAXN], s[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, flow, cap;</span><br><span class="line">    Edge() &#123; &#125;</span><br><span class="line">    Edge(<span class="keyword">int</span> _v, <span class="keyword">int</span> _c): to(_v), cap(_c) &#123; flow = <span class="number">0</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt; edges;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAXV];</span><br><span class="line">    <span class="keyword">int</span> depth[MAXV], vis[MAXV], Time;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        edges.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m + <span class="number">1</span>; ++i) G[i].clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        edges.push_back(Edge(to, c)), edges.push_back(Edge(from, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">int</span> eidx = edges.size() - <span class="number">1</span>;</span><br><span class="line">        G[from].push_back(eidx - <span class="number">1</span>), G[to].push_back(eidx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DelEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        G[from].pop_back(), G[to].pop_back();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        Q.push(S), vis[S] = ++Time, depth[S] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; G[u].size(); ++i) &#123;</span><br><span class="line">                <span class="keyword">const</span> Edge&amp; e = edges[G[u][i]];</span><br><span class="line">                <span class="keyword">if</span> (vis[e.to] != Time &amp;&amp; e.cap &gt; e.flow)</span><br><span class="line">                    vis[e.to] = Time, depth[e.to] = depth[u] + <span class="number">1</span>, Q.push(e.to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vis[T] == Time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == T || !a) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">int</span> f, flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; G[u].size(); ++i) &#123;</span><br><span class="line">            Edge&amp; e = edges[G[u][i]];</span><br><span class="line">            <span class="keyword">if</span> (depth[e.to] == depth[u] + <span class="number">1</span> &amp;&amp; (f = DFS(e.to, min(a, e.cap-e.flow))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                flow += f, a -= f, e.flow += f, edges[G[u][i]^<span class="number">1</span>].flow -= f;</span><br><span class="line">                <span class="keyword">if</span> (!a) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; G[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> Mid, <span class="keyword">const</span> <span class="keyword">int</span>&amp; u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Graph now;</span><br><span class="line">    now = G[Mid - <span class="number">1</span>], now.AddEdge(S, u, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= s[u]; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> k = <span class="number">0</span>; k &lt; A[u][j].size(); ++k) now.AddEdge(u, n + A[u][j][k], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> now.BFS();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> Ti; read(Ti), read(C);</span><br><span class="line">    <span class="keyword">while</span> (Ti--) &#123;</span><br><span class="line">        read(n), read(m);</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        S = <span class="number">0</span>, T = n + m + <span class="number">1</span>;</span><br><span class="line">        G[<span class="number">0</span>].init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; ++j) A[i][j].clear();</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) read(B[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x, i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) read(x), A[i][x].push_back(j);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(s[i]);</span><br><span class="line">        <span class="comment">// solve</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) G[<span class="number">0</span>].AddEdge(n + i, T, B[i]);</span><br><span class="line">        <span class="comment">// Q1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            Ans1[i] = <span class="number">0</span>;</span><br><span class="line">            G[i] = G[i - <span class="number">1</span>], G[i].AddEdge(S, i, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">size_t</span> k = <span class="number">0</span>; k &lt; A[i][j].size(); ++k) G[i].AddEdge(i, n + A[i][j][k], <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (G[i].BFS()) &#123; G[i].DFS(S, INF), Ans1[i] = j; <span class="keyword">break</span>; &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">size_t</span> k = <span class="number">0</span>; k &lt; A[i][j].size(); ++k) G[i].DelEdge(i, n + A[i][j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!Ans1[i]) Ans1[i] = m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Q2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            Ans2[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[i] &gt;= Ans1[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> L = <span class="number">1</span>, R = i - <span class="number">1</span>, ans = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span> (L &lt;= R) &#123;</span><br><span class="line">                <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (check(Mid, i)) ans = Mid, L = Mid + <span class="number">1</span>; <span class="keyword">else</span> R = Mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Ans2[i] = (ans == <span class="number">-1</span>)? i: i - ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// output</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, Ans1[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, Ans2[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「九省联考-2018」林克卡特树"><a href="#「九省联考-2018」林克卡特树" class="headerlink" title="「九省联考 2018」林克卡特树"></a>「九省联考 2018」林克卡特树</h3><p>人生第一道 DP 凸优化…</p><h4 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2478" target="_blank" rel="noopener">https://loj.ac/problem/2478</a></li></ul><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先对题意做一步转化, 所求即为选择 $K+1$ 条不相交的链, 所得的最大边权和.</p><p>此时有一个朴素的 DP, 设 $f(i, j, k)$ 表示以节点 $i$ 为根的子树内, 选择 $j$ 条链, 且节点 $i$ 度数为 $k \in \{ 0,\ 1,\ 2 \}$ 的最大边权和. (度数为 $0$ 的情况就是单独一个节点被视作一条链了)</p><p>此时枚举儿子大力讨论即可列出转移… 转移相当繁琐 = =</p><p>这个 DP 的时间复杂度为 $O(nk^2)$, 看起来没有什么优化的余地了, 真的是这样吗?</p><p>通过某些神秘手段可以得知, 选择 $K+1$ 条链的最优解是上凸的. 换句话说, 以选择链数 $k$ 为横坐标, 最大边权和为纵坐标, 得到的函数图像是上凸的 (其实图像是个点集… 感性理解). 再者就是导函数单调 / 差分单调了…</p><p>感性理解一下这个上凸, 刚开始选择一些边作为链, 可以把某些对答案贡献较小情况的避开. 当要求选择的链数逐渐增加时, 这个 “避开” 的应用范围就逐渐缩小, 而不得不减小答案来满足限制.</p><p>接着考虑 DP 凸优化.</p><p>我们二分一个权值 $s$, 并限定每新增一条链, 就在把边权和减去 $s$. 此时不限定选择多少条链.</p><p>丢掉对链个数的限制, 容易得到一个 $O(n)$ 的 DP:</p><p>设 $f(i, j)$ 表示以节点 $i$ 为根的子树内, 且节点 $i$ 度数为 $j \in \{ 0,\ 1,\ 2 \}$ 的最大边权和, 以及达到该边权和所用的最少链数.</p><p>首先有初值</p><p>$$f(u, 0) = 0,\ f(u, 1) = 0 $$</p><p>$$f(u, 2) = \max\{ 0, -s \}$$</p><p>记边 $(u, v)$ 边权为 $w(u, v)$, 那么转移为</p><p>$$f(u, 0) = \max\{ f(u, 0),\ f(u, 0) + f(v, 0) \}$$</p><p>$$f(u, 1) = \max\{ f(u, 1),\ f(u, 1) + f(v, 0),\ f(u, 0) + f(v, 1) + w(u, v) \}$$</p><p>$$f(u, 2) = \max\{ f(u, 2),\ f(u, 2) + f(v, 0),\ f(u, 1) + f(v, 1) + w(u, v) - s \}$$</p><p>以及一个节点 DP 完后, 还需要合并答案.</p><p>$$f(u, 0) = \max\{ f(u, 0),\ f(u, 1) - s,\ f(u, 2) \}$$</p><p>这样就能解释通了… 只用度数考虑 <del>会发现解释不通</del></p><p>这一步的 DP 就相当于拿一条斜率为 $s$ 的直线去切这个图像, 并得到凸包上一点 $(k,\ f(1, 0))$. 接着根据 $k$ 和 $K+1$ 的关系来调整斜率, 直到同凸包交点为 $(K+1,\ f(1, 0))$.</p><p>时间复杂度 $O(n \log w)$. 其中 $w$ 为答案上下界之差.</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2478</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Item</span> &#123;</span></span><br><span class="line">    LL a; <span class="keyword">int</span> b;</span><br><span class="line">    Item(LL _a = <span class="number">0</span>, <span class="keyword">int</span> _b = <span class="number">0</span>): a(_a), b(_b) &#123; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Item&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; rhs.a || (a == rhs.a &amp;&amp; b &gt; rhs.b);</span><br><span class="line">    &#125;</span><br><span class="line">    Item <span class="keyword">operator</span> + (<span class="keyword">const</span> Item&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Item(a + rhs.a, b + rhs.b); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, K;</span><br><span class="line">Item f[MAXN][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to, w; &#125; edges[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to, w &#125;, head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">const</span> LL&amp; s)</span> </span>&#123;</span><br><span class="line">        f[u][<span class="number">0</span>] = f[u][<span class="number">1</span>] = Item(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        f[u][<span class="number">2</span>] = max(Item(<span class="number">0</span>, <span class="number">0</span>), Item(-s, <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) == fa) <span class="keyword">continue</span>;</span><br><span class="line">            dfs(v, u, s);</span><br><span class="line">            f[u][<span class="number">2</span>] = max(f[u][<span class="number">2</span>], max(f[u][<span class="number">2</span>] + f[v][<span class="number">0</span>], f[u][<span class="number">1</span>] + f[v][<span class="number">1</span>] + Item(edges[i].w - s, <span class="number">1</span>)));</span><br><span class="line">            f[u][<span class="number">1</span>] = max(f[u][<span class="number">1</span>], max(f[u][<span class="number">1</span>] + f[v][<span class="number">0</span>], f[u][<span class="number">0</span>] + f[v][<span class="number">1</span>] + Item(edges[i].w)));</span><br><span class="line">            f[u][<span class="number">0</span>] = max(f[u][<span class="number">0</span>], f[u][<span class="number">0</span>] + f[v][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此处合并答案</span></span><br><span class="line">        f[u][<span class="number">0</span>] = max(f[u][<span class="number">0</span>], max(f[u][<span class="number">1</span>] + Item(-s, <span class="number">1</span>), f[u][<span class="number">2</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    Graph::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(K), ++K;</span><br><span class="line">    LL L = <span class="number">0</span>, R = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, w, i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        read(u), read(v), read(w);</span><br><span class="line">        L = min(L, <span class="number">-1L</span>L * w), R += max(<span class="number">0</span>, w);</span><br><span class="line">        Graph::AddEdge(u, v, w), Graph::AddEdge(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    LL ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (L &lt;= R) &#123;</span><br><span class="line">        LL Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        Graph::dfs(<span class="number">1</span>, <span class="number">0</span>, Mid);</span><br><span class="line">        <span class="keyword">if</span> (f[<span class="number">1</span>][<span class="number">0</span>].b &lt;= K) ans = Mid, R = Mid - <span class="number">1</span>; <span class="keyword">else</span> L = Mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Graph::dfs(<span class="number">1</span>, <span class="number">0</span>, ans);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[<span class="number">1</span>][<span class="number">0</span>].a + ans * K);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「九省联考-2018」制胡窜"><a href="#「九省联考-2018」制胡窜" class="headerlink" title="「九省联考 2018」制胡窜"></a>「九省联考 2018」制胡窜</h3><h4 id="题目链接-5"><a href="#题目链接-5" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2479" target="_blank" rel="noopener">https://loj.ac/problem/2479</a></li></ul><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p>有着很复杂的分类讨论, 以及相当繁琐的细节…</p><p><del>还是 <a href="http://labelray.top/2019/03/01/%E4%B9%9D%E7%9C%81%E8%81%94%E8%80%83-2018-%E5%88%B6%E8%83%A1%E7%AA%9C/" target="_blank" rel="noopener">Labelray</a> 讲地好哇.</del></p><p>还是拿 Labelray 的题解再展开说一点东西.</p><p>对于 Case 2.1, 我个人认为最终的答案应为</p><p>$$\sum_{i=1}^{n-1} (r_{i+1} - l_n) \cdot (l_{i+1} - l_i)$$</p><p>化简之后可以得到</p><p>$$\sum_{i=1}^{n-1} r_{i+1} (r_{i+1}-r_i) - l_n \cdot \sum_{i=1}^{n-1} (r_{i+1} - r_i) $$</p><p>以及 Case 3, 在满足限制 $l_n &lt; r_{i+1} &lt; r_1 + len - 1$ 时, 直接在线段树上查询区间 $(l_n,\ r_1 + len - 1]$, 则会缺失左边界.</p><p>具体地说, 由于使用右端点 $r_i$ 的差代替左端点 $l_i$ 的差, 在计算时会漏掉 $r_i &lt; l_n &lt; r_{i+1}$ 的情况, 但此时对应左边一刀切在 $(l_i, l_{i+1})$ 的情况仍然合法. 于是在统计中需要加入 $[1,\ l_n]$ 的最大端点, 同线段树查询结果合并即可.</p><p>时间复杂度 $O(n \log n + q \log n)$.</p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2479</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>, MAXM = <span class="number">2e5</span> + <span class="number">5</span>, LOG = <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">C2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * n * (n<span class="number">-1</span>) / <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">char</span> S[MAXN];</span><br><span class="line"><span class="keyword">int</span> rt[MAXM], pos[MAXN], pre[LOG][MAXM];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mx, mn; LL s1, s2;</span><br><span class="line"></span><br><span class="line">    Data() &#123; mx = -MAXN, mn = MAXN, s1 = s2 = <span class="number">0</span>; &#125;</span><br><span class="line">    Data(<span class="keyword">int</span> _mx, <span class="keyword">int</span> _mn, LL _s1, LL _s2): mx(_mx), mn(_mn), s1(_s1), s2(_s2) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    Data <span class="keyword">operator</span> + (<span class="keyword">const</span> Data&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mx == -MAXN &amp;&amp; mn == MAXN) <span class="keyword">return</span> rhs;</span><br><span class="line">        <span class="keyword">if</span> (rhs.mx == -MAXN &amp;&amp; rhs.mn == MAXN) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> Data(rhs.mx, mn, s1 + rhs.s1 + <span class="number">1L</span>L * rhs.mn * (rhs.mn - mx),</span><br><span class="line">                s2 + rhs.s2 + (rhs.mn - mx));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SGT &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> lc, rc; Data d;</span><br><span class="line">        Node() &#123; lc = rc = <span class="number">0</span>; d = Data(); &#125;</span><br><span class="line">    &#125; dat[MAXM &lt;&lt; <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> nidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> nd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> &amp;lc = dat[nd].lc, &amp;rc = dat[nd].rc;</span><br><span class="line">        dat[nd].d = dat[lc].d + dat[rc].d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> <span class="keyword">void</span>( dat[nd].d.mn = dat[nd].d.mx = pos );</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= Mid) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dat[nd].lc) dat[nd].lc = ++nidx;</span><br><span class="line">            Mdy(dat[nd].lc, L, Mid, pos);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dat[nd].rc) dat[nd].rc = ++nidx;</span><br><span class="line">            Mdy(dat[nd].rc, Mid+<span class="number">1</span>, R, pos);</span><br><span class="line">        &#125;</span><br><span class="line">        maintain(nd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Mrg</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line">        <span class="keyword">int</span> nd = ++nidx;</span><br><span class="line">        dat[nd].lc = Mrg(dat[x].lc, dat[y].lc);</span><br><span class="line">        dat[nd].rc = Mrg(dat[x].rc, dat[y].rc);</span><br><span class="line">        <span class="keyword">return</span> maintain(nd), nd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Data <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!nd) <span class="keyword">return</span> Data();</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= L &amp;&amp; R &lt;= opR) <span class="keyword">return</span> dat[nd].d;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (opR &lt;= Mid) <span class="keyword">return</span> Qry(dat[nd].lc, L, Mid, opL, opR);</span><br><span class="line">        <span class="keyword">if</span> (opL &gt; Mid) <span class="keyword">return</span> Qry(dat[nd].rc, Mid+<span class="number">1</span>, R, opL, opR);</span><br><span class="line">        <span class="keyword">return</span> Qry(dat[nd].lc, L, Mid, opL, opR) + Qry(dat[nd].rc, Mid+<span class="number">1</span>, R, opL, opR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> lgt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r1 = dat[nd].d.mn, ln = dat[nd].d.mx - lgt + <span class="number">1</span>;</span><br><span class="line">        Data d = Qry(nd, <span class="number">1</span>, n, <span class="number">1</span>, ln);</span><br><span class="line">        LL ret = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// Case 1</span></span><br><span class="line">        <span class="keyword">if</span> (d.mx - lgt + <span class="number">1</span> &gt;= r1) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// Case 2</span></span><br><span class="line">        <span class="keyword">if</span> (r1 &gt; ln) &#123;</span><br><span class="line">            ret += dat[nd].d.s1 - <span class="number">1L</span>L * ln * dat[nd].d.s2;</span><br><span class="line">            ret += <span class="number">1L</span>L * (r1 - ln) * (n - lgt) + C2(r1 - ln);</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Case 3</span></span><br><span class="line">        <span class="keyword">if</span> (ln &lt; r1 + lgt - <span class="number">1</span>) &#123;</span><br><span class="line">            Data p = Data(d.mx, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) + Qry(nd, <span class="number">1</span>, n, ln + <span class="number">1</span>, r1 + lgt - <span class="number">1</span>);</span><br><span class="line">            ret += p.s1 - <span class="number">1L</span>L * ln * p.s2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ri = Qry(nd, <span class="number">1</span>, n, <span class="number">1</span>, r1 + lgt - <span class="number">1</span>).mx, ri1 = Qry(nd, <span class="number">1</span>, n, r1 + lgt, n).mn;</span><br><span class="line">        <span class="keyword">if</span> (ri != -MAXN &amp;&amp; ri1 != MAXN) ret += max(<span class="number">0L</span>L, <span class="number">1L</span>L * (r1 - (ri-lgt+<span class="number">1</span>)) * (ri1 - ln));</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SAM &#123;</span><br><span class="line">    <span class="keyword">int</span> ch[MAXM][<span class="number">10</span>], len[MAXM], lnk[MAXM], nidx, last;</span><br><span class="line">    <span class="keyword">int</span> cnt[MAXM], idx[MAXM];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; nidx = last = <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nd = ++nidx, p = last;</span><br><span class="line">        len[nd] = len[last] + <span class="number">1</span>, SGT::Mdy(rt[nd] = ++SGT::nidx, <span class="number">1</span>, n, i);</span><br><span class="line">        <span class="keyword">while</span> (p &amp;&amp; !ch[p][val]) ch[p][val] = nd, p = lnk[p];</span><br><span class="line">        <span class="keyword">if</span> (!p) lnk[nd] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> q = ch[p][val];</span><br><span class="line">            <span class="keyword">if</span> (len[q] == len[p] + <span class="number">1</span>) lnk[nd] = q;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> nxt = ++nidx;</span><br><span class="line">                len[nxt] = len[p] + <span class="number">1</span>, lnk[nxt] = lnk[q];</span><br><span class="line">                <span class="built_in">memcpy</span>(ch[nxt], ch[q], <span class="keyword">sizeof</span> ch[nxt]);</span><br><span class="line">                <span class="keyword">while</span> (p &amp;&amp; ch[p][val] == q) ch[p][val] = nxt, p = lnk[p];</span><br><span class="line">                lnk[nd] = lnk[q] = nxt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        last = nd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nidx; ++i) ++cnt[len[i]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cnt[i] += cnt[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nidx; ++i) idx[cnt[len[i]]--] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u, i = nidx; i &gt; <span class="number">1</span>; --i)</span><br><span class="line">            u = idx[i], rt[lnk[u]] = SGT::Mrg(rt[lnk[u]], rt[u]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nidx; ++i) pre[<span class="number">0</span>][i] = lnk[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; LOG; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nidx; ++i)</span><br><span class="line">                pre[j][i] = pre[j<span class="number">-1</span>][pre[j<span class="number">-1</span>][i]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Jump</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">const</span> <span class="keyword">int</span>&amp; lgt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = LOG<span class="number">-1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            <span class="keyword">if</span> (pre[j][u] &amp;&amp; len[pre[j][u]] &gt;= lgt) u = pre[j][u];</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = Jump(pos[R], R - L + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> SGT::Qry(rt[u], R - L + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    SAM::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>, &amp;n, &amp;q, S+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        SAM::insert(S[i] - <span class="string">'0'</span>, i), pos[i] = SAM::last;</span><br><span class="line">    SAM::build();</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> L, R;</span><br><span class="line">        read(L), read(R);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, C2(n - <span class="number">1</span>) - SAM::Qry(L, R));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;高一玩泥巴的时候陪着学长做过… 然而只是暴力的忠实选手.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;结果现在还是暴力的忠实选手.&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://depletedprism.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>AHOI / HNOI 2017 大赏</title>
    <link href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/AHOI-HNOI-2017-sol/"/>
    <id>https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/AHOI-HNOI-2017-sol/</id>
    <published>2020-03-10T12:17:51.000Z</published>
    <updated>2020-04-09T06:10:52.673Z</updated>
    
    <content type="html"><![CDATA[<hr><p>如果说 “我做了一套 AHOI”, 恐怕和 “我做了一套 HNOI” 给人的感觉不太一样…</p><p>但其实是一样的? <del>OI 什么时候能实现地域的平衡啊.</del> 这辈子不可能了.</p><a id="more"></a><p>其实不如 SDOI R2 毒瘤 (</p><h3 id="「AHOI-HNOI2017」单旋"><a href="#「AHOI-HNOI2017」单旋" class="headerlink" title="「AHOI / HNOI2017」单旋"></a>「AHOI / HNOI2017」单旋</h3><blockquote><p>“邪恶的「卡」带着他的邪恶的「常数」来企图毁灭 H 国.”</p></blockquote><p>可以说是很形象了.</p><h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2018" target="_blank" rel="noopener">https://loj.ac/problem/2018</a></li></ul><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>这是一道性质题.</p><p>本题最重要的性质就是, 如果把某个节点 $u$ “spaly” 到根, 那么整棵二叉搜索树的形态不会发生较大改变.</p><p>具体地说, 假设当前要把最小值对应节点 $u$ “spaly” 到根, 实际上只做了这几个操作:</p><ol><li>$u$ 的右儿子接到 $u$ 父亲 $f$ 的左儿子上.</li><li>把 $u$ 设成根, 然后把原来的根接到 $u$ 的右儿子上.</li></ol><p>考虑这个过程中的节点深度变化, 可以发现 $u$ 的深度变为 $1$, $u$ 原来的右儿子深度不变, 其余点的深度 $+1$.</p><p>那么可以用 BIT 维护这个深度了.</p><p>既然关键码互不相同, 那我们直接把关键码离散化后的值视作节点编号, 这样子树内编号一定是连续的. 因为操作的特殊性: 只选择最大值和最小值, 所以直接修改到 1 / n 即可.</p><p>再考虑插入操作怎么实现. </p><p>注意道每次插入一个节点 $u$, $u$ 的父亲 $f$ 一定是 $u$ 的前驱 / 后继中深度较深的一个, 使用 STL 里的 <code>set</code> 直接维护即可.</p><p>时间复杂度 $O(n\log n)$.</p><p><del>感谢这道题让我知道 spaly 多么蠢…</del></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>代码实现中有一些简单的技巧…</p><p>诸如预先在 <code>set</code> 中插入 <code>0</code>, <code>n+1</code> 以避免讨论, 以及利用平衡树旋转时的技巧简化代码.</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2018</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator IT;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nB, m, ans;</span><br><span class="line"><span class="keyword">int</span> Q[MAXN], A[MAXN], B[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BIT &#123;</span><br><span class="line">    <span class="keyword">int</span> C[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i; i -= lowbit(i)) ret += C[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; pos, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt;= nB + <span class="number">1</span>; i += lowbit(i)) C[i] += val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        Mdy(L, val), Mdy(R+<span class="number">1</span>, -val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其实 spaly 的名字只是来哗众取宠的</span></span><br><span class="line"><span class="keyword">namespace</span> Spaly &#123;</span><br><span class="line">    <span class="keyword">int</span> pre[MAXN], ch[<span class="number">2</span>][MAXN], root;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; S.insert(<span class="number">0</span>), S.insert(nB + <span class="number">1</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类似于 splay 中的 connect ?</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spaly</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == root) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> fa = pre[u];</span><br><span class="line">        <span class="keyword">if</span> (w) BIT::Mdy(<span class="number">1</span>, fa, <span class="number">1</span>); <span class="keyword">else</span> BIT::Mdy(fa, nB, <span class="number">1</span>);</span><br><span class="line">        BIT::Mdy(u, u, <span class="number">1</span> - ans);</span><br><span class="line">        ch[w][fa] = ch[w ^ <span class="number">1</span>][u];</span><br><span class="line">        <span class="keyword">if</span> (ch[w][fa]) pre[ch[w][fa]] = fa;</span><br><span class="line">        ch[w ^ <span class="number">1</span>][u] = root, pre[root] = u, pre[root = u] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = lower_bound(B+<span class="number">1</span>, B+<span class="number">1</span>+nB, v) - B;</span><br><span class="line">        <span class="keyword">if</span> (!root) root = u, ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            IT ite = S.lower_bound(u), suf = ite, nxt = --ite;</span><br><span class="line">            <span class="keyword">int</span> fa = BIT::Qry(*nxt) &gt; BIT::Qry(*suf)? *nxt: *suf;</span><br><span class="line">            ans = BIT::Qry(fa) + <span class="number">1</span>, pre[u] = fa, ch[fa == *nxt][fa] = u;</span><br><span class="line">        &#125;</span><br><span class="line">        S.insert(u), BIT::Mdy(u, u, ans - BIT::Qry(u));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Nxt</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = w? *(++S.rbegin()): *(++S.begin());</span><br><span class="line">        <span class="keyword">return</span> ans = BIT::Qry(u), spaly(u, w), u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Rmv</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = Nxt(w);</span><br><span class="line">        S.erase(u), pre[root = ch[w ^ <span class="number">1</span>][u]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (w) BIT::Mdy(<span class="number">1</span>, u, <span class="number">-1</span>); <span class="keyword">else</span> BIT::Mdy(u, nB, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        read(Q[i]);</span><br><span class="line">        <span class="keyword">if</span> (Q[i] == <span class="number">1</span>) read(A[i]), B[++nB] = A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    Spaly::init();</span><br><span class="line">    sort(B+<span class="number">1</span>, B+<span class="number">1</span>+nB);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (Q[i]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: Spaly::insert(A[i]); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: Spaly::Nxt(<span class="number">0</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: Spaly::Nxt(<span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: Spaly::Rmv(<span class="number">0</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: Spaly::Rmv(<span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERR\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「AHOI-HNOI2017」影魔"><a href="#「AHOI-HNOI2017」影魔" class="headerlink" title="「AHOI / HNOI2017」影魔"></a>「AHOI / HNOI2017」影魔</h3><h4 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2019" target="_blank" rel="noopener">https://loj.ac/problem/2019</a></li></ul><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>直接统计不好维护, 于是将操作离线, 枚举每个位置, 依次加入贡献 / 差分统计贡献.</p><p>记 $c = \max \{ k_s \mid i &lt; s &lt; j \}$, 依次讨论什么情况下对答案会有 $p_1$ / $p_2$ 的贡献.</p><ol><li><p>$i + 1 = j$</p><p>此时不存在此 $c$, 对答案有 $p_1$ 的贡献.</p></li><li><p>$c \le \min \{k_i,\ k_j \}$</p><p>此时有 $p_1$ 的贡献. 但是不好直接统计, 于是转化一下, 考虑某个位置 $i$ 对答案有贡献的情况.</p><p>对于每个位置 $i$, 利用单调栈处理出左侧第一个比 $k_i$ 的位置 $L_i$, 以及右侧第一个比 $k_i$ 大的位置 $R_i$. 可以得到</p><ul><li>如果一个询问完全包含 $[L_i,\ R_i]$, 那么对答案有 $p_1$ 的贡献.</li></ul></li><li><p>$\min \{ k_i,\ k_j \} &lt; c &lt; \max \{ k_i,\ k_j \}$</p><p>此处有 $p_2$ 的贡献. 沿用 Case 2 的思路. 可以发现</p><ul><li>如果一个区间包含 $L_i$, 那么 $L_i$ 可以在 $[i+1,\ R_i - 1]$ 对答案有 $p_2$ 的贡献.</li><li>如果一个区间包含 $R_i$, 那么 $R_i$ 可以在 $[L_i + 1,\ i-1]$ 对答案有 $p_2$ 的贡献.</li></ul></li></ol><p>这样就做完了. 实际代码实现并不复杂…</p><p>考虑到拆成扫描线之后修改 / 查询的操作总和达到了 $10^6$ 的级别…</p><p>于是使用 BIT 实现区间加 / 区间求和, 时间复杂度 $O(n \log n)$.</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2019</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">5</span>, MAXM = <span class="number">5</span> * MAXN;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ask</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> type, x, L, R, val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Ask&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; rhs.x || (x == rhs.x &amp;&amp; type &lt; rhs.type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, qidx;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], p1, p2;</span><br><span class="line"><span class="keyword">int</span> Lpos[MAXN], Rpos[MAXN], stk[MAXN], top;</span><br><span class="line">LL Ans[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BIT &#123;</span><br><span class="line">    LL C1[MAXN], C2[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; pos, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt;= n; i += lowbit(i)) C1[i] += val, C2[i] += <span class="number">1L</span>L * val * pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123; Mdy(L, val), Mdy(R+<span class="number">1</span>, -val); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; pos)</span> </span>&#123;</span><br><span class="line">        LL ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i; i -= lowbit(i)) ret += C1[i] * (pos + <span class="number">1</span>) - C2[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R)</span> </span>&#123; <span class="keyword">return</span> Qry(R) - Qry(L<span class="number">-1</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m), read(p1), read(p2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(A[i]);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    stk[top = <span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (top &amp;&amp; A[stk[top]] &lt; A[i]) Rpos[stk[top--]] = i;</span><br><span class="line">        Lpos[i] = stk[top], stk[++top] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (top) Rpos[stk[top--]] = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n)</span><br><span class="line">            Q[++qidx] = (Ask)&#123; <span class="number">0</span>, i + <span class="number">1</span>, i, i, p1 &#125;;</span><br><span class="line">        <span class="keyword">if</span> (Lpos[i] &gt;= <span class="number">1</span> &amp;&amp; Rpos[i] &lt;= n)</span><br><span class="line">            Q[++qidx] = (Ask)&#123; <span class="number">0</span>, Rpos[i], Lpos[i], Lpos[i], p1 &#125;;</span><br><span class="line">        <span class="keyword">if</span> (Lpos[i] &gt;= <span class="number">1</span> &amp;&amp; i + <span class="number">1</span> &lt;= Rpos[i] - <span class="number">1</span>)</span><br><span class="line">            Q[++qidx] = (Ask)&#123; <span class="number">0</span>, Lpos[i], i + <span class="number">1</span>, Rpos[i] - <span class="number">1</span>, p2 &#125;;</span><br><span class="line">        <span class="keyword">if</span> (Rpos[i] &lt;= n + <span class="number">1</span> &amp;&amp; Lpos[i] + <span class="number">1</span> &lt;= i - <span class="number">1</span>)</span><br><span class="line">            Q[++qidx] = (Ask)&#123; <span class="number">0</span>, Rpos[i], Lpos[i] + <span class="number">1</span>, i - <span class="number">1</span>, p2 &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> L, R, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        read(L), read(R);</span><br><span class="line">        Q[++qidx] = (Ask)&#123; i, L<span class="number">-1</span>, L, R, <span class="number">-1</span> &#125;;</span><br><span class="line">        Q[++qidx] = (Ask)&#123; i, R, L, R, <span class="number">1</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(Q+<span class="number">1</span>, Q+<span class="number">1</span>+qidx);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= qidx; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Q[i].type == <span class="number">0</span>) BIT::Mdy(Q[i].L, Q[i].R, Q[i].val);</span><br><span class="line">        <span class="keyword">else</span> Ans[Q[i].type] += Q[i].val * BIT::Qry(Q[i].L, Q[i].R);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「AHOI-HNOI2017」礼物"><a href="#「AHOI-HNOI2017」礼物" class="headerlink" title="「AHOI / HNOI2017」礼物"></a>「AHOI / HNOI2017」礼物</h3><p>当年入门多项式的时候写的题…</p><h4 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2020" target="_blank" rel="noopener">https://loj.ac/problem/2020</a></li></ul><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先旋转的操作可以看作是在枚举一个起始点 $k$, 超出部分复制一遍 $x_i$ 接到 $x_n$ 后面即可. 把差异值形式地写下来就是</p><p>$$\min_{c, k} \{ \sum_{i=1}^n (x_{i+k} - y_i + c) ^ 2 \}$$</p><p>展开, 得</p><p>$$\sum_{i=1}^n (x_i^2 + y_i^2) + 2c \cdot \sum_{i=1}^n (x_i - y_i) + n c^2 - 2 \sum_{i=1}^n x_{i+k} y_i$$</p><p>除了最后面的和式, 其余部分直接统计 / 二次函数极值就可以解决.</p><p>考虑构造一个序列 $t_i = x_{n-i+1}$, 那么</p><p>$$\sum_{i=1}^n x_{i+k} y_i = \sum_{i=1}^n t_{n-i+1+k} y_i$$</p><p>这就是一个卷积的形式了, 使用 FFT / NTT 优化这一过程即可.</p><p>时间复杂度 $O(n \log n)$.</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2020</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>, G = <span class="number">3</span>, iG = <span class="number">332748118</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * base % P;</span><br><span class="line">        base = <span class="number">1L</span>L * base * base % P, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">    <span class="keyword">int</span> r[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; Lim, <span class="keyword">const</span> <span class="keyword">int</span>&amp; L)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Lim; ++i) r[i] = (r[i&gt;&gt;<span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (L<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span>* f, <span class="keyword">const</span> <span class="keyword">int</span>&amp; Lim, <span class="keyword">const</span> <span class="keyword">int</span>&amp; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Lim; ++i) <span class="keyword">if</span> (i &lt; r[i]) swap(f[i], f[r[i]]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> Mid = <span class="number">1</span>; Mid &lt; Lim; Mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> unit = fpow(type &gt; <span class="number">0</span>? G: iG, (P - <span class="number">1</span>) / (Mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; i += Mid &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> w = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Mid; ++j, w = <span class="number">1L</span>L * w * unit % P) &#123;</span><br><span class="line">                    <span class="keyword">int</span> f0 = f[i+j], f1 = <span class="number">1L</span>L * w * f[i+j+Mid] % P;</span><br><span class="line">                    f[i+j] = (f0 + f1) % P, f[i+j+Mid] = (f0 - f1 + P) % P;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> inv = fpow(Lim, P<span class="number">-2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) f[i] = <span class="number">1L</span>L * f[i] * inv % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, ans;</span><br><span class="line"><span class="keyword">int</span> a[MAXN], b[MAXN], t[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(b[i]);</span><br><span class="line">    <span class="comment">// calc c</span></span><br><span class="line">    <span class="keyword">int</span> B = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ans += a[i] * a[i] + b[i] * b[i], B += a[i] - b[i];</span><br><span class="line">    <span class="keyword">int</span> c1 = <span class="built_in">floor</span>(<span class="number">-1.0</span> * B / n), c2 = <span class="built_in">ceil</span>(<span class="number">-1.0</span> * B / n);</span><br><span class="line">    ans += min(n * c1 * c1 + <span class="number">2</span> * B * c1, n * c2 * c2 + <span class="number">2</span> * B * c2);</span><br><span class="line">    <span class="comment">// polynomial</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) t[n + i] = t[i] = a[n - i + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> Lim = <span class="number">1</span>, L = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (Lim &lt;= <span class="number">2</span>*n + n) Lim &lt;&lt;= <span class="number">1</span>, ++L;</span><br><span class="line">    Poly::init(Lim, L), Poly::NTT(t, Lim, <span class="number">1</span>), Poly::NTT(b, Lim, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) t[i] = <span class="number">1L</span>L * t[i] * b[i] % P;</span><br><span class="line">    Poly::NTT(t, Lim, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> p2 = -P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; ++i) p2 = max(p2, <span class="number">2</span> * t[i]);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans - p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「AHOI-HNOI2017」大佬"><a href="#「AHOI-HNOI2017」大佬" class="headerlink" title="「AHOI / HNOI2017」大佬"></a>「AHOI / HNOI2017」大佬</h3><p>很真实的题面.</p><h4 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2021" target="_blank" rel="noopener">https://loj.ac/problem/2021</a></li></ul><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先有一个朴素的 DP, 把能丢到状态的都丢进去…</p><p>考虑到打倒大佬可以分为两部分, 也就是保证自己存活, 以及摧毁大佬自信.</p><p>注意到 “保证存活” 这一限制和每天采用什么策略有关, 而 “摧毁自信” 只和总天数有关.</p><p>于是可以 DP 出保证存活的条件下最大斗争天数.</p><p>设 $f(i, j)$ 表示第 $i$ 天, 自信值为 $j$ 时用于打倒大佬的最大天数. 则有转移</p><p>$$f(i, j - a_i) = \max \{\ f(i-1, j) + 1\ \}$$</p><p>表示这天选择同大佬斗争.</p><p>$$f(i, j - a_i + w_i) = \max \{\ f(i-1, j)\ \}$$</p><p>表示这天去做水题 <del>续命</del>…</p><p>在得到最大斗争天数 $md$ 后, 直接 BFS 计算这些天内能积累的的讽刺能力 $F$, 以及所用天数 $D$.</p><p>那么对于一个自信值为 $C$ 的大佬, 依次枚举 “怼大佬” 的次数, 即 0, 1, 2, 并判定即可.</p><p>对于使用两次 “怼大佬” 操作的情况, 利用 Two-Pointer 的技巧配合 $F$ 的单调性枚举即可.</p><p>具体地说, 当前合法的两次操作 $i,\ j$ 满足 $F_i + F_j \le C$, 且 $C - F_i - F_j + D_i + D_j \le md$.</p><p>(换言之, 不能直接把大佬自信值嘲讽到负, 且剩余部分可以还嘴解决)</p><p>这种带搜索的题目, 时间复杂度不想分析了, $O(\texttt{能过})$.</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2021</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">105</span>, MAXM = <span class="number">1e6</span> + <span class="number">5</span>, MAXC = <span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, mc, md;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], W[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> F[MAXM], D[MAXM], nF;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; M;</span><br><span class="line"><span class="built_in">map</span>&lt;Pii, <span class="keyword">bool</span>&gt; vis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> QF[MAXM], QL[MAXM], Qd[MAXM];</span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">1</span>, tail = <span class="number">0</span>;</span><br><span class="line">    QF[++tail] = <span class="number">1</span>, QL[tail] = <span class="number">0</span>, Qd[tail] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (head &lt;= tail) &#123;</span><br><span class="line">        <span class="keyword">int</span> fe = QF[head], l = QL[head], d = Qd[head]; ++head;</span><br><span class="line">        <span class="keyword">if</span> (!M.count(fe)) M[fe] = d;</span><br><span class="line">        <span class="keyword">if</span> (d &gt;= md || <span class="number">1L</span>L * fe * l &gt; MAXC) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!vis[Pii(l+<span class="number">1</span>, fe)]) &#123;</span><br><span class="line">            QF[++tail] = fe, QL[tail] = l + <span class="number">1</span>, Qd[tail] = d + <span class="number">1</span>;</span><br><span class="line">            vis[Pii(l+<span class="number">1</span>, fe)] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> &lt; l &amp;&amp; <span class="number">1L</span>L * fe * l &lt;= MAXC &amp;&amp; !vis[Pii(l, fe * l)]) &#123;</span><br><span class="line">            QF[++tail] = fe * l, QL[tail] = l, Qd[tail] = d + <span class="number">1</span>;</span><br><span class="line">            vis[Pii(l, fe * l)] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m), read(mc);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(A[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(W[i]);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = A[i]; j &lt;= mc; ++j) &#123;</span><br><span class="line">            f[i][j - A[i]] = max(f[i][j - A[i]], f[i<span class="number">-1</span>][j] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> p = min(mc, j - A[i] + W[i]);</span><br><span class="line">            f[i][p] = max(f[i][p], f[i<span class="number">-1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= mc; ++j) md = max(md, f[i][j]);</span><br><span class="line">    BFS();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> ite = M.begin(); ite != M.end(); ++ite)</span><br><span class="line">        F[++nF] = ite-&gt;first, D[nF] = ite-&gt;second;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> C, ans;</span><br><span class="line">        read(C), ans = C &lt;= md;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nF &amp;&amp; !ans; ++i)</span><br><span class="line">            ans |= F[i] &lt;= C &amp;&amp; D[i] + C - F[i] &lt;= md;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, i = nF; i &amp;&amp; !ans; --i)</span><br><span class="line">            <span class="keyword">while</span> (!ans &amp;&amp; j &lt;= nF &amp;&amp; F[i] + F[j] &lt;= C)</span><br><span class="line">                ans |= D[i] + D[j] + C - F[i] - F[j] &lt;= md, ++j;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「AHOI-HNOI2017」队长快跑"><a href="#「AHOI-HNOI2017」队长快跑" class="headerlink" title="「AHOI / HNOI2017」队长快跑"></a>「AHOI / HNOI2017」队长快跑</h3><p>这是一道 <del>计算几何</del> <code>nan</code> 题, 至少当年是这样.</p><h4 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2022" target="_blank" rel="noopener">https://loj.ac/problem/2022</a></li></ul><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>似乎这道题 6-10 的数据是错的, 嘿嘿.</p><p>于是去学习了某一种广为流传的做法, 希望做法不假.</p><p>首先有一步转化, 每一个机关, 都可以根据其对起点 $S$ 到终点 $T$ 的影响, 看作倾角为 $\frac{\pi}{2}$ 或 $\frac{\pi}{2}$ 的两条射线.</p><p><del>感觉不画图是不会明白的, 那么祭上 <a href="https://www.luogu.com.cn/blog/xuanmenghuolong/solution-p3725" target="_blank" rel="noopener">lb2003 的题解</a> 吧</del></p><p>此时的情况就比较少了, 利用两个单调队列, 维护一条合法路径即可. 由维护路径的过程可以得知, 此时得到的答案一定是最优的.</p><p>时间复杂度 $O(n)$.</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><p>能用整数的地方就用整数来提高精度…</p><p>再利用单调队列的时候, 使用了一些技巧来简化代码.</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2022</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Geo &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> INFD = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Vector</span> &#123;</span></span><br><span class="line">        LL x, y;</span><br><span class="line">        Vector(LL _x = <span class="number">0</span>, LL _y = <span class="number">0</span>): x(_x), y(_y) &#123; &#125;</span><br><span class="line">        Vector <span class="keyword">operator</span> + (<span class="keyword">const</span> Vector&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Vector(x + rhs.x, y + rhs.y); &#125;</span><br><span class="line">        Vector <span class="keyword">operator</span> - (<span class="keyword">const</span> Vector&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Vector(x - rhs.x, y - rhs.y); &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">typedef</span> Vector Point;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">Dot</span><span class="params">(<span class="keyword">const</span> Vector&amp; A, <span class="keyword">const</span> Vector&amp; B)</span> </span>&#123; <span class="keyword">return</span> A.x * B.x + A.y * B.y; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">Cross</span><span class="params">(<span class="keyword">const</span> Vector&amp; A, <span class="keyword">const</span> Vector&amp; B)</span> </span>&#123; <span class="keyword">return</span> A.x * B.y - A.y * B.x; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">Length</span><span class="params">(<span class="keyword">const</span> Vector&amp; A)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>(Dot(A, A)); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">angle</span><span class="params">(<span class="keyword">const</span> Vector&amp; v)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">atan2</span>(v.y, v.x); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Geo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Point&amp; p)</span> </span>&#123; <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;p.x, &amp;p.y); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, nA;</span><br><span class="line"><span class="keyword">double</span> theta[MAXN];</span><br><span class="line">Point A[MAXN], P[MAXN], S, T;</span><br><span class="line"><span class="keyword">int</span> Q[<span class="number">2</span>][MAXN], head[<span class="number">2</span>], tail[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> pre[MAXN], idx[MAXN], t[MAXN], type[MAXN]; <span class="comment">// 0: up, 1: down</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> P[x].x &lt; P[y].x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n), read(T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        read(P[i]), <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, theta + i);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    S = Point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">double</span> angl = angle(S - P[i]), angr = angle(T - P[i]);</span><br><span class="line">        <span class="comment">// 注意处理 angl &gt; angr 的情况</span></span><br><span class="line">        <span class="keyword">if</span> (angl &gt; angr) type[i] = !(angr &lt; theta[i] &amp;&amp; theta[i] &lt; angl);</span><br><span class="line">        <span class="keyword">else</span> type[i] = angl &lt; theta[i] &amp;&amp; theta[i] &lt; angr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) idx[i] = i;</span><br><span class="line">    sort(idx+<span class="number">1</span>, idx+<span class="number">1</span>+n, cmp);</span><br><span class="line">    A[++nA] = S;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; P[idx[i]].x &lt; T.x; ++i)</span><br><span class="line">        <span class="keyword">if</span> (S.x &lt; P[idx[i]].x) A[++nA] = P[idx[i]], t[nA] = type[idx[i]];</span><br><span class="line">    A[++nA] = T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; <span class="number">2</span>; ++d) Q[d][head[d] = tail[d] = <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nA; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> d = t[i], sign = (d &gt; <span class="number">0</span>? <span class="number">1</span>: <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">int</span> &amp;head0 = head[d], &amp;tail0 = tail[d], *Q0 = Q[d];</span><br><span class="line">        <span class="keyword">int</span> &amp;head1 = head[d^<span class="number">1</span>], &amp;tail1 = tail[d^<span class="number">1</span>], *Q1 = Q[d^<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (head1 &lt; tail1 &amp;&amp; Cross(A[i] - A[Q1[head1]], A[Q1[head1+<span class="number">1</span>]] - A[Q1[head1]]) * sign &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (head1 &lt; tail1 &amp;&amp;</span><br><span class="line">                    Cross(A[i] - A[Q1[head1]], A[Q1[head1+<span class="number">1</span>]] - A[Q1[head1]]) * sign &lt;= <span class="number">0</span>) ++head1;</span><br><span class="line">            pre[i] = Q1[head1];</span><br><span class="line">            head0 = ++tail0, Q0[tail0] = Q1[head1];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (head0 &lt; tail0 &amp;&amp;</span><br><span class="line">                    Cross(A[i] - A[Q0[tail0<span class="number">-1</span>]], A[Q0[tail0]] - A[Q0[tail0<span class="number">-1</span>]]) * sign &lt;= <span class="number">0</span>) --tail0;</span><br><span class="line">            pre[i] = Q0[tail0];</span><br><span class="line">        &#125;</span><br><span class="line">        Q0[++tail0] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nA; i != <span class="number">1</span>; i = pre[i]) ans += Length(A[i] - A[pre[i]]), assert(i != <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「AHOI-HNOI2017」抛硬币"><a href="#「AHOI-HNOI2017」抛硬币" class="headerlink" title="「AHOI / HNOI2017」抛硬币"></a>「AHOI / HNOI2017」抛硬币</h3><h4 id="题目链接-5"><a href="#题目链接-5" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2023" target="_blank" rel="noopener">https://loj.ac/problem/2023</a></li></ul><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p>这是一道组合数学题. 分 $a = b$ 和 $a &gt; b$ 两种情况讨论.</p><ul><li><p>$a = b$</p><p>先考虑所有情况数, 即 $2 ^ {a + b}$.</p><p>如果把硬币全部翻转, 最后输赢的结果却不一定翻转. 所以此时要统计 $A$ 获胜的情况, 需要减去翻转前后 $A$ 都输给 $B$, 也就是平局的方案数. 那么答案为</p><p>$$\frac{1}{2}\ (\ 2 ^ {a + b} - \sum_{i=1}^a \binom{a}{i} \binom{b}{i})$$ </p><p>考虑右侧和式的组合意义, 即两次在 $a$ 个物品中选出 $i$ 个. 等价于一次选出 $i$ 个, 另一次选出 $a-i$ 个. 也就是在 $2a$ 个物品中选出 $a$ 个. 即</p><p>$$\frac{1}{2}\ (\ 2 ^ {a + b} - \sum_{i=1}^a \binom{a}{i} \binom{a}{a-i}) = \frac{1}{2}\ (\ 2 ^ {a + b} - \binom{2a}{a})$$</p><p>式子中有个 / $2$, 但 $2$ 在这些个模数下不存在逆元, 于是可以认为模数为 $2 \times 10^k$, 最后直接将结果 / $2$ 即可.</p><p>但是这样有些… 考虑 <a href="https://zh.wikipedia.org/wiki/%E5%B8%95%E6%96%AF%E5%8D%A1%E6%B3%95%E5%89%87" target="_blank" rel="noopener">帕斯卡法则</a>, 有</p><p>$$\binom{2a}{a} = \binom{2a-1}{a-1} + \binom{2a-1}{a}$$</p><p>而 $\binom{2a-1}{a-1} = \binom{2a-1}{a}$, 所以答案为</p><p>$$2 ^ {a + b - 1} + \binom{2a - 1}{a - 1}$$</p><p>从而避开了 / $2$ 的操作.</p></li><li><p>$a &gt; b$</p><p>还是从翻转硬币的角度入手, 这次要考虑翻转前后 $A$ 都获胜的情况. 那么答案为</p><p>$$\frac{1}{2}\ (\ 2 ^ {a + b} + \sum_{i=0}^b \sum_{j=1}^{a-b-1} \binom{b}{i} \binom{a}{i + j})$$</p><p>改变枚举顺序, 得</p><p>$$\frac{1}{2}\ (\ 2 ^ {a + b} + \sum_{i=1}^{a-b-1}\sum_{j=0}^b \binom{b}{b-j}\binom{a}{i+j} ) = \frac{1}{2}\ (\ 2 ^ {a + b} + \sum_{i=1}^{a-b-1} \binom{a+b}{b+i} )$$</p><p>稍微整理一下, 得</p><p>$$\frac{1}{2}\ (\ 2 ^ {a + b} + \sum_{i=1+b}^{a-1} \binom{a+b}{i} )$$</p><p>利用上一情况的处理方法处理掉 / $2$ 即可. (如果把和式处理掉, 那就是后文的优化 3 了)</p></li></ul><p>推出来式子之后直接抄了一份鲁棒性良好的拓展卢卡斯的板子上去, 喜获第一个点跑 10s 的好成绩.</p><p>接下来的问题在于如何卡常…</p><ol><li><p>考虑到模数一定形如 $10^k$, 也就是质因数仅包含 $2$ 和 $5$.</p><p>那么枚举质因数的过程可以省略, 中国剩余定理的过程也可以简化不少.</p></li><li><p>在能用 <code>int</code> 的情况下, 避免使用 <code>long long</code>.</p><p>在现代评测机下效果并不显著…</p></li><li><p>考虑到组合数具有对称性, 计算组合数只需要算一半即可, 常数减半.</p><p>具体实现的时候, 需要讨论 $a + b$ 奇偶性来避免少加一项的麻烦.</p></li><li><p>预处理一个 “伪阶乘”, 即在阶乘中除去 $2$ / $5$ 的倍数, 用于优化拓展 Lucas 计算.</p><p>此处优化最为明显.</p></li></ol><p>还有一个小地方就是 $2^9 = 512$, 远小于 $5^9 = 1953125$, 开在一起对缓存不友好…</p><p>不过可以简化代码 doge</p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2023</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXL = <span class="number">25</span>, MAXN = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>&amp; x, <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> exgcd(b, a % b, y, x), y -= a / b * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; n, <span class="keyword">const</span> <span class="keyword">int</span>&amp; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">return</span> exgcd(n % m, m, x, y), (x % m + m) % m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(LL base, LL b, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = ret * base % m;</span><br><span class="line">        base = base * base % m, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> Ctl[MAXL];</span><br><span class="line"><span class="keyword">int</span> M[MAXL], pow2[MAXL], pow5[MAXL], fac[<span class="number">2</span>][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(LL n, <span class="keyword">int</span> d, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// "伪阶乘" 使用</span></span><br><span class="line">    <span class="keyword">int</span> s = fpow(fac[d == <span class="number">5</span>][p - <span class="number">1</span>], n / p, p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1L</span>L * s * fac[d == <span class="number">5</span>][n % p] % p * calc(n / d, d, p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MultiLucas</span><span class="params">(LL n, LL m, <span class="keyword">int</span> d, <span class="keyword">int</span> p, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (LL i = n; i; i /= d) c += i / d;</span><br><span class="line">    <span class="keyword">for</span> (LL i = m; i; i /= d) c -= i / d;</span><br><span class="line">    <span class="keyword">for</span> (LL i = n-m; i; i /= d) c -= i / d;</span><br><span class="line">    <span class="comment">// 这里也是优化</span></span><br><span class="line">    <span class="keyword">if</span> (c &gt;= k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1L</span>L * fpow(d, c, p) * calc(n, d, p) % p *</span><br><span class="line">        inv(calc(m, d, p), p) % p * inv(calc(n-m, d, p), p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ExLucas</span><span class="params">(LL n, LL m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> &amp;fact1 = pow2[k], &amp;fact2 = pow5[k];</span><br><span class="line">    <span class="keyword">int</span> a1 = MultiLucas(n, m, <span class="number">2</span>, fact1, k), a2 = MultiLucas(n, m, <span class="number">5</span>, fact2, k);</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1L</span>L * inv(fact2, fact1) * fact2 % M[k] * a1 % M[k];</span><br><span class="line">    ret = (ret + <span class="number">1L</span>L * inv(fact1, fact2) * fact1 % M[k] * a2 % M[k]) % M[k];</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    fac[<span class="number">0</span>][<span class="number">0</span>] = fac[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">512</span>; ++i) <span class="comment">// 2 ^ 9</span></span><br><span class="line">        fac[<span class="number">0</span>][i] = (i % <span class="number">2</span> == <span class="number">0</span>)? fac[<span class="number">0</span>][i<span class="number">-1</span>]: <span class="number">1L</span>L * i * fac[<span class="number">0</span>][i<span class="number">-1</span>] % <span class="number">512</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1953125</span>; ++i) <span class="comment">// 5 ^ 9</span></span><br><span class="line">        fac[<span class="number">1</span>][i] = (i % <span class="number">5</span> == <span class="number">0</span>)? fac[<span class="number">1</span>][i<span class="number">-1</span>]: <span class="number">1L</span>L * i * fac[<span class="number">1</span>][i<span class="number">-1</span>] % <span class="number">1953125</span>;</span><br><span class="line">    pow2[<span class="number">0</span>] = pow5[<span class="number">0</span>] = M[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">        M[i] = M[i<span class="number">-1</span>] * <span class="number">10</span>, pow2[i] = pow2[i<span class="number">-1</span>] * <span class="number">2</span>, pow5[i] = pow5[i<span class="number">-1</span>] * <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    LL a, b; <span class="keyword">int</span> K;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lld%lld%d"</span>, &amp;a, &amp;b, &amp;K) != EOF) &#123;</span><br><span class="line">        <span class="comment">// solve</span></span><br><span class="line">        <span class="keyword">int</span> Mod = M[K], ans = fpow(<span class="number">2</span>, a + b - <span class="number">1</span>, Mod);</span><br><span class="line">        <span class="keyword">if</span> (a == b) ans = (ans - ExLucas(a + a - <span class="number">1</span>, a - <span class="number">1</span>, K) + Mod) % Mod;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (LL i = (a + b) / <span class="number">2</span> + <span class="number">1</span>; i &lt; a; ++i)</span><br><span class="line">                ans = (ans + ExLucas(a + b, i, K)) % Mod;</span><br><span class="line">            <span class="keyword">if</span> ((a + b) % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                ans = (ans + ExLucas(a + b - <span class="number">1</span>, (a + b) / <span class="number">2</span>, K)) % Mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// output</span></span><br><span class="line">        <span class="built_in">sprintf</span>(Ctl, <span class="string">"%%0%dd\n"</span>, K), <span class="built_in">printf</span>(Ctl, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;如果说 “我做了一套 AHOI”, 恐怕和 “我做了一套 HNOI” 给人的感觉不太一样…&lt;/p&gt;
&lt;p&gt;但其实是一样的? &lt;del&gt;OI 什么时候能实现地域的平衡啊.&lt;/del&gt; 这辈子不可能了.&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://depletedprism.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>SDOI 2017 Round 2 大赏</title>
    <link href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/SDOI-2017-R2-sol/"/>
    <id>https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/SDOI-2017-R2-sol/</id>
    <published>2020-03-08T13:24:57.000Z</published>
    <updated>2020-04-09T06:10:52.677Z</updated>
    
    <content type="html"><![CDATA[<hr><div style="text-align:center;"><img src="/images/SDOI-2017-sol/SDOI.jpg"> </div><p><em><p style="text-align:center;">图源 <a href="https://www.cnblogs.com/zzqsblog/p/7523003.html" target="_blank" rel="noopener">ZZQ’s Blog</a>, 至少我是从那里找到的</p></em></p><p>这 Round 2 也太毒瘤了 = =</p><a id="more"></a><p>久 等 了.</p><h3 id="「SDOI2017」龙与地下城"><a href="#「SDOI2017」龙与地下城" class="headerlink" title="「SDOI2017」龙与地下城"></a>「SDOI2017」龙与地下城</h3><p>验题人在多测的情况下总算是写了十行代码?</p><h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2267" target="_blank" rel="noopener">https://loj.ac/problem/2267</a></li></ul><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先有一个多项式做法.</p><p>构造一个生成函数 $g(x)$, 其 $k$ 次项系数表示掷一次骰子造成伤害 $k$ 的概率, 则</p><p>$$g(x) = \sum_{k=0}^{X-1} \frac{1}{X} x^k$$</p><p>那么 $g(x)^Y$ 的 $A_i$ 到 $B_i$ 次项和即为答案.</p><p>对于这个多项式幂函数的计算, 可以用带大常数的 $O(n \log n)$ 多项式 $\exp$ , 或者朴素快速幂 $O(n \log ^2 n)$.</p><p>但是有精巧的做法, 此处直接把点值做 $Y$ 次幂就好了.</p><p>当年考场 AC 似乎有更为精巧的优化方法, 好像 myy 的论文 &lt;再探快速傅里叶变换&gt; 里有涉及, <del>以后再说以后再说</del></p><p>对于大数据 <del>如果问什么是大数据, 那就是 FFT 跑不过的数据</del>, 则要用到 <a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%BF%83%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86#%E6%9E%97%E5%BE%B7%E4%BC%AF%E6%A0%BC%EF%BC%8D%E5%88%97%E7%BB%B4%E5%AE%9A%E7%90%86" target="_blank" rel="noopener">中心极限定理</a>.</p><p>记 $\zeta_{n} = \dfrac{\bar X - \mu}{\sigma / \sqrt n} = \dfrac{\sum\limits_{i=1}^n X_i - n \mu}{\sqrt {n \sigma ^2 }}$, 根据中心极限定理, 当 $n \rightarrow \infty$ 时, 认为其满足正态分布 $N(0, 1)$.</p><p>而正态分布 $N(\mu, \sigma^2)$ 的概率密度函数为</p><p>$$f(x) = \frac{1}{\sqrt{ 2 \sigma^2 \pi }} e ^{ -\frac {(x-\mu)^2}{2 \sigma ^2} }$$</p><p>对于 $N(0, 1)$, 带进去可得</p><p>$$f(x) = \frac{1}{\sqrt{ 2 \pi}} e ^{ -\frac{x^2}{2} }$$</p><p>具体应用到这道题中, 用自适应 Simpson 计算</p><p>$$\int _a^b f(x)\ dx$$</p><p>就好了, 其中 $a = \dfrac{A_i - Y \mu}{\sqrt{ Y \sigma ^2 }},\ b = \dfrac{B_i - Y\mu}{\sqrt{ Y \sigma ^ 2}}$.</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>就这样吧 = =, 只能流下没有数理基础的眼泪.</p><p>至今不知道为什么直接大力 Simpson $[L, R]$ 会挂, 取端点做差就对了 = =</p><p>可能是因为 $L$ 正负性的问题?</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2267</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">262145</span> &lt;&lt; <span class="number">1</span>, MAXM = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Complex(<span class="keyword">double</span> _x = <span class="number">0.0</span>, <span class="keyword">double</span> _y = <span class="number">0.0</span>): x(_x), y(_y) &#123; &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> + (<span class="keyword">const</span> Complex&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Complex(x + rhs.x, y + rhs.y); &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> - (<span class="keyword">const</span> Complex&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Complex(x - rhs.x, y - rhs.y); &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Complex(x * rhs.x - y * rhs.y, x * rhs.y + y * rhs.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Complex <span class="title">fpow</span><span class="params">(Complex base, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">ret</span><span class="params">(<span class="number">1.0</span>, <span class="number">0.0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = ret * base;</span><br><span class="line">        base = base * base, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">    <span class="keyword">int</span> r[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; Lim, <span class="keyword">const</span> <span class="keyword">int</span>&amp; L)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Lim; ++i) r[i] = (r[i&gt;&gt;<span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (L<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(Complex* f, <span class="keyword">int</span> Lim, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Lim; ++i) <span class="keyword">if</span> (i &lt; r[i]) swap(f[i], f[r[i]]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> Mid = <span class="number">1</span>; Mid &lt; Lim; Mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="function">Complex <span class="title">unit</span><span class="params">(<span class="built_in">cos</span>(PI / Mid), type * <span class="built_in">sin</span>(PI / Mid))</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; i += (Mid &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="function">Complex <span class="title">w</span><span class="params">(<span class="number">1.0</span>, <span class="number">0.0</span>)</span></span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Mid; ++j, w = w * unit) &#123;</span><br><span class="line">                    Complex f0 = f[i+j], f1 = w * f[i+j+Mid];</span><br><span class="line">                    f[i+j] = f0 + f1, f[i+j+Mid] = f0 - f1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type &lt; <span class="number">0</span>) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) f[i].x /= Lim;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> X, Y;</span><br><span class="line"><span class="keyword">int</span> A[MAXM], B[MAXM];</span><br><span class="line">Complex g[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">double</span> frac = <span class="number">1.0</span> / <span class="built_in">sqrt</span>(<span class="number">2.0</span> * PI);</span><br><span class="line">    <span class="keyword">return</span> frac * <span class="built_in">exp</span>(x * x / <span class="number">-2.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">simpson</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp; L, <span class="keyword">const</span> <span class="keyword">double</span>&amp; R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (R - L) / <span class="number">6.0</span> * (f(L) + f(R) + <span class="number">4.0</span> * f((L + R) / <span class="number">2.0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">asr</span><span class="params">(<span class="keyword">double</span> L, <span class="keyword">double</span> R, <span class="keyword">const</span> <span class="keyword">double</span>&amp; eps, <span class="keyword">double</span> ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> Mid = (L + R) / <span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">double</span> fl = simpson(L, Mid), fr = simpson(Mid, R);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(fl + fr - ans) &lt; <span class="number">15</span> * eps) <span class="keyword">return</span> fl + fr + (fl + fr - ans) / <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">return</span> asr(L, Mid, eps / <span class="number">2.0</span>, fl) + asr(Mid, R, eps / <span class="number">2.0</span>, fr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> Ti;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Ti);</span><br><span class="line">    <span class="keyword">while</span> (Ti--) &#123;</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;X, &amp;Y);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXM; ++i) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, A+i, B+i);</span><br><span class="line">        <span class="comment">// solve</span></span><br><span class="line">        <span class="keyword">if</span> (X * Y &lt; MAXN) &#123;</span><br><span class="line">            <span class="keyword">int</span> Lim = <span class="number">1</span>, L = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (Lim &lt;= X * Y) Lim &lt;&lt;= <span class="number">1</span>, ++L;</span><br><span class="line">            Poly::init(Lim, L);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; X; ++i) g[i].x = <span class="number">1.0</span> / X;</span><br><span class="line">            Poly::FFT(g, Lim, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) g[i] = fpow(g[i], Y);</span><br><span class="line">            Poly::FFT(g, Lim, <span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXM; ++i) &#123;</span><br><span class="line">                <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = A[i]; j &lt;= B[i]; ++j) ans += g[j].x;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>, ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">double</span> mu = (X - <span class="number">1.0</span>) / <span class="number">2.0</span>, sigma2 = (X * X - <span class="number">1.0</span>) / <span class="number">12.0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXM; ++i) &#123;</span><br><span class="line">                <span class="keyword">double</span> L = (A[i] - Y * mu) / <span class="built_in">sqrt</span>(Y * sigma2),</span><br><span class="line">                       R = (B[i] - Y * mu) / <span class="built_in">sqrt</span>(Y * sigma2);</span><br><span class="line">                <span class="comment">// printf("%.7lf\n", asr(L, R, 1e-9, simpson(L, R)));</span></span><br><span class="line">                <span class="comment">// 如果使用以上写法, 某些答案为 1.0 的情况, 算出来是 0.0 = =</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%.7lf\n"</span>, asr(<span class="number">0</span>, R, <span class="number">1e-9</span>, simpson(<span class="number">0</span>, R)) - asr(<span class="number">0</span>, L, <span class="number">1e-9</span>, simpson(<span class="number">0</span>, L)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「SDOI2017」苹果树"><a href="#「SDOI2017」苹果树" class="headerlink" title="「SDOI2017」苹果树"></a>「SDOI2017」苹果树</h3><h4 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2268" target="_blank" rel="noopener">https://loj.ac/problem/2268</a></li></ul><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>观察题意可以发现, 关于 $k$ 的限定可以看作免费取一条从根开始的链, 再取 $k$ 个物品, 取儿子必须取至少一个父亲的树形依赖背包. 棘手的地方在于链的处理.</p><p>考虑怎么把链干掉. 可以发现, 树上点权都是正的, 如果取一条链, 那么一定从根一直取到叶子. 所以可以枚举叶子, 把树分成链左半部分和右半部分.</p><p>再看一遍树的结构, 实际上把树分成了 3 部分</p><ol><li>链上免费取的部分</li><li>链左边付费取的部分 (我们把链上付费取的部分归到这里)</li><li>链右边付费取的部分</li></ol><p>所以设 $f(i, j)$ 表示第 $i$ 个节点, 体积为 $j$ 的最大收益, 也就是在计算第 2 部分的答案.</p><p>类似地, 设 $g(i, j)$ 表示 DFS 序翻转后, 第 $i$ 个节点, 体积为 $j$ 的最大收益, 也就是在计算第 3 部分的答案.</p><p>树上依赖的关系不好处理, 考虑将每个物品数 $a_i &gt; 1$ 节点拆开, 拆成一个物品数为 $1$ 的节点留在原来的位置, 以及一个物品数为 $a_i - 1$ 的节点挂在另外一个节点旁.</p><p>(实际上建图的时候并不必要把这个点真的拆开, 在转移的时候额外判断就好了).</p><p>最后枚举叶子, 累加第 1 部分, 把另外两部分拼起来即可. (也就是 $f(i, j) + g(i, j-k)$)</p><p>注意到对于每个节点的转移, 实际上是一个多重背包, 使用单调队列优化即可.</p><p>时间复杂度 $O(Qnk)$.</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p>实现参考了 <a href="https://www.cnblogs.com/clrs97/p/7842530.html" target="_blank" rel="noopener">Claris</a>.</p><p>有些卡常, 需要把 DP 的二维数组开成一维, 增加缓存命中率.</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2268</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e4</span> + <span class="number">5</span>, MAXK = <span class="number">5e5</span> + <span class="number">5</span>, MAXM = <span class="number">2</span> * MAXK + <span class="number">25e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, K, M, ans;</span><br><span class="line"><span class="keyword">int</span> pre[MAXN], A[MAXN], V[MAXN];</span><br><span class="line"><span class="keyword">int</span> f[MAXM], g[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>* F, <span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> Q[MAXK], W[MAXK], head, tail;</span><br><span class="line">    Q[head = <span class="number">1</span>] = tail = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt;= K; ++i, j += v) &#123;</span><br><span class="line">        F[i] -= j;</span><br><span class="line">        <span class="keyword">while</span> (head &lt;= tail &amp;&amp; F[Q[tail]] &lt; F[i]) --tail;</span><br><span class="line">        Q[++tail] = i;</span><br><span class="line">        <span class="keyword">while</span> (head &lt;= tail &amp;&amp; i - Q[head] &gt; a) ++head;</span><br><span class="line">        W[i] = F[Q[head]] + j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(F, W, M * <span class="keyword">sizeof</span> (<span class="keyword">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXN];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, (n + <span class="number">1</span>) * <span class="keyword">sizeof</span> (<span class="keyword">int</span>)), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;;</span><br><span class="line">        head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs0</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (A[u]) solve(f + M * u, A[u], V[u]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edges[i].to;</span><br><span class="line">            <span class="built_in">memcpy</span>(f + M * v, f + M * u, M * <span class="keyword">sizeof</span> (<span class="keyword">int</span>));</span><br><span class="line">            dfs0(v);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= K; ++j)</span><br><span class="line">                f[M * u + j] = max(f[M * u + j], f[M * v + j - <span class="number">1</span>] + V[v]);</span><br><span class="line">            <span class="comment">// "至少取一个父节点的物品" 的限制就体现在这里了, g(i, j) 同理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edges[i].to;</span><br><span class="line">            <span class="built_in">memcpy</span>(g + M * v, g + M * u, M * <span class="keyword">sizeof</span> (<span class="keyword">int</span>));</span><br><span class="line">            dfs1(v, s + V[u]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= K; ++j)</span><br><span class="line">                g[M * u + j] = max(g[M * u + j], g[M * v + j - <span class="number">1</span>] + V[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head[u] == <span class="number">-1</span>) <span class="comment">// leaf</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= K; ++j)</span><br><span class="line">                ans = max(ans, V[u] + s + f[M * u + j] + g[M * u + K - j]);</span><br><span class="line">        <span class="keyword">if</span> (A[u]) solve(g + M * u, A[u], V[u]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> Ti; read(Ti);</span><br><span class="line">    <span class="keyword">while</span> (Ti--) &#123;</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        read(n), read(K);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            read(pre[i]), read(A[i]), read(V[i]), --A[i];</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        ans = <span class="number">0</span>, M = K + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(f + M, <span class="number">0</span>, M * <span class="keyword">sizeof</span> (<span class="keyword">int</span>));</span><br><span class="line">        <span class="built_in">memset</span>(g + M, <span class="number">0</span>, M * <span class="keyword">sizeof</span> (<span class="keyword">int</span>));</span><br><span class="line">        <span class="comment">// solve</span></span><br><span class="line">        Graph::init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) Graph::AddEdge(pre[i], i);</span><br><span class="line">        Graph::dfs0(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 对于 "DFS 翻转", 反着建图即可</span></span><br><span class="line">        Graph::init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">2</span>; --i) Graph::AddEdge(pre[i], i);</span><br><span class="line">        Graph::dfs1(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// output</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「SDOI2017」切树游戏"><a href="#「SDOI2017」切树游戏" class="headerlink" title="「SDOI2017」切树游戏"></a>「SDOI2017」切树游戏</h3><h4 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2269" target="_blank" rel="noopener">https://loj.ac/problem/2269</a></li></ul><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>先祭上 <a href="http://immortalco.blog.uoj.ac/blog/2625" target="_blank" rel="noopener">猫锟的解题报告</a>.</p><p>然后就是动态 DP 了.</p><p>此处信息仍具有可减性, 维护数非 0 部分的积, 以及乘积中 0 的个数即可了.</p><p>落实到代码中就是那个 <code>Num</code> 了.</p><p>还有个可以借鉴的 Trick 就是化简矩阵减小常数了. 直接搬来 immortalCO 的公式.</p><p>$$\begin{pmatrix} \underline{a_1} &amp; \underline{b_1} &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ \underline{c_1} &amp; \underline{d_1} &amp; 1 \end{pmatrix} \times \begin{pmatrix} \underline{a_2} &amp; \underline{b_2} &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ \underline{c_2} &amp; \underline{d_2} &amp; 1 \end{pmatrix} = \begin{pmatrix} \underline{a_1 a_2} &amp; \underline{b_1 + a_1 b_2} &amp; 0 \\ 0 &amp; 1 &amp; 0 \\ \underline{a_2 c_1 + c_2} &amp; \underline{b_2 c_1 + d_1 + d_2} &amp; 1 \end{pmatrix}$$</p><p>运用这个 Trick 的时候, 需要额外注意矩阵的运算顺序.</p><p>动态 DP 采用树链剖分实现, 时间复杂度 $O(n\log ^ 3 n)$.</p><p><del>最近一群毒瘤看着这个 log^3 不爽, 看来要去学 DDP 的 LCT 实现了</del></p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2269</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read; <span class="keyword">using</span> IO::Gc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e4</span>+<span class="number">5</span>, MAXM = <span class="number">128</span>, P = <span class="number">10007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FWT</span><span class="params">(<span class="keyword">int</span>* f, <span class="keyword">int</span> Lim, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> LL inv2 = <span class="number">5004</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>, Mid = <span class="number">2</span>; Mid &lt;= Lim; Mid &lt;&lt;= <span class="number">1</span>, k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; i += Mid)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> f0 = f[i+j], f1 = f[i+j+k];</span><br><span class="line">                f[i+j] = (f0 + f1) % P, f[i+j+k] = (f0 - f1 + P) % P;</span><br><span class="line">                <span class="keyword">if</span> (type == <span class="number">-1</span>) f[i+j] = inv2 * f[i+j] % P, f[i+j+k] = inv2 * f[i+j+k] % P;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="keyword">int</span> E[MAXM][MAXM], V[MAXN], inv[P];</span><br><span class="line"><span class="keyword">int</span> f[MAXN][MAXM], g[MAXN][MAXM], lg[MAXN][MAXM];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Num</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, c;</span><br><span class="line">    Num() &#123; x = c = <span class="number">0</span>; &#125;</span><br><span class="line">    Num(<span class="keyword">int</span> _x): x((_x == <span class="number">0</span>)? <span class="number">1</span>: _x), c(_x == <span class="number">0</span>) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">val</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> c? <span class="number">0</span>: x; &#125;</span><br><span class="line">    Num&amp; <span class="keyword">operator</span>*= (<span class="keyword">const</span> <span class="keyword">int</span>&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rhs != <span class="number">0</span>) x = <span class="number">1L</span>L * x * rhs % P; <span class="keyword">else</span> ++c;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Num&amp; <span class="keyword">operator</span>/= (<span class="keyword">const</span> <span class="keyword">int</span>&amp; rhs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rhs != <span class="number">0</span>) x = <span class="number">1L</span>L * x * inv[rhs] % P; <span class="keyword">else</span> --c;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; lf[MAXN][MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;;</span><br><span class="line">        head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> HLD &#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> Graph;</span><br><span class="line">    <span class="keyword">int</span> son[MAXN], pre[MAXN], depth[MAXN], size[MAXN];</span><br><span class="line">    <span class="keyword">int</span> dfn[MAXN], Ed[MAXN], rnk[MAXN], topfa[MAXN], dfs_clock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        depth[u] = depth[fa] + <span class="number">1</span>;</span><br><span class="line">        size[u] = <span class="number">1</span>, son[u] = <span class="number">-1</span>, pre[u] = fa;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) f[u][j] = E[V[u]][j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) == fa) <span class="keyword">continue</span>;</span><br><span class="line">            dfs1(v, u), size[u] += size[v];</span><br><span class="line">            <span class="keyword">if</span> (son[u] == <span class="number">-1</span> || size[v] &gt; size[son[u]]) son[u] = v;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">                f[u][j] = (f[u][j] + <span class="number">1L</span>L * f[u][j] * f[v][j] % P) % P;</span><br><span class="line">                g[u][j] = (g[u][j] + g[v][j]) % P;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) g[u][j] = (g[u][j] + f[u][j]) % P;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">        topfa[u] = top;</span><br><span class="line">        dfn[u] = ++dfs_clock, rnk[dfs_clock] = u, Ed[top] = dfs_clock;</span><br><span class="line">        <span class="keyword">if</span> (~son[u]) dfs2(son[u], top);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) lf[u][j] = Num(E[<span class="number">0</span>][j]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) == pre[u] || v == son[u]) <span class="keyword">continue</span>;</span><br><span class="line">            dfs2(v, v);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                lf[u][j] *= (<span class="number">1</span> + f[v][j]) % P, lg[u][j] = (lg[u][j] + g[v][j]) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> rt = <span class="number">1</span>)</span> </span>&#123; dfs1(rt, <span class="number">0</span>), dfs2(rt, rt); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> A[MAXM], B[MAXM], C[MAXM], D[MAXM];</span><br><span class="line">    Node() &#123; <span class="built_in">memset</span>(<span class="keyword">this</span>, <span class="number">0</span>, <span class="keyword">sizeof</span> *<span class="keyword">this</span>); &#125;</span><br><span class="line">    Node <span class="keyword">operator</span> * (<span class="keyword">const</span> Node&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        Node ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            ret.A[i] = <span class="number">1L</span>L * A[i] * rhs.A[i] % P;</span><br><span class="line">            ret.B[i] = (<span class="number">1L</span>L * A[i] * rhs.B[i] % P + B[i]) % P;</span><br><span class="line">            ret.C[i] = (<span class="number">1L</span>L * rhs.A[i] * C[i] % P + rhs.C[i]) % P;</span><br><span class="line">            ret.D[i] = (<span class="number">1L</span>L * C[i] * rhs.B[i] % P + rhs.D[i] + D[i]) % P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SGT &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc (nd&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc (nd&lt;&lt;1|1)</span></span><br><span class="line">    Node dat[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> nd)</span> </span>&#123; dat[nd] = dat[rc] * dat[lc]; &#125;</span><br><span class="line">    <span class="comment">// 注意 maintain 合并两矩阵的顺序</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">1L</span>L * lf[u][i].val() * E[V[u]][i] % P;</span><br><span class="line">            dat[nd].A[i] = dat[nd].B[i] = dat[nd].C[i] = a;</span><br><span class="line">            dat[nd].D[i] = (a + lg[u][i]) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> newnode(nd, HLD::rnk[L]);</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        build(lc, L, Mid), build(rc, Mid+<span class="number">1</span>, R);</span><br><span class="line">        maintain(nd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> newnode(nd, HLD::rnk[L]);</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= Mid) Mdy(lc, L, Mid, pos);</span><br><span class="line">        <span class="keyword">else</span> Mdy(rc, Mid+<span class="number">1</span>, R, pos);</span><br><span class="line">        maintain(nd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= L &amp;&amp; R &lt;= opR) <span class="keyword">return</span> dat[nd];</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (opR &lt;= Mid) <span class="keyword">return</span> Qry(lc, L, Mid, opL, opR);</span><br><span class="line">        <span class="keyword">if</span> (opL &gt; Mid) <span class="keyword">return</span> Qry(rc, Mid+<span class="number">1</span>, R, opL, opR);</span><br><span class="line">        <span class="keyword">return</span> Qry(rc, Mid+<span class="number">1</span>, R, opL, opR) * Qry(lc, L, Mid, opL, opR);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> lc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t1[MAXN], t2[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> HLD &#123;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        Node res = SGT::Qry(<span class="number">1</span>, <span class="number">1</span>, n, dfn[u], Ed[u]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) t1[i] = res.C[i], t2[i] = res.D[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        V[u] = val;</span><br><span class="line">        <span class="keyword">while</span> (u &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> fa = pre[topfa[u]];</span><br><span class="line">            Qry(topfa[u]);</span><br><span class="line">            <span class="keyword">if</span> (fa) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">                lf[fa][i] /= (t1[i] + <span class="number">1</span>) % P, lg[fa][i] = (lg[fa][i] - t2[i] + P) % P;</span><br><span class="line">            SGT::Mdy(<span class="number">1</span>, <span class="number">1</span>, n, dfn[u]);</span><br><span class="line">            Qry(topfa[u]);</span><br><span class="line">            <span class="keyword">if</span> (fa) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">                lf[fa][i] *= (t1[i] + <span class="number">1</span>) % P, lg[fa][i] = (lg[fa][i] + t2[i]) % P;</span><br><span class="line">            u = fa;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    Graph::init();</span><br><span class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; P; ++i) inv[i] = <span class="number">1L</span>L * (P - P / i) * inv[P % i] % P;</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(V[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        read(u), read(v), Graph::AddEdge(u, v), Graph::AddEdge(v, u);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) E[i][i] = <span class="number">1</span>, FWT(E[i], m, <span class="number">1</span>);</span><br><span class="line">    HLD::solve(), SGT::build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    read(q);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> opt, x, y;</span><br><span class="line">        opt = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isspace</span>(opt)) opt = Gc();</span><br><span class="line">        read(x);</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>: read(y), HLD::Mdy(x, y); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Q'</span>: HLD::Qry(<span class="number">1</span>), FWT(t2, m, <span class="number">-1</span>), <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, t2[x]); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERR\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「SDOI2017」天才黑客"><a href="#「SDOI2017」天才黑客" class="headerlink" title="「SDOI2017」天才黑客"></a>「SDOI2017」天才黑客</h3><h4 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2270" target="_blank" rel="noopener">https://loj.ac/problem/2270</a></li></ul><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>如果把边看作点, 容易得到这样一个做法:</p><ol><li>枚举边, 假设当前枚举到的边为 $(a, b)$.</li><li>找到形如 $(b, c)$ 的边, 两者之间连边, 边权为两者 LCP, 也就是 Trie 树上 LCA 到根的距离.</li><li>跑 Dijkstra, 对于每个点 $u$, 找到形如 $(a, u)$ 的边更新答案.</li></ol><p>但是这个算法有一个明显的问题, 遇到原图中点数度数很大的情况就会连很多边…</p><p>考虑如何优化这个过程. </p><p>对于 Trie 上一个节点 $u$, 将 $u$ 周围一圈节点按 DFS 序排序, 类似于后缀数组, 设 $h_i = \operatorname{LCP}(s_i, s_{i+1})$, 那么</p><p>$$\operatorname{LCP}(s_L,\ s_R) = \min \{ h_j \mid L \le j \le R \}$$</p><p>利用后缀数组中常见套路, 可以利用单调栈求出 LCP 为 $h_i$ 的一段区间, 然后点向区间连边, 区间向点连边即可. 利用线段树优化建图即可.</p><p>但是有更加简便的办法. 还是引用 <a href="https://www.cnblogs.com/clrs97/p/7833797.html" target="_blank" rel="noopener">Claris 的博客</a>:</p><blockquote><p>枚举每个 $h_i$ 作为分界线，那么新图中两侧的点均可以通过不超过 $h_i$ 的代价互相访问.</p><p>建立一排前缀虚点和后缀虚点然后对应前后缀之间连边即可.</p></blockquote><p>具体地说, 前缀入点 <code>prei</code> 和前缀出点 <code>preo</code> 之间边权分别为 $0$, 每个 <code>prei[i]</code> 向 <code>preo[i+1]</code> 连边, 权值为 $h_i$.</p><p>这样连边就以较小的代价做了等效的事情. 后缀同理.</p><p>可能还是有些抽象, 不过在代码实现里还是很清晰的. 以及一些入点出点的细节也体现在代码里.</p><p>时间复杂度 $O(m \log m)$.</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><p>你问我为什么执意写树剖求 LCA… 这… 我要是会倍增我不就写倍增了吗 = =</p><p>以及边拆为点时, 并不需要额外新增一条边记录初始边权, 直接视作点权在跑 Dijkstra 的过程中更新即可.</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2270</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e4</span> + <span class="number">5</span>, MAXK = <span class="number">2e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = MAXN * <span class="number">10</span>, MAXE = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, K, uidx;</span><br><span class="line"><span class="keyword">int</span> U[MAXN], D[MAXN], Ans[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; In[MAXN], Out[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to, w; &#125; edges[MAXE];</span><br><span class="line">    <span class="keyword">int</span> head[MAXV], eidx;</span><br><span class="line">    <span class="keyword">int</span> dist[MAXV], val[MAXV];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to, w &#125;, head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;Pii, <span class="built_in">vector</span>&lt;Pii&gt;, greater&lt;Pii&gt; &gt; PQ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= uidx; ++i) dist[i] = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="keyword">if</span> (U[i] == <span class="number">1</span>) PQ.push(Pii(dist[i] = val[i], i));</span><br><span class="line">        <span class="keyword">while</span> (!PQ.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> d = PQ.top().first, u = PQ.top().second; PQ.pop();</span><br><span class="line">            <span class="keyword">if</span> (d != dist[u]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = edges[i].to;</span><br><span class="line">                <span class="keyword">if</span> (dist[v] &gt; val[v] + dist[u] + edges[i].w)</span><br><span class="line">                    PQ.push(Pii(dist[v] = val[v] + dist[u] + edges[i].w, v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">2</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">            Ans[u] = INT_MAX;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; In[u].size(); ++i)</span><br><span class="line">                Ans[u] = min(Ans[u], Graph::dist[In[u][i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> HLD &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXK];</span><br><span class="line">    <span class="keyword">int</span> head[MAXK], eidx;</span><br><span class="line">    <span class="keyword">int</span> depth[MAXK], pre[MAXK], son[MAXK], size[MAXK];</span><br><span class="line">    <span class="keyword">int</span> topfa[MAXK], dfn[MAXK], dfs_clock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;, head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        depth[u] = depth[fa] + <span class="number">1</span>;</span><br><span class="line">        son[u] = <span class="number">-1</span>, size[u] = <span class="number">1</span>, pre[u] = fa;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            dfs1(v = edges[i].to, u), size[u] += size[v];</span><br><span class="line">            <span class="keyword">if</span> (son[u] == <span class="number">-1</span> || size[son[u]] &lt; size[v]) son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">        topfa[u] = top, dfn[u] = ++dfs_clock;</span><br><span class="line">        <span class="keyword">if</span> (~son[u]) dfs2(son[u], top);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt)</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) != son[u]) dfs2(v, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> rt = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        depth[<span class="number">0</span>] = <span class="number">-1</span>, dfs1(rt, <span class="number">0</span>), dfs2(rt, rt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (topfa[u] != topfa[v]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (depth[topfa[u]] &lt; depth[topfa[v]]) swap(u, v);</span><br><span class="line">            u = pre[topfa[u]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth[u] &gt; depth[v]? v: u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Abs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">0</span>? -x: x; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dfn[D[Abs(x)]] &lt; dfn[D[Abs(y)]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> preo[MAXN], prei[MAXN], sufi[MAXN], sufo[MAXN], q[MAXN];</span><br><span class="line">        <span class="keyword">int</span> nq = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; In[u].size(); ++i) q[++nq] = In[u][i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; Out[u].size(); ++i) q[++nq] = -Out[u][i];</span><br><span class="line">        <span class="comment">// 区分出入点和出点</span></span><br><span class="line">        sort(q+<span class="number">1</span>, q+<span class="number">1</span>+nq, cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nq; ++i) &#123;</span><br><span class="line">            preo[i] = ++uidx, prei[i] = ++uidx, sufo[i] = ++uidx, sufi[i] = ++uidx;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                Graph::AddEdge(preo[i<span class="number">-1</span>], preo[i], <span class="number">0</span>), Graph::AddEdge(prei[i<span class="number">-1</span>], prei[i], <span class="number">0</span>);</span><br><span class="line">                Graph::AddEdge(sufo[i], sufo[i<span class="number">-1</span>], <span class="number">0</span>), Graph::AddEdge(sufi[i], sufi[i<span class="number">-1</span>], <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (q[i] &gt; <span class="number">0</span>)</span><br><span class="line">                Graph::AddEdge(q[i], prei[i], <span class="number">0</span>), Graph::AddEdge(q[i], sufi[i], <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                q[i] = -q[i], Graph::AddEdge(preo[i], q[i], <span class="number">0</span>), Graph::AddEdge(sufo[i], q[i], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nq; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> lca = LCA(D[q[i]], D[q[i + <span class="number">1</span>]]);</span><br><span class="line">            Graph::AddEdge(prei[i], preo[i + <span class="number">1</span>], depth[lca]);</span><br><span class="line">            Graph::AddEdge(sufi[i + <span class="number">1</span>], sufo[i], depth[lca]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> Ti; read(Ti);</span><br><span class="line">    <span class="keyword">while</span> (Ti--) &#123;</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        Graph::init(), HLD::init();</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        read(n), read(m), read(K); uidx = m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            read(U[i]), read(v), read(Graph::val[i]), read(D[i]);</span><br><span class="line">            In[v].push_back(i), Out[U[i]].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u, v, w, i = <span class="number">1</span>; i &lt; K; ++i)</span><br><span class="line">            read(u), read(v), read(w), HLD::AddEdge(u, v);</span><br><span class="line">        <span class="comment">// solve</span></span><br><span class="line">        HLD::solve();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) HLD::build(i);</span><br><span class="line">        Graph::Dijkstra();</span><br><span class="line">        <span class="comment">// output</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Ans[i]);</span><br><span class="line">        <span class="comment">// clear</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) Graph::val[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) In[i].clear(), Out[i].clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「SDOI2017」遗忘的集合"><a href="#「SDOI2017」遗忘的集合" class="headerlink" title="「SDOI2017」遗忘的集合"></a>「SDOI2017」遗忘的集合</h3><h4 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/submission/759802" target="_blank" rel="noopener">https://loj.ac/submission/759802</a></li></ul><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>如果把所求和已知交换, 那么这道题就是一道生成函数套路题了.</p><p>设序列 $a_i$ 表示元素 $i$ 是否存在于集合 $S$ 中. 那么取 $S$ 中元素之和的方案数的生成函数为</p><p>$$F(x) = \prod_{i \in S} (\sum_{k=0}^{\infty} x^{ki}) = \prod_{i \in S} \frac{1}{1 - x^i} = \prod_{i=1}^n (\frac{1}{1 - x^i} ) ^ {a_i}$$</p><p>看到乘积不爽. 两边同时取 $\ln$, 得</p><p>$$- \ln F(x) = \sum_{i=1}^n a_i \ln (1-x^i)$$</p><p>记 $g(x) = \ln (1-x^i)$, 那么对 $g(x)$ 求导得到</p><p>$$\frac{(1 - x^i)’}{1 - x^i} = \frac{-i x^{i-1}}{1 - x^i} = g’(x)$$</p><p>由广义二项式定理, 得</p><p>$$-ix^{i-1} \sum_{k=0}^{\infty} x ^{ki} = -\sum_{k=0}^{\infty} i x^{ki +i-1} = g’(x)$$</p><p>再积分, 得</p><p>$$-\sum_{k=0} ^ {\infty} \frac{i}{ki + i} x^{ki + i} = -\sum_{k=1}^{\infty} \frac{1}{k} x ^ {ki} = g(x) $$</p><p>所以我们就得到了</p><p>$$g(x) = \ln (1 - x^i) = -\sum_{k=1}^{\infty} \frac{1}{k} x^{ki}$$</p><p>代入原式, 可以得到</p><p>$$\ln F(x) = \sum_{i=1}^n a_i \sum_{k=1}^{\infty} \frac{1}{k} x^{ki}$$</p><p>设 $T = ki$, 并交换枚举顺序, 得</p><p>$$\ln F(x) = \sum_{T=1}^\infty (\sum_{d \mid T} a_d \frac{d}{T} ) x^T$$</p><p>至此, 这道题就做完了. 对给定的 $F(x)$ 求 $\ln$ 后莫比乌斯反演即可.</p><p>此处并不需要筛出来 $\mu$ 之后 $O(\sqrt n)$ 枚举约数… 直接利用 <a href="http://vfleaking.blog.uoj.ac/blog/87" target="_blank" rel="noopener">VFleaKing 反演课件</a> 里的技巧即可.</p><p>时间复杂度 $O(n\log n)$.</p><p>其实整个过程叫做 “Euler Transform”? 类似的技巧也在 <a href="https://www.luogu.com.cn/problem/P4389" target="_blank" rel="noopener">Luogu P4389 付公主的背包</a> 用到过.</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><p>先滚过去学了 MTT 才写了这道题 = =</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2271</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1</span> &lt;&lt; <span class="number">19</span>, M = (<span class="number">1</span> &lt;&lt; <span class="number">15</span>) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Complex(<span class="keyword">double</span> _x = <span class="number">0.0</span>, <span class="keyword">double</span> _y = <span class="number">0.0</span>): x(_x), y(_y) &#123; &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> + (<span class="keyword">const</span> Complex&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Complex(x + rhs.x, y + rhs.y); &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> - (<span class="keyword">const</span> Complex&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Complex(x - rhs.x, y - rhs.y); &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Complex(x * rhs.x - y * rhs.y, x * rhs.y + y * rhs.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Complex <span class="title">conj</span><span class="params">(<span class="keyword">const</span> Complex&amp; p)</span> </span>&#123; <span class="keyword">return</span> Complex(p.x, -p.y); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> P;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> b, <span class="keyword">int</span> m = P)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * base % m;</span><br><span class="line">        base = <span class="number">1L</span>L * base * base % m, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret % m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Poly &#123;</span><br><span class="line">    <span class="keyword">int</span> r[MAXN];</span><br><span class="line">    Complex W[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; Lim, <span class="keyword">const</span> <span class="keyword">int</span>&amp; L)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Lim; ++i) r[i] = (r[i&gt;&gt;<span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (L<span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) W[i] = Complex(<span class="built_in">cos</span>(PI / Lim * i), <span class="built_in">sin</span>(PI / Lim * i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(Complex* f, <span class="keyword">const</span> <span class="keyword">int</span>&amp; Lim)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Lim; ++i) <span class="keyword">if</span> (i &lt; r[i]) swap(f[i], f[r[i]]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> Mid = <span class="number">1</span>; Mid &lt; Lim; Mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; i += Mid &lt;&lt; <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Mid; ++j) &#123;</span><br><span class="line">                    Complex f0 = f[i+j], f1 = W[<span class="number">1L</span>L * j * Lim / Mid] * f[i+j+Mid];</span><br><span class="line">                    f[i+j] = f0 + f1, f[i+j+Mid] = f0 - f1;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MTT</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>* f, <span class="keyword">const</span> <span class="keyword">int</span>* g, <span class="keyword">int</span> Lim, <span class="keyword">int</span>* h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> Complex A[MAXN], B[MAXN];</span><br><span class="line">        <span class="keyword">static</span> Complex dfta[MAXN], dftb[MAXN], dftc[MAXN], dftd[MAXN];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) A[i] = Complex(f[i] &amp; M, f[i] &gt;&gt; <span class="number">15</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) B[i] = Complex(g[i] &amp; M, g[i] &gt;&gt; <span class="number">15</span>);</span><br><span class="line">        FFT(A, Lim), FFT(B, Lim);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = (Lim - i) &amp; (Lim - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">static</span> Complex da, db, dc, dd;</span><br><span class="line">            da = (A[i] + conj(A[j])) * Complex(<span class="number">0.5</span>, <span class="number">0.0</span>);</span><br><span class="line">            db = (A[i] - conj(A[j])) * Complex(<span class="number">0.0</span>, <span class="number">-0.5</span>);</span><br><span class="line">            dc = (B[i] + conj(B[j])) * Complex(<span class="number">0.5</span>, <span class="number">0.0</span>);</span><br><span class="line">            dd = (B[i] - conj(B[j])) * Complex(<span class="number">0.0</span>, <span class="number">-0.5</span>);</span><br><span class="line">            dfta[j] = da * dc, dftb[j] = da * dd;</span><br><span class="line">            dftc[j] = db * dc, dftd[j] = db * dd;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) A[i] = dfta[i] + dftb[i] * Complex(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) B[i] = dftc[i] + dftd[i] * Complex(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">        FFT(A, Lim), FFT(B, Lim);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> da = LL(A[i].x / Lim + <span class="number">0.5</span>) % P, db = LL(A[i].y / Lim + <span class="number">0.5</span>) % P;</span><br><span class="line">            <span class="keyword">int</span> dc = LL(B[i].x / Lim + <span class="number">0.5</span>) % P, dd = LL(B[i].y / Lim + <span class="number">0.5</span>) % P;</span><br><span class="line">            h[i] = (da + (LL(db + dc) &lt;&lt; <span class="number">15</span>) + (LL(dd) &lt;&lt; <span class="number">30</span>)) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Inv</span><span class="params">(<span class="keyword">int</span>* f, <span class="keyword">int</span>* g, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> A[MAXN], B[MAXN], ab[MAXN], abb[MAXN];</span><br><span class="line">        g[<span class="number">0</span>] = fpow(f[<span class="number">0</span>], P<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> L = <span class="number">0</span>, Lim = <span class="number">1</span>, Mid = <span class="number">2</span>; Mid &lt; <span class="number">2</span>*n; Mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (Lim &lt; <span class="number">2</span>*Mid) Lim &lt;&lt;= <span class="number">1</span>, ++L;</span><br><span class="line">            init(Lim, L);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Mid; ++i) A[i] = f[i], B[i] = g[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = Mid; i &lt; Lim; ++i) A[i] = B[i] = <span class="number">0</span>;</span><br><span class="line">            MTT(A, B, Lim, ab), MTT(ab, B, Lim, abb);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Lim; ++i)</span><br><span class="line">                g[i] = ((B[i] + B[i]) % P - abb[i] + P) % P;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = min(n, Mid); i &lt; Lim; ++i) g[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Der</span><span class="params">(<span class="keyword">int</span>* f, <span class="keyword">int</span>* g, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) g[i<span class="number">-1</span>] = <span class="number">1L</span>L * i * f[i] % P;</span><br><span class="line">        g[n - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Int</span><span class="params">(<span class="keyword">int</span>* f, <span class="keyword">int</span>* g, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        g[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) g[i] = <span class="number">1L</span>L * fpow(i, P<span class="number">-2</span>) * f[i<span class="number">-1</span>] % P;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Ln</span><span class="params">(<span class="keyword">int</span>* f, <span class="keyword">int</span>* g, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> df[MAXN], invf[MAXN];</span><br><span class="line">        Der(f, df, n), Inv(f, invf, n);</span><br><span class="line">        <span class="keyword">int</span> Lim = <span class="number">1</span>, L = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (Lim &lt; <span class="number">2</span>*n) Lim &lt;&lt;= <span class="number">1</span>, ++L;</span><br><span class="line">        init(Lim, L);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; Lim; ++i) df[i] = invf[i] = <span class="number">0</span>;</span><br><span class="line">        MTT(df, invf, Lim, invf), Int(invf, g, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> Ans[MAXN], nA;</span><br><span class="line"><span class="keyword">int</span> f[MAXN], lnf[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(P), ++n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) read(f[i]);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    Poly::Ln(f, lnf, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) lnf[i] = <span class="number">1L</span>L * i * lnf[i] % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; n; j += i) lnf[j] = (lnf[j] - lnf[i] + P) % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) <span class="keyword">if</span> (lnf[i]) Ans[++nA] = i;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, nA);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nA; ++i) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, Ans[i], <span class="string">" \n"</span>[i==nA]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「SDOI2017」文本校正"><a href="#「SDOI2017」文本校正" class="headerlink" title="「SDOI2017」文本校正"></a>「SDOI2017」文本校正</h3><h4 id="题目链接-5"><a href="#题目链接-5" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2272" target="_blank" rel="noopener">https://loj.ac/problem/2272</a></li></ul><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p>一道毒瘤的字符串匹配题.</p><p>假设串 $T$ 被拆分为形如 ABC 的三段, 有一个大力匹配的思路, 即枚举 $3!$ 种情况, 依次判定即可.</p><ol><li><p>ABC</p><p>直接用哈希判断两串是否相等即可…</p></li><li><p>CAB, BCA</p><p>以 CAB 为例, 注意到 AB 在 $T$ 中是连续的一段, 枚举 AB 和 C 的断点, 用哈希判断是否和 $S$ 中对应一段相等即可.</p><p>BCA 同理.</p></li><li><p>CBA</p><p>开 始 了.</p><p>我们先把 $T$ 倒过来再插入 $S$, 得到一个新串 $S_1 T_n S_2 T_{n-1} \cdots S_n T_1$, 那么 CBA 的判断就是在判断得到的新串是否可以被拆成 3 个偶回文串.</p><p>可以在新串上枚举一个拆分点, 现在的问题就是: 判断后缀是否构成一个双回文串.</p><p>有一个来自 <wc2017 金策="" 字符串算法选讲=""> 的结论</wc2017></p><blockquote><p>如果 $s = ab$, $a$, $b$ 都是回文串, 则称 $s$ 是一个双回文串.</p><p>如果 $s$ 是一个双回文串, 则存在一种拆分方法 $s = ab$, 使得 $a$ 是 $s$ 的最长回文前缀, 或者 $b$ 是 $s$ 的最长回文后缀.</p></blockquote><p>所以可以用 Manacher 处理出</p><ol><li><p>当前拆分点向右延伸的最长回文串的结束位置, 也就是最长回文前缀, 代码中为 <code>Rpos[i]</code>.</p></li><li><p>能够到达新串结尾的回文中心集合, 也就是最长回文后缀, 打标记后丢到队列里.</p></li></ol><p>假设当前枚举到的断点为 $i$, 若 $i$ 位置前是一个偶回文串, 依次用最长回文前缀和最长回文后缀判断 $i$ 位置后是否满足限制即可.</p></li><li><p>BAC, ACB</p><p>以 BAC 为例, 如果枚举 C 的位置, 利用上面的经验, 剩下的部分就是一个判断双回文串的问题…</p><p>但是有简单一些的办法.</p><p>回忆 Case 3 处理问题的过程, Manacher 其实在做一个最大匹配, 也就是说, 此处 BA 两串一定有一者是长度最大的, 利用 KMP 完成这个最大匹配即可. 剩下部分利用哈希判断就好了.</p><p>那么对于 ACB 的情况, 真的是字面意思上倒过来就可以了, 注意最后的答案, 先前的哈希值也要翻转. 当然再写一遍也是可以的, 有常数上的优势.</p></li></ol><p>时间复杂度 $O(n)$.</p><p>考场上我当然是选择 $O(n^2)$ 的暴力匹配 = =.</p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2272</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">Pii Ans[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> S[MAXN], T[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双模数 Hash ...</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hash</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> P1 = <span class="number">998244353</span>, P2 = <span class="number">1e9</span>+<span class="number">7</span>, B = <span class="number">19260817</span>;</span><br><span class="line">    <span class="keyword">int</span> H1, H2;</span><br><span class="line"></span><br><span class="line">    Hash(<span class="keyword">int</span> _H1 = <span class="number">0</span>, <span class="keyword">int</span> _H2 = <span class="number">0</span>): H1(_H1), H2(_H2) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; ch)</span> </span>&#123;</span><br><span class="line">        H1 = (<span class="number">1L</span>L * H1 * B % P1 + ch) % P1, H2 = (<span class="number">1L</span>L * H2 * B % P2 + ch) % P2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Hash <span class="keyword">operator</span> + (<span class="keyword">const</span> Hash&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Hash((H1 + rhs.H1) % P1, (H2 + rhs.H2) % P2);</span><br><span class="line">    &#125;</span><br><span class="line">    Hash <span class="keyword">operator</span> - (<span class="keyword">const</span> Hash&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Hash((H1 - rhs.H1 + P1) % P1, (H2 - rhs.H2 + P2) % P2);</span><br><span class="line">    &#125;</span><br><span class="line">    Hash <span class="keyword">operator</span> * (<span class="keyword">const</span> Hash&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Hash(<span class="number">1L</span>L * H1 * rhs.H1 % P1, <span class="number">1L</span>L * H2 * rhs.H2 % P2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>== (<span class="keyword">const</span> Hash&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> H1 == rhs.H1 &amp;&amp; H2 == rhs.H2; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!= (<span class="keyword">const</span> Hash&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> == rhs); &#125;</span><br><span class="line">&#125; A[MAXN], B[MAXN], powB[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Hash <span class="title">Part</span><span class="params">(Hash* H, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123; <span class="keyword">return</span> H[R] - H[L<span class="number">-1</span>] * powB[R-L+<span class="number">1</span>]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ABC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A[n] != B[n]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> Ans[<span class="number">0</span>] = Pii(<span class="number">1</span>, <span class="number">1</span>), Ans[<span class="number">1</span>] = Pii(<span class="number">2</span>, <span class="number">2</span>), Ans[<span class="number">2</span>] = Pii(<span class="number">3</span>, n), <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CAB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (Part(A, <span class="number">1</span>, n - i + <span class="number">1</span>) == Part(B, i, n)</span><br><span class="line">                &amp;&amp; Part(A, n - i + <span class="number">2</span>, n) == Part(B, <span class="number">1</span>, i - <span class="number">1</span>)) &#123;</span><br><span class="line">            Ans[<span class="number">0</span>] = Pii(i, n), Ans[<span class="number">1</span>] = Pii(<span class="number">1</span>, <span class="number">1</span>), Ans[<span class="number">2</span>] = Pii(<span class="number">2</span>, i<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BCA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">2</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (Part(A, <span class="number">1</span>, n - i) == Part(B, i + <span class="number">1</span>, n)</span><br><span class="line">                &amp;&amp; Part(A, n - i + <span class="number">1</span>, n) == Part(B, <span class="number">1</span>, i)) &#123;</span><br><span class="line">            Ans[<span class="number">0</span>] = Pii(i + <span class="number">1</span>, i + <span class="number">1</span>), Ans[<span class="number">1</span>] = Pii(i + <span class="number">2</span>, n), Ans[<span class="number">2</span>] = Pii(<span class="number">1</span>, i);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MaxR[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用回文半径判断回文串</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isP</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &gt; R) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> Mid - L + <span class="number">1</span> &lt;= MaxR[Mid];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断双回文串, 其实只判定了长度...</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isDP</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> L &lt; R &amp;&amp; (R - L) % <span class="number">4</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CBA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> C[MAXN &lt;&lt; <span class="number">1</span>], D[MAXN &lt;&lt; <span class="number">2</span>], nD, nC;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> Rpos[MAXN &lt;&lt; <span class="number">1</span>], Q[MAXN &lt;&lt; <span class="number">2</span>], head, tail;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> vis[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="comment">// C tansform</span></span><br><span class="line">    nD = nC = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) C[++nC] = S[i], C[++nC] = T[n - i + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// Manacher</span></span><br><span class="line">    D[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nC; ++i) D[++nD] = C[i], D[++nD] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nD; i += <span class="number">2</span>) vis[i] = <span class="literal">false</span>, Rpos[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> Mid = <span class="number">0</span>, mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nD; ++i) &#123;</span><br><span class="line">        MaxR[i] = (i &lt; mx)? min(MaxR[Mid * <span class="number">2</span> - i], mx - i): <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= MaxR[i] &amp;&amp; D[i + MaxR[i]] == D[i - MaxR[i]]) ++MaxR[i];</span><br><span class="line">        <span class="keyword">if</span> (mx &lt; i + MaxR[i]) mx = i + MaxR[i], Mid = i;</span><br><span class="line">        Rpos[i - MaxR[i] + <span class="number">1</span>] = max(Rpos[i - MaxR[i] + <span class="number">1</span>], i + MaxR[i] - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (i + MaxR[i] - <span class="number">1</span> == nD) vis[i - MaxR[i] + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Judge</span></span><br><span class="line">    Q[head = <span class="number">1</span>] = tail = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nD; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 注意此处的更新</span></span><br><span class="line">        Rpos[i] = max(Rpos[i], Rpos[i - <span class="number">2</span>] - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (vis[i]) Q[++tail] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// i 是断点, 真的是断点, 换言之, D[i] = -1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= nD; i += <span class="number">4</span>) <span class="keyword">if</span> (isP(<span class="number">0</span>, i)) &#123;</span><br><span class="line">        <span class="keyword">while</span> (head &lt;= tail &amp;&amp; Q[head] &lt; i) ++head;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> Algt, Clgt;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (isDP(i, Rpos[i]) &amp;&amp; isDP(Rpos[i], nD) &amp;&amp; isP(Rpos[i], nD))</span><br><span class="line">            flag = <span class="literal">true</span>, Algt = i / <span class="number">4</span>, Clgt = (nD - Rpos[i]) / <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">if</span> (!flag &amp;&amp; isDP(Q[head], nD) &amp;&amp; isDP(i, Q[head]) &amp;&amp; isP(i, Q[head]))</span><br><span class="line">            flag = <span class="literal">true</span>, Algt = i / <span class="number">4</span>, Clgt = (nD - Q[head]) / <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            Ans[<span class="number">0</span>] = Pii(n - Algt + <span class="number">1</span>, n);</span><br><span class="line">            Ans[<span class="number">1</span>] = Pii(Clgt + <span class="number">1</span>, n - Algt), Ans[<span class="number">2</span>] = Pii(<span class="number">1</span>, Clgt);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Sfail[MAXN], Tfail[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="comment">// KMP</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getFail</span><span class="params">(<span class="keyword">int</span>* P, <span class="keyword">int</span>* fail)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = fail[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; P[i] != P[j + <span class="number">1</span>]) j = fail[j];</span><br><span class="line">        fail[i] = (j += P[i] == P[j + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BAC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Climit = n + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 注意要让 C 匹配上</span></span><br><span class="line">    <span class="keyword">while</span> (Climit &gt; <span class="number">1</span> &amp;&amp; S[Climit - <span class="number">1</span>] == T[Climit - <span class="number">1</span>]) --Climit;</span><br><span class="line">    <span class="keyword">int</span> ptrS = <span class="number">0</span>, ptrT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (ptrS &amp;&amp; S[ptrS+<span class="number">1</span>] != T[i]) ptrS = Sfail[ptrS];</span><br><span class="line">        <span class="keyword">if</span> (S[ptrS + <span class="number">1</span>] == T[i]) ++ptrS;</span><br><span class="line">        <span class="keyword">while</span> (ptrT &amp;&amp; T[ptrT+<span class="number">1</span>] != S[i]) ptrT = Tfail[ptrT];</span><br><span class="line">        <span class="keyword">if</span> (T[ptrT + <span class="number">1</span>] == S[i]) ++ptrT;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; Climit) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (Part(A, ptrS+<span class="number">1</span>, i) == Part(B, <span class="number">1</span>, i - ptrS)) &#123;</span><br><span class="line">            Ans[<span class="number">0</span>] = Pii(i - ptrS + <span class="number">1</span>, i);</span><br><span class="line">            Ans[<span class="number">1</span>] = Pii(<span class="number">1</span>, i - ptrS), Ans[<span class="number">2</span>] = Pii(i + <span class="number">1</span>, n);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Part(A, <span class="number">1</span>, i - ptrT) == Part(B, ptrT + <span class="number">1</span>, i)) &#123;</span><br><span class="line">            Ans[<span class="number">0</span>] = Pii(ptrT + <span class="number">1</span>, i);</span><br><span class="line">            Ans[<span class="number">1</span>] = Pii(<span class="number">1</span>, ptrT), Ans[<span class="number">2</span>] = Pii(i + <span class="number">1</span>, n);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ACB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Alimit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (Alimit &lt; n &amp;&amp; S[Alimit + <span class="number">1</span>] == T[Alimit + <span class="number">1</span>]) ++Alimit;</span><br><span class="line">    <span class="keyword">int</span> ptrS = n+<span class="number">1</span>, ptrT = n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (ptrS != n+<span class="number">1</span> &amp;&amp; S[ptrS<span class="number">-1</span>] != T[i]) ptrS = n - Sfail[n-ptrS+<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (S[ptrS - <span class="number">1</span>] == T[i]) --ptrS;</span><br><span class="line">        <span class="keyword">while</span> (ptrT != n+<span class="number">1</span> &amp;&amp; T[ptrT<span class="number">-1</span>] != S[i]) ptrT = n - Tfail[n-ptrT+<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (T[ptrT - <span class="number">1</span>] == S[i]) --ptrT;</span><br><span class="line">        <span class="keyword">if</span> (i - <span class="number">1</span> &gt; Alimit) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (Part(A, i, ptrS - <span class="number">1</span>) == Part(B, i + n - ptrS + <span class="number">1</span>, n)) &#123;</span><br><span class="line">            Ans[<span class="number">0</span>] = Pii(<span class="number">1</span>, i - <span class="number">1</span>), Ans[<span class="number">1</span>] = Pii(i + n - ptrS + <span class="number">1</span>, n);</span><br><span class="line">            Ans[<span class="number">2</span>] = Pii(i, i + n - ptrS);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Part(A, i + n - ptrT + <span class="number">1</span>, n) == Part(B, i, ptrT - <span class="number">1</span>)) &#123;</span><br><span class="line">            Ans[<span class="number">0</span>] = Pii(<span class="number">1</span>, i - <span class="number">1</span>), Ans[<span class="number">1</span>] = Pii(ptrT, n);</span><br><span class="line">            Ans[<span class="number">2</span>] = Pii(i, ptrT - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> Ti; read(Ti);</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    powB[<span class="number">0</span>] = Hash(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXN; ++i) powB[i] = powB[i<span class="number">-1</span>] * Hash(Hash::B, Hash::B);</span><br><span class="line">    <span class="keyword">while</span> (Ti--) &#123;</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        read(n), read(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(S[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(T[i]);</span><br><span class="line">        <span class="comment">// solve &amp; output</span></span><br><span class="line">        getFail(S, Sfail), getFail(T, Tfail);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            A[i] = A[i<span class="number">-1</span>], A[i].insert(S[i]), B[i] = B[i<span class="number">-1</span>], B[i].insert(T[i]);</span><br><span class="line">        <span class="keyword">if</span> (ABC() || CAB() || BCA() || CBA() || BAC() || ACB()) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, Ans[i].first, Ans[i].second);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>本来想简单地写写, 后来发现自己言简意赅的能力不足 = =</p><p>以后尽量少写一点废话吧.</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;/images/SDOI-2017-sol/SDOI.jpg&quot;&gt; &lt;/div&gt;

&lt;p&gt;&lt;em&gt;&lt;p style=&quot;text-align:center;&quot;&gt;图源 &lt;a href=&quot;https://www.cnblogs.com/zzqsblog/p/7523003.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ZZQ’s Blog&lt;/a&gt;, 至少我是从那里找到的&lt;/p&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这 Round 2 也太毒瘤了 = =&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://depletedprism.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>SDOI 2017 Round 1 大赏</title>
    <link href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/SDOI-2017-R1-sol/"/>
    <id>https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/SDOI-2017-R1-sol/</id>
    <published>2020-03-06T08:17:15.000Z</published>
    <updated>2020-04-09T06:10:52.677Z</updated>
    
    <content type="html"><![CDATA[<hr><p>考虑到写详解有点花时间, 不写又容易忘 = =, 那就写个大概吧.</p><p>SD 两轮省选 (可能?) 会比较科学一点吧</p><a id="more"></a><p>不要因为 Round 1 而错怪 SDOI.</p><h3 id="「SDOI2017」数字表格"><a href="#「SDOI2017」数字表格" class="headerlink" title="「SDOI2017」数字表格"></a>「SDOI2017」数字表格</h3><h4 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h4><p>求</p><p>$$\prod_{i=1}^n \prod_{j=1}^m f( \gcd(i, j) ) \mod 10^9 + 7$$</p><p>其中 $f(n)$ 为斐波那契数列数列第 $n$ 项, $1 \le n,m \le 10^6$, 多组测试数据, $1 \le T \le 1000$.</p><h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2000" target="_blank" rel="noopener">https://loj.ac/problem/2000</a></li></ul><p>看到 $\gcd$ 不如来反演一波. 不妨令 $n \le m$.</p><p>枚举约数并整理, 有</p><p>$$\prod_{i=1}^n \prod_{j=1}^m \prod_{d = 1}^n f(d) [\gcd(i, j) = d]$$</p><p>$$\prod_{d=1}^n f(d) ^ {\sum\limits_{i=1}^n \sum\limits_{j=1}^m{\gcd(i, j) = d}}$$</p><p>由莫比乌斯反演的套路, 得</p><p>$$\prod_{d=1}^n f(d) ^ {\sum\limits_{T=1}^{\lfloor \frac{n}{d} \rfloor} \mu (T) \lfloor \frac{n}{Td} \rfloor \lfloor \frac{m}{Td} \rfloor}$$</p><p>$$\prod_{T=1}^n (\prod_{d\mid T} f(d) ^ {\mu (\frac{T}{d})}) ^ {\lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor}$$</p><p>设 $g(T) = \prod_{d\mid T} f(d) ^ {\mu (\frac{T}{d})}$, 则所求即为</p><p>$$\prod_{T=1}^n g(T) ^ {\lfloor \frac{n}{T} \rfloor \lfloor \frac{m}{T} \rfloor}$$</p><p>考虑计算 $g(T)$. 可以发现, 由于 $\mu(n)$ 取值只有 $0, -1, 1$, 计算 $g(T)$ 可以通过枚举倍数简单地实现. 时间复杂度 $O(n \ln n)$.</p><p>配合前缀积和数论分块即可, 注意快速幂时间复杂度 $O(\log b)$.</p><p>时间复杂度 $O(n \log P + n \ln n + T \cdot n \sqrt n \log P)$.</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2000</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span>+<span class="number">5</span>, P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * base % P;</span><br><span class="line">        base = <span class="number">1L</span>L * base * base % P, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> notPrime[MAXN];</span><br><span class="line"><span class="keyword">int</span> Prime[MAXN], tot;</span><br><span class="line"><span class="keyword">int</span> mu[MAXN], invf[MAXN], f[MAXN], g[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EulerSieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    notPrime[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    g[<span class="number">0</span>] = g[<span class="number">1</span>] = invf[<span class="number">1</span>] = f[<span class="number">1</span>] = mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAXN; ++i) &#123;</span><br><span class="line">        g[i] = <span class="number">1</span>;</span><br><span class="line">        f[i] = (f[i<span class="number">-1</span>] + f[i<span class="number">-2</span>]) % P;</span><br><span class="line">        invf[i] = fpow(f[i], P<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">if</span> (!notPrime[i]) Prime[++tot] = i, mu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i*Prime[j] &lt; MAXN; ++j) &#123;</span><br><span class="line">            notPrime[i*Prime[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % Prime[j] == <span class="number">0</span>) &#123; mu[i*Prime[j]] = <span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">            mu[i*Prime[j]] = -mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXN; ++i) <span class="keyword">if</span> (mu[i] != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; MAXN; j += i)</span><br><span class="line">            g[j] = <span class="number">1L</span>L * g[j] * (mu[i] == <span class="number">1</span>? f[j / i]: invf[j / i]) % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; MAXN; ++i) g[i] = <span class="number">1L</span>L * g[i] * g[i<span class="number">-1</span>] % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    EulerSieve();</span><br><span class="line">    <span class="keyword">int</span> T; read(T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> n, m;</span><br><span class="line">        read(n), read(m);</span><br><span class="line">        <span class="keyword">if</span> (n &gt; m) swap(n, m);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> R, L = <span class="number">1</span>; L &lt;= n; L = R + <span class="number">1</span>) &#123;</span><br><span class="line">            R = min(n / (n / L), m / (m / L));</span><br><span class="line">            <span class="keyword">int</span> s = <span class="number">1L</span>L * g[R] * fpow(g[L<span class="number">-1</span>], P<span class="number">-2</span>) % P;</span><br><span class="line">            ans = <span class="number">1L</span>L * ans * fpow(s, <span class="number">1L</span>L * (n / L) * (m / L) % (P<span class="number">-1</span>)) % P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「SDOI2017」树点涂色"><a href="#「SDOI2017」树点涂色" class="headerlink" title="「SDOI2017」树点涂色"></a>「SDOI2017」树点涂色</h3><h4 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2001" target="_blank" rel="noopener">https://loj.ac/problem/2001</a></li></ul><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>观察操作 1, 以及初始颜色都不相同, 可以发现每次把一条从根节点开始的链染成新颜色的操作类似与 LCT 中的 <code>access</code>. 另加考虑可以发现, 某个节点 $u$ 到根节点的颜色数, 就是在 LCT 上经过虚边的个数 + 1. (假设初始状态中, 树上的边在 LCT 上都是虚边)</p><p>根据这个思路, 操作 2 可以简单计算, 也就是 <code>dist(u) + dist(v) - 2 * dist(LCA) + 1</code>. (此处用 <code>dist</code> 指代当前节点到根的颜色数, 因为 LCA 被减两次所以答案 + 1)</p><p>那么操作 3 呢? 回想 LCT 维护子树信息的过程, 体现在这道题中也就是在更改 “实儿子” 和 “虚儿子” 子树的信息, 换言之, 子树内加减, 然后维护最值就好了. 可以计算出 DFS 序后使用线段树维护.</p><p>实现中在建树的时候直接使用深度作为初始最值, 以及 <code>access</code> 修改的时候需要 <code>findroot</code> 一下找到实际子树的根再修改.</p><p>时间复杂度 $O(m \log ^2 n)$, <del>最近一群毒瘤卡树剖, 不敢再有 log^3 了</del></p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2001</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;;</span><br><span class="line">        head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LCT &#123;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">2</span>][MAXN], pre[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">which</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; u)</span> </span>&#123; <span class="keyword">return</span> pre[u]? ch[<span class="number">1</span>][pre[u]] == u: <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">nroot</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pre[u]? ch[<span class="number">0</span>][pre[u]] == u || ch[<span class="number">1</span>][pre[u]] == u: <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fa = pre[u], w = which(u);</span><br><span class="line">        pre[u] = pre[fa];</span><br><span class="line">        <span class="keyword">if</span> (nroot(fa)) ch[which(fa)][pre[fa]] = u;</span><br><span class="line">        ch[w][fa] = ch[w^<span class="number">1</span>][u];</span><br><span class="line">        <span class="keyword">if</span> (ch[w^<span class="number">1</span>][u]) pre[ch[w^<span class="number">1</span>][u]] = fa;</span><br><span class="line">        ch[w^<span class="number">1</span>][u] = fa, pre[fa] = u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (nroot(u)) &#123;</span><br><span class="line">            <span class="keyword">int</span> fa = pre[u];</span><br><span class="line">            <span class="keyword">if</span> (nroot(fa)) which(fa) == which(u)? rotate(fa): rotate(u);</span><br><span class="line">            rotate(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> HLD &#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> Graph;</span><br><span class="line">    <span class="keyword">int</span> size[MAXN], son[MAXN], depth[MAXN], pre[MAXN];</span><br><span class="line">    <span class="keyword">int</span> topfa[MAXN], dfn[MAXN], rnk[MAXN], dfs_clock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        depth[u] = depth[fa] + <span class="number">1</span>;</span><br><span class="line">        size[u] = <span class="number">1</span>, son[u] = <span class="number">-1</span>, LCT::pre[u] = pre[u] = fa;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) == fa) <span class="keyword">continue</span>;</span><br><span class="line">            dfs1(v, u), size[u] += size[v];</span><br><span class="line">            <span class="keyword">if</span> (son[u] == <span class="number">-1</span> || size[v] &gt; size[son[u]]) son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">        topfa[u] = top;</span><br><span class="line">        dfn[u] = ++dfs_clock, rnk[dfs_clock] = u;</span><br><span class="line">        <span class="keyword">if</span> (~son[u]) dfs2(son[u], top);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt)</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) != pre[u] &amp;&amp; v != son[u]) dfs2(v, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (topfa[u] != topfa[v]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (depth[topfa[u]] &lt; depth[topfa[v]]) swap(u, v);</span><br><span class="line">            u = pre[topfa[u]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth[u] &gt; depth[v]? v: u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> root = <span class="number">1</span>)</span> </span>&#123; dfs1(root, <span class="number">0</span>), dfs2(root, root); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SGT &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc (nd&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc (nd&lt;&lt;1|1)</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> HLD;</span><br><span class="line">    <span class="keyword">int</span> datMax[MAXN &lt;&lt; <span class="number">2</span>], tagAdd[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; nd)</span> </span>&#123;</span><br><span class="line">        datMax[nd] = max(datMax[lc], datMax[rc]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; nd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!tagAdd[nd]) <span class="keyword">return</span>;</span><br><span class="line">        tagAdd[lc] += tagAdd[nd], datMax[lc] += tagAdd[nd];</span><br><span class="line">        tagAdd[rc] += tagAdd[nd], datMax[rc] += tagAdd[nd];</span><br><span class="line">        tagAdd[nd] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> <span class="keyword">void</span>( datMax[nd] = depth[rnk[L]] );</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        build(lc, L, Mid), build(rc, Mid+<span class="number">1</span>, R);</span><br><span class="line">        maintain(nd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= L &amp;&amp; R &lt;= opR) <span class="keyword">return</span> datMax[nd] += val, <span class="keyword">void</span>( tagAdd[nd] += val );</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        pushdown(nd);</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= Mid) Mdy(lc, L, Mid, opL, opR, val);</span><br><span class="line">        <span class="keyword">if</span> (opR &gt; Mid) Mdy(rc, Mid+<span class="number">1</span>, R, opL, opR, val);</span><br><span class="line">        maintain(nd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; u, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mdy(<span class="number">1</span>, <span class="number">1</span>, n, dfn[u], dfn[u] + size[u] - <span class="number">1</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= L &amp;&amp; R &lt;= opR) <span class="keyword">return</span> datMax[nd];</span><br><span class="line">        pushdown(nd);</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>, ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= Mid) ret = max(ret, Qry(lc, L, Mid, opL, opR));</span><br><span class="line">        <span class="keyword">if</span> (opR &gt; Mid) ret = max(ret, Qry(rc, Mid+<span class="number">1</span>, R, opL, opR));</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; u)</span> </span>&#123; <span class="keyword">return</span> Qry(<span class="number">1</span>, <span class="number">1</span>, n, dfn[u], dfn[u]); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; u)</span> </span>&#123; <span class="keyword">return</span> Qry(<span class="number">1</span>, <span class="number">1</span>, n, dfn[u], dfn[u] + size[u] - <span class="number">1</span>); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> lc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LCT &#123;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (ch[<span class="number">0</span>][u]) u = ch[<span class="number">0</span>][u];</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; u; v = u, u = pre[u]) &#123;</span><br><span class="line">            splay(u);</span><br><span class="line">            <span class="keyword">if</span> (ch[<span class="number">1</span>][u]) SGT::Mdy(findroot(ch[<span class="number">1</span>][u]), <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (v) SGT::Mdy(findroot(v), <span class="number">-1</span>);</span><br><span class="line">            ch[<span class="number">1</span>][u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    Graph::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        read(u), read(v), Graph::AddEdge(u, v), Graph::AddEdge(v, u);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    HLD::solve(), SGT::build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> opt, x, y;</span><br><span class="line">        read(opt), read(x);</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: LCT::access(x); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: read(y), <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, SGT::Qry(x) + SGT::Qry(y) - <span class="number">2</span> * SGT::Qry(HLD::LCA(x, y)) + <span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, SGT::Sub(x)); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERR\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「SDOI2017」序列计数"><a href="#「SDOI2017」序列计数" class="headerlink" title="「SDOI2017」序列计数"></a>「SDOI2017」序列计数</h3><p>高一刚学矩阵快速幂的时候整天写斐波那契数列的 n 倍经验 = =</p><p>然后某次学长测试, 出了一个矩阵快速幂, 差点就 A 了, 可惜矩阵写反了…</p><p>再然后就没独立写出过矩阵快速幂的题了, 凄惨 = =</p><h4 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2002" target="_blank" rel="noopener">https://loj.ac/problem/2002</a></li></ul><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>要求和是 $p$ 的倍数, 那么显然是模 $p$ 意义下为 $0$ 了. 考虑到至少有一个数为质数的限制可以通过减法原理解决, 即计算一遍所有数的方案数, 再减去只用合数的答案.</p><p>容易想到一个暴力 DP:</p><p>设 $f(i, j)$ 表示选 $i$ 个数, 加起来模 $p$ 为 $j$ 的方案数. 则</p><p>$$f(i, j) = \sum_k f(i-1, (j - k)\mod p)$$</p><p>每次选择满足限制的 $k$ 就好了.</p><p>观察到 DP 中每次转移都是一样的, 考虑用矩阵快速幂优化.</p><p>容易想到 $O(mp)$ 的构造矩阵方法, 考虑在模 $p$ 意义下, 矩阵中某一列 (或者是某一行) 是循环的, 于是可以在 $O(m + p^2)$ 的时间内构造.</p><p>具体实现的时候有一些细节, 还是参考代码实现吧.</p><p>时间复杂度 $O(m + p^2 + p^3 \log n)$.</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p>这道题中, 两个矩阵相乘可以通过某些方法优化到 $O(p^2)$, 研究不懂, $O(p^3)$ 养老…</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2002</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">2e7</span>+<span class="number">5</span>, MAXP = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">20170408</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, p;</span><br><span class="line"><span class="keyword">int</span> f[MAXP], g[MAXP];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> notPrime[MAXM];</span><br><span class="line"><span class="keyword">int</span> Prime[MAXM], tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EulerSieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    notPrime[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!notPrime[i]) Prime[++tot] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i*Prime[j] &lt;= m; ++j) &#123;</span><br><span class="line">            notPrime[i*Prime[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % Prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> g[MAXP][MAXP];</span><br><span class="line"></span><br><span class="line">    Matrix() &#123; <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g); &#125;</span><br><span class="line"></span><br><span class="line">    Matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> Matrix&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        Matrix ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; p; ++k)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p; ++j)</span><br><span class="line">                    ret.g[i][j] = (ret.g[i][j] + <span class="number">1L</span>L * g[i][k] * rhs.g[k][j] % MOD) % MOD;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; ++i) g[i][i] = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">fpow</span><span class="params">(Matrix base, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    Matrix ret; ret.init();</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = ret * base;</span><br><span class="line">        base = base * base, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Part1</span><span class="params">()</span> </span>&#123; <span class="comment">// 所有数部分</span></span><br><span class="line">    Matrix base;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) ++f[i % p];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) ++base.g[(-i % p + p) % p][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; p; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; ++i) base.g[i][j] = base.g[(i - <span class="number">1</span> + p) % p][j<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    Matrix Ans = fpow(base, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; ++i)</span><br><span class="line">        ret = (ret + <span class="number">1L</span>L * f[i] * Ans.g[i][<span class="number">0</span>] % MOD) % MOD;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Part2</span><span class="params">()</span> </span>&#123; <span class="comment">// 合数部分</span></span><br><span class="line">    Matrix base;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="keyword">if</span> (notPrime[i]) ++g[i % p];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="keyword">if</span> (notPrime[i]) ++base.g[(-i % p + p) % p][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; p; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; ++i) base.g[i][j] = base.g[(i - <span class="number">1</span> + p) % p][j<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    Matrix Ans = fpow(base, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; ++i)</span><br><span class="line">        ret = (ret + <span class="number">1L</span>L * g[i] * Ans.g[i][<span class="number">0</span>] % MOD) % MOD;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;p);</span><br><span class="line">    EulerSieve();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (Part1() - Part2() + MOD) % MOD);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「SDOI2017」新生舞会"><a href="#「SDOI2017」新生舞会" class="headerlink" title="「SDOI2017」新生舞会"></a>「SDOI2017」新生舞会</h3><h4 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2003" target="_blank" rel="noopener">https://loj.ac/problem/2003</a></li></ul><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>看到式子之后容易联想到 0/1 分数规划. 所以直接考虑二分答案.</p><p>假设当前答案 $\ge x$, 也就是</p><p>$$C = \frac{ \sum a_i’ }{ \sum b_i’ } \ge x$$</p><p>进一步转化,得</p><p>$$\sum (a_i’ - b_i’ x) \ge 0$$</p><p>然后就可以用二分图最大匹配解决了. 具体地说, 二分图内两两边权 $w_{i, j} = a_{i, j} - b_{i, j} x$, 如果最大权匹配 $\ge 0$ 则当前二分到的 $x$ 合法.</p><p>二分图最大权匹配部分采用 KM 算法, 时间复杂度 $O(n^3 \log w)$. 其中 $w$ 为权值上界.</p><p>突然有一种工程界很喜欢 KM 算法的错觉.</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><p>听说写费用流有点卡常? 我这一个写 KM 的哪知道啊 = =</p><p>以及二分的时候不要玩弄 <code>eps</code>, 因为二分边界写挂调了好久.png</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2003</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-7</span>, INFD = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">fabs</span>(p) &lt; EPS)? <span class="number">0</span>: (p &lt; <span class="number">0</span>? <span class="number">-1</span>: <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> A[MAXN][MAXN], B[MAXN][MAXN];</span><br><span class="line"><span class="keyword">double</span> W[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> KM &#123;</span><br><span class="line">    <span class="keyword">int</span> S[MAXN], T[MAXN], Time;</span><br><span class="line">    <span class="keyword">int</span> left[MAXN];</span><br><span class="line">    <span class="keyword">double</span> Lx[MAXN], Ly[MAXN], slack[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        S[u] = Time;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= n; ++v) <span class="keyword">if</span> (T[v] != Time) &#123;</span><br><span class="line">            <span class="keyword">double</span> d = Lx[u] + Ly[v] - W[u][v];</span><br><span class="line">            <span class="keyword">if</span> (dcmp(d) == <span class="number">0</span>) &#123;</span><br><span class="line">                T[v] = Time;</span><br><span class="line">                <span class="keyword">if</span> (left[v] == <span class="number">-1</span> || dfs(left[v])) <span class="keyword">return</span> left[v] = u, <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> slack[v] = min(d, slack[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> a = INFD;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (T[j] != Time) a = min(a, slack[j]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (S[i] == Time) Lx[i] -= a;</span><br><span class="line">            <span class="keyword">if</span> (T[i] == Time) Ly[i] += a; <span class="keyword">else</span> slack[i] -= a;</span><br><span class="line">            <span class="comment">// 某篇讲 KM 算法的 CSDN 博客这里更新 slack 的时候写挂了 = =</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">KM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            left[i] = <span class="number">-1</span>, Lx[i] = *max_element(W[i]+<span class="number">1</span>, W[i]+<span class="number">1</span>+n), Ly[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) slack[i] = INFD;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                ++Time;</span><br><span class="line">                <span class="keyword">if</span> (!dfs(u)) update(); <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) <span class="keyword">if</span> (~left[u]) ret += W[left[u]][u];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) W[i][j] = A[i][j] - x * B[i][j];</span><br><span class="line">    <span class="keyword">return</span> dcmp(KM::KM()) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) read(A[i][j]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) read(B[i][j]);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">double</span> L = <span class="number">0.0</span>, R = <span class="number">1e6</span>;</span><br><span class="line">    <span class="keyword">while</span> (dcmp(R - L) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">double</span> Mid = (L + R) / <span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(Mid)) L = Mid; <span class="keyword">else</span> R = Mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>, L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「SDOI2017」硬币游戏"><a href="#「SDOI2017」硬币游戏" class="headerlink" title="「SDOI2017」硬币游戏"></a>「SDOI2017」硬币游戏</h3><blockquote><p>字符串题啊, 学提高的时候用哈希, 学省选的时候用 SAM 就够了.</p></blockquote><p>不知道从哪里听来这句屁话 = =</p><h4 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2004" target="_blank" rel="noopener">https://loj.ac/problem/2004</a></li></ul><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p><del>还是 <a href="https://www.cnblogs.com/CQzhangyu/p/7054998.html" target="_blank" rel="noopener">CQzhangyu</a> 讲得好.</del></p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><p><code>0.5 ^ 300 = 4.909093465297727e-91</code></p><p><code>2.0 ^ 300 = 2.037035976334486e+90</code></p><p>你叫我用哪个…</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2004</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">fabs</span>(p) &lt; EPS)? <span class="number">0</span>: (p &lt; <span class="number">0</span>? <span class="number">-1</span>: <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> S[MAXN][MAXN];</span><br><span class="line"><span class="keyword">double</span> pow2[MAXN], A[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AC &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXN = ::MAXN * ::MAXN;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">2</span>][MAXN], fail[MAXN], nidx;</span><br><span class="line">    <span class="keyword">int</span> len[MAXN], pos[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; nidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">val</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp; c)</span> </span>&#123; <span class="keyword">return</span> c == <span class="string">'H'</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span>* S, <span class="keyword">const</span> <span class="keyword">int</span>&amp; idx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = val(S[i]);</span><br><span class="line">            <span class="keyword">if</span> (!ch[c][u]) ch[c][u] = ++nidx;</span><br><span class="line">            u = ch[c][u];</span><br><span class="line">        &#125;</span><br><span class="line">        pos[idx] = u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        fail[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">2</span>; ++c) &#123;</span><br><span class="line">            <span class="keyword">int</span>&amp; v = ch[c][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (v) Q.push(v), fail[v] = <span class="number">1</span>; <span class="keyword">else</span> v = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">2</span>; ++c) &#123;</span><br><span class="line">                <span class="keyword">int</span>&amp; v = ch[c][u];</span><br><span class="line">                <span class="keyword">if</span> (v) Q.push(v), fail[v] = ch[c][fail[u]];</span><br><span class="line">                <span class="keyword">else</span> v = ch[c][fail[u]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pow2[<span class="number">0</span>] = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) pow2[i] = pow2[i<span class="number">-1</span>] * <span class="number">0.5</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>, j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">                u = ch[val(S[i][j])][u], len[u] = j;</span><br><span class="line">            A[i][n + <span class="number">1</span>] = -pow2[m];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> u = pos[j]; u &gt; <span class="number">1</span>; u = fail[u])</span><br><span class="line">                    <span class="keyword">if</span> (len[u]) A[i][j] += pow2[m - len[u]];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>, j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">                u = ch[val(S[i][j])][u], len[u] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) A[n + <span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">        A[n + <span class="number">1</span>][n + <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Gauss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> r = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= n + <span class="number">1</span>; ++j)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(A[j][i]) &gt; <span class="built_in">fabs</span>(A[r][i])) r = j;</span><br><span class="line">        <span class="comment">// assert(dcmp(A[r][i]) != 0);</span></span><br><span class="line">        <span class="keyword">if</span> (r != i) swap(A[r], A[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n + <span class="number">1</span>; ++j) <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">            <span class="keyword">double</span> d = A[j][i] / A[i][i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= n + <span class="number">2</span>; ++k) A[j][k] -= d * A[i][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (dcmp(A[i][i]) != <span class="number">0</span>) A[i][n + <span class="number">2</span>] /= A[i][i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    AC::init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, S[i] + <span class="number">1</span>), AC::insert(S[i], i);</span><br><span class="line">    AC::getFail(), AC::build();</span><br><span class="line">    Gauss();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%.7lf\n"</span>, A[i][n + <span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「SDOI2017」相关分析"><a href="#「SDOI2017」相关分析" class="headerlink" title="「SDOI2017」相关分析"></a>「SDOI2017」相关分析</h3><p>之前听 lxl 讲洛谷网课的时候看他吐槽过 SDOI “那个无聊的东西”, 大概是指的这个吧 (</p><p><del>的确挺无聊的 = =</del></p><h4 id="题目链接-5"><a href="#题目链接-5" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2005" target="_blank" rel="noopener">https://loj.ac/problem/2005</a></li></ul><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>读过高中必修课本的 (忘了是哪本了 = =) 都知道, 询问的 $\hat a$ 可以展开, 当然不知道这个式子也是可推的…</p><p>$$\hat a = \frac{\sum\limits_{i = L} ^ R (x_i - \bar{x})(y_i - \bar{y})}{\sum\limits_{i = L} ^ R (x_i - \bar{x}) ^ 2} = \frac{ \sum\limits_{i=L}^R x_i y_i - n \bar x \bar y }{\sum\limits_{i=L}^R x_i^2 - n \bar x^2}$$</p><p>对于询问, 直接用线段树维护 $\sum {x_i},\ \sum {y_i},\ \sum x_i y_i,\ \sum x_i ^ 2$ 就可以回答了.</p><p>区间加… 把这几个东西加起来再展开就好了.</p><p>$$\sum_{i=L}^R (x_i + S) = \sum_{i=L}^R x_i + (R-L+1) \cdot S$$</p><p>$$\sum_{i=L}^R (y_i + T) = \sum_{i=L}^R y_i + (R-L+1) \cdot T$$</p><p>$$\sum_{i=L}^R (x_i + S) (y_i + T) = \sum_{i=L}^R x_i y_i + T \sum_{i=L}^R x_i + S \sum_{i=L}^R y_i + (R-L+1) \cdot ST$$</p><p>$$\sum_{i=L}^R (x_i + S) ^ 2 = \sum_{i=L}^R x_i^2 + 2S \sum_{i=L}^R x_i + (R-L+1) \cdot S^2$$</p><p>区间赋值… 注意所赋值具有特殊性, 也就是第 $i$ 个位置改成 $i$, 然后再跑一遍区间加的操作就好了.</p><p><del>看错条件多推了一倍的式子, 人没了</del></p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><p>线段树的细节无非是传标记的时候容易挂… 然后就喜闻乐见地挂了.</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2005</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">fabs</span>(p) &lt; EPS)? <span class="number">0</span>: (p &lt; <span class="number">0</span>? <span class="number">-1</span>: <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">s0</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123; <span class="keyword">return</span> R - L + <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">s1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="keyword">return</span> n / <span class="number">2.0</span> * (n + <span class="number">1</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">s1</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123; <span class="keyword">return</span> s1(R) - s1(L - <span class="number">1</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">s2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="keyword">return</span> n / <span class="number">6.0</span> * (n + <span class="number">1</span>) * (<span class="number">2</span> * n + <span class="number">1</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">s2</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123; <span class="keyword">return</span> s2(R) - s2(L - <span class="number">1</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> X[MAXN], Y[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SGT &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc (nd&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc (nd&lt;&lt;1|1)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">        <span class="keyword">double</span> x, x2, y, xy;</span><br><span class="line">        Node() &#123; x = y = xy = <span class="number">0</span>; &#125;</span><br><span class="line">        Node(<span class="keyword">double</span> _x, <span class="keyword">double</span> _x2, <span class="keyword">double</span> _y, <span class="keyword">double</span> _xy): x(_x), x2(_x2), y(_y), xy(_xy) &#123; &#125;</span><br><span class="line">        Node <span class="keyword">operator</span> + (<span class="keyword">const</span> Node&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Node(x + rhs.x, x2 + rhs.x2, y + rhs.y, xy + rhs.xy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (xy - x / s0(L, R) * y) / (x2 - x / s0(L, R) * x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; dat[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">double</span> tagAddX[MAXN &lt;&lt; <span class="number">2</span>], tagAddY[MAXN &lt;&lt; <span class="number">2</span>]; <span class="keyword">bool</span> tagSet[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; nd)</span> </span>&#123; dat[nd] = dat[lc] + dat[rc]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushAdd</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; nd, <span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R, <span class="keyword">const</span> <span class="keyword">double</span>&amp; S, <span class="keyword">const</span> <span class="keyword">double</span>&amp; T)</span> </span>&#123;</span><br><span class="line">        dat[nd].x2 += <span class="number">2.0</span> * S * dat[nd].x + s0(L, R) * S * S;</span><br><span class="line">        dat[nd].xy += T * dat[nd].x + S * dat[nd].y + s0(L, R) * S * T;</span><br><span class="line">        dat[nd].x += s0(L, R) * S;</span><br><span class="line">        dat[nd].y += s0(L, R) * T;</span><br><span class="line">        tagAddX[nd] += S, tagAddY[nd] += T;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushSet</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; nd, <span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R)</span> </span>&#123;</span><br><span class="line">        dat[nd].y = dat[nd].x = s1(L, R);</span><br><span class="line">        dat[nd].x2 = dat[nd].xy = s2(L, R);</span><br><span class="line">        tagSet[nd] = <span class="literal">true</span>, tagAddX[nd] = tagAddY[nd] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; nd, <span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (tagSet[nd]) &#123;</span><br><span class="line">            pushSet(lc, L, Mid), pushSet(rc, Mid+<span class="number">1</span>, R);</span><br><span class="line">            tagSet[nd] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dcmp(tagAddX[nd]) || dcmp(tagAddY[nd])) &#123;</span><br><span class="line">            pushAdd(lc, L, Mid, tagAddX[nd], tagAddY[nd]);</span><br><span class="line">            pushAdd(rc, Mid+<span class="number">1</span>, R, tagAddX[nd], tagAddY[nd]);</span><br><span class="line">            tagAddX[nd] = tagAddY[nd] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> <span class="keyword">void</span>( dat[nd] = Node(X[L], <span class="number">1.0</span> * X[L] * X[L], Y[L], <span class="number">1.0</span> * X[L] * Y[L]) );</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        build(lc, L, Mid), build(rc, Mid+<span class="number">1</span>, R);</span><br><span class="line">        maintain(nd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR, <span class="keyword">const</span> <span class="keyword">double</span>&amp; S, <span class="keyword">const</span> <span class="keyword">double</span>&amp; T)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= L &amp;&amp; R &lt;= opR) <span class="keyword">return</span> pushAdd(nd, L, R, S, T);</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        pushdown(nd, L, R);</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= Mid) Add(lc, L, Mid, opL, opR, S, T);</span><br><span class="line">        <span class="keyword">if</span> (opR &gt; Mid) Add(rc, Mid+<span class="number">1</span>, R, opL, opR, S, T);</span><br><span class="line">        maintain(nd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR, <span class="keyword">const</span> <span class="keyword">double</span>&amp; S, <span class="keyword">const</span> <span class="keyword">double</span>&amp; T)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= L &amp;&amp; R &lt;= opR) <span class="keyword">return</span> pushSet(nd, L, R), pushAdd(nd, L, R, S, T);</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        pushdown(nd, L, R);</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= Mid) Mdy(lc, L, Mid, opL, opR, S, T);</span><br><span class="line">        <span class="keyword">if</span> (opR &gt; Mid) Mdy(rc, Mid+<span class="number">1</span>, R, opL, opR, S, T);</span><br><span class="line">        maintain(nd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= L &amp;&amp; R &lt;= opR) <span class="keyword">return</span> dat[nd];</span><br><span class="line">        pushdown(nd, L, R);</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (opR &lt;= Mid) <span class="keyword">return</span> Qry(lc, L, Mid, opL, opR);</span><br><span class="line">        <span class="keyword">if</span> (opL &gt; Mid) <span class="keyword">return</span> Qry(rc, Mid+<span class="number">1</span>, R, opL, opR);</span><br><span class="line">        <span class="keyword">return</span> Qry(lc, L, Mid, opL, opR) + Qry(rc, Mid+<span class="number">1</span>, R, opL, opR);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> lc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(X[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(Y[i]);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    SGT::build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> opt, L, R, S, T;</span><br><span class="line">        <span class="keyword">static</span> SGT::Node Ans;</span><br><span class="line">        read(opt), read(L), read(R);</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">printf</span>(<span class="string">"%.8lf\n"</span>, SGT::Qry(<span class="number">1</span>, <span class="number">1</span>, n, L, R).calc(L, R)); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: read(S), read(T), SGT::Add(<span class="number">1</span>, <span class="number">1</span>, n, L, R, S, T); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: read(S), read(T), SGT::Mdy(<span class="number">1</span>, <span class="number">1</span>, n, L, R, S, T); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERR\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;考虑到写详解有点花时间, 不写又容易忘 = =, 那就写个大概吧.&lt;/p&gt;
&lt;p&gt;SD 两轮省选 (可能?) 会比较科学一点吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://depletedprism.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>HAOI 2017 大赏</title>
    <link href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/HAOI-2017-sol/"/>
    <id>https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/HAOI-2017-sol/</id>
    <published>2020-03-01T11:37:35.000Z</published>
    <updated>2020-04-09T06:10:52.673Z</updated>
    
    <content type="html"><![CDATA[<hr><p>HAOI 2017 的神秘弱省省选难度.</p><a id="more"></a><p>2017 年的 HAOI (大概? ) 是一天两试, 上午三题下午两题, 于是只有 5 道题了.</p><p>当年还有学长辛酸的故事…</p><h3 id="「HAOI2017」新型城市化"><a href="#「HAOI2017」新型城市化" class="headerlink" title="「HAOI2017」新型城市化"></a>「HAOI2017」新型城市化</h3><h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2276" target="_blank" rel="noopener">https://loj.ac/problem/2276</a></li></ul><h4 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h4><p>给定一张图, 点数为 $n$, 给定 $m$ 条边 <strong>不连</strong>, 满足图可被分成不超过两个完全图.</p><p>现在要加入一条原先不存在的边, 使得加入这条边后, 图的最大团大小至少比原图最大团大小至少增加 $1$.</p><p>求所有满足该性质的边.</p><p>其中, $1 \le n \le 10^4,\ 0 \le m \le \min \{ 1.5 \times 10^5, \frac{1}{2} n (n+1) \}$.</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先可以发现, 给定的图, 也就是给定的不连接的边, 构成一张二分图.</p><p>考虑二分图的一些性质:</p><ol><li>图的最大团 = 补图的最大独立集</li><li>二分图最大独立集 = 点数 - 二分图最小点覆盖</li><li>二分图最小点覆盖 = 二分图最大匹配</li></ol><p>即使没有看出给定图为二分图, 由性质 1 也容易感性理解了.</p><p>根据这些性质, 容易发现我们直接用网络流跑二分图, 那么所求边就是二分图匹配中的必经边.</p><p>又有一些结论:</p><ol><li>二分图匹配必经边在网络中流量为 $1$, 且两端点在 <strong>残量网络</strong> 中属于 <strong>不同</strong> 的强连通分量.</li><li>二分图匹配可行边在网络中流量为 $1$, 且两端点在 <strong>残量网络</strong> 中属于 <strong>相同</strong> 的强连通分量.</li></ol><p>所以, 先将二分图黑白染色, 建图跑二分图最大匹配, 然后在残量网络上跑强连通分量, 最后依次判断给定边是否满足条件就好了.</p><p>时间复杂度为 $O(n + n \sqrt m + n + m + m \log m) = O(n \sqrt m)$.</p><p><del>看来二分图 &amp; 网络流的那一套东西又忘了, 该回去看看了</del></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2276</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span>+<span class="number">5</span>, MAXM = <span class="number">15e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = MAXN, MAXE = MAXN * <span class="number">2</span> + MAXM, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, S, T;</span><br><span class="line">Pii E[MAXM];</span><br><span class="line"><span class="keyword">int</span> id[MAXM], col[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;Pii&gt; Ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXM &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;;</span><br><span class="line">        head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (col[v = edges[i].to] != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            col[v] = <span class="number">3</span> - col[u], dfs(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Dinic &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to, cap, flow; &#125; edges[MAXE &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[MAXV], cur[MAXV], depth[MAXV], vis[MAXV], Time, eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to, cap, <span class="number">0</span> &#125;;</span><br><span class="line">        head[from] = eidx;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[to], from, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">        head[to] = eidx;</span><br><span class="line">        <span class="keyword">return</span> eidx - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        Q.push(S);</span><br><span class="line">        vis[S] = ++Time, depth[S] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">                <span class="keyword">const</span> Edge&amp; e = edges[i];</span><br><span class="line">                <span class="keyword">if</span> (vis[e.to] != Time &amp;&amp; e.cap &gt; e.flow)</span><br><span class="line">                    vis[e.to] = Time, depth[e.to] = depth[u] + <span class="number">1</span>, Q.push(e.to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vis[T] == Time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == T || !a) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">int</span> f, flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>&amp; i = cur[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            Edge&amp; e = edges[i];</span><br><span class="line">            <span class="keyword">if</span> (depth[e.to] == depth[u] + <span class="number">1</span> &amp;&amp; (f = DFS(e.to, min(a, e.cap - e.flow))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                flow += f, a -= f, e.flow += f, edges[i^<span class="number">1</span>].flow -= f;</span><br><span class="line">                <span class="keyword">if</span> (!a) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Maxflow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (BFS()) <span class="built_in">memcpy</span>(cur, head, <span class="keyword">sizeof</span> cur), flow += DFS(S, INF);</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SCC &#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> Dinic;</span><br><span class="line">    <span class="keyword">int</span> dfn[MAXV], low[MAXV], SCCidx[MAXV], SCCcnt, dfs_clock;</span><br><span class="line">    <span class="keyword">int</span> stk[MAXV], top;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        low[u] = dfn[u] = ++dfs_clock, stk[++top] = u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="comment">// 残量</span></span><br><span class="line">            <span class="keyword">if</span> (edges[i].flow == edges[i].cap) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!dfn[v = edges[i].to]) &#123;</span><br><span class="line">                tarjan(v);</span><br><span class="line">                low[u] = min(low[u], low[v]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!SCCidx[v]) low[u] = min(low[u], dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (low[u] == dfn[u]) &#123;</span><br><span class="line">            ++SCCcnt;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = stk[top--];</span><br><span class="line">                SCCidx[x] = SCCcnt;</span><br><span class="line">                <span class="keyword">if</span> (u == x) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n + <span class="number">2</span>; ++u) <span class="keyword">if</span> (!dfn[u]) tarjan(u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> &amp;u = E[i].first, &amp;v = E[i].second;</span><br><span class="line">            <span class="keyword">if</span> (SCCidx[u] == SCCidx[v] || edges[id[i]].flow &lt; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            Ans.push_back(E[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    Graph::init(), Dinic::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m);</span><br><span class="line">    S = n + <span class="number">1</span>, T = n + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        read(u), read(v);</span><br><span class="line">        <span class="keyword">if</span> (u &gt; v) swap(u, v);</span><br><span class="line">        E[i] = Pii(u, v);</span><br><span class="line">        Graph::AddEdge(u, v), Graph::AddEdge(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u)</span><br><span class="line">        <span class="keyword">if</span> (col[u] == <span class="number">0</span>) col[u] = <span class="number">1</span>, Graph::dfs(u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> &amp;u = E[i].first, &amp;v = E[i].second;</span><br><span class="line">        <span class="keyword">if</span> (col[u] == <span class="number">1</span>) id[i] = Dinic::AddEdge(u, v, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (col[u] == <span class="number">2</span>) id[i] = Dinic::AddEdge(v, u, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">        <span class="keyword">if</span> (col[u] == <span class="number">1</span>) Dinic::AddEdge(S, u, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (col[u] == <span class="number">2</span>) Dinic::AddEdge(u, T, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Dinic::Maxflow();</span><br><span class="line">    SCC::solve();</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lu\n"</span>, Ans.size());</span><br><span class="line">    sort(Ans.begin(), Ans.end());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; Ans.size(); ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, Ans[i].first, Ans[i].second);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「HAOI2017」方案数"><a href="#「HAOI2017」方案数" class="headerlink" title="「HAOI2017」方案数"></a>「HAOI2017」方案数</h3><p><del>既然有东方的神秘力量, 那么为什么答案对 998244353 取模…</del></p><h4 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2277" target="_blank" rel="noopener">https://loj.ac/problem/2277</a></li></ul><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p><del>容易看出来这题是计数 DP + 容斥.</del></p><p>先考虑没有障碍怎么做.</p><p>可以发现一个性质: 到达某一个点 $(x,\ y,\ z)$ 的方案数, 只和每个坐标在二进制表示中 $1$ 的个数有关.</p><p>设 $f(x,\ y,\ z)$ 表示某个坐标中 $1$ 的个数分别为 $x,\ y,\ z$, 那么可以写出转移:</p><p>$$f(x,\ y,\ z) = \sum_{i=1}^x \binom{x}{i} f(x - i,\ y,\ z) + \sum_{j=1}^y \binom{y}{j} f(x,\ y - j,\ z) \\ + \sum_{k=1}^z \binom{z}{k} f(x,\ y,\ z - k)$$</p><p>那么 $f(x,\ y,\ z)$ 可以在 $O(\log^ 3 n)$ 的时间内计算. <del>听说数据弱, 这样就有 80 pts?</del></p><p>考虑加上障碍怎么做.</p><p>设 $g(i)$ 表示从出发点到第 $i$ 个障碍的方案数. 如果不考虑其他障碍的影响, 那么直接从 $f(x,\ y,\ z)$ 转移就好了. 如果考虑, 则需要减去 $O \rightarrow j \rightarrow i$ 的方案数, 其中 $O \rightarrow j$ 就是 $g(j)$, $j \rightarrow i$ 可以通过 $f(x,\ y,\ z)$ 计算.</p><p>形式化一点, 即</p><p>$$g(i) = f(x,\ y,\ z) - \sum_{j} g(j) \cdot f(x’, y’, z’)$$</p><p>其中的细节参考代码实现.</p><p>将终点 $(n,\ m,\ r)$ 加入障碍点, 则 $g(o)$ 即为答案.</p><p>时间复杂度 $O(\log^3 n + o \log o + o^2) = O(o^2)$. <del>o &lt;= 1e4 当然是按信仰跑.</del></p><p>为了便于实现以及方便计算, 将所有障碍点按坐标依次从小到大排序. 并通过预处理加速统计某个数二进制下 $1$ 的个数.</p><p><del>感觉以后写 DP 还是发现什么性质就写写方程试试… 万一就对了呢…</del></p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p>由于实现的问题, 所以我的代码跑得很满, 用时成功 loj 倒数第一.</p><p>以及这题数据比较弱, 每次只记录和 $(n,\ m,\ r)$ 有关的障碍, 就可以跑得飞快.</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2277</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">61</span>, BASE = (<span class="number">1</span> &lt;&lt; <span class="number">16</span>) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXO = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pls</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123; <span class="keyword">return</span> (a + b &lt; P)? a + b: a + b - P; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mns</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123; <span class="keyword">return</span> (a - b &gt;= <span class="number">0</span>)? a - b: a - b + P; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Item</span> &#123;</span></span><br><span class="line">    LL x, y, z;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Item&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (x == rhs.x)? ((y == rhs.y)? z &lt; rhs.z: y &lt; rhs.y): x &lt; rhs.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; A[MAXO];</span><br><span class="line"></span><br><span class="line">LL n, m, r, o;</span><br><span class="line"><span class="keyword">int</span> Bit[BASE + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> C[MAXN][MAXN], f[MAXN][MAXN][MAXN], g[MAXO];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过预处理, 计算一个 long long 范围数的 popcount</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">lowbit</span><span class="params">(<span class="keyword">const</span> LL&amp; x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> __brute_popcount(LL x) &#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x &gt; <span class="number">0</span>) ++ret, x -= lowbit(x);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以将其拆为 4 个小于 BASE 的部分统计</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> __block_popcount(<span class="keyword">const</span> LL&amp; x) &#123;</span><br><span class="line">    <span class="keyword">return</span> Bit[x &amp; BASE] + Bit[(x &gt;&gt; <span class="number">16</span>) &amp; BASE] + Bit[(x &gt;&gt; <span class="number">32</span>) &amp; BASE] + Bit[(x &gt;&gt; <span class="number">48</span>) &amp; BASE];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= BASE; ++i) Bit[i] = __brute_popcount(i);</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m), read(r);</span><br><span class="line">    read(o);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= o; ++i) read(A[i].x), read(A[i].y), read(A[i].z);</span><br><span class="line">    A[++o] = (Item)&#123; n, m, r &#125;;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXN; ++i) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j) C[i][j] = (C[i<span class="number">-1</span>][j] + C[i<span class="number">-1</span>][j<span class="number">-1</span>]) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; MAXN; ++x)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; MAXN; ++y)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; MAXN; ++z) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; ++i)</span><br><span class="line">                    f[x][y][z] = pls(f[x][y][z], <span class="number">1L</span>L * f[x-i][y][z] * C[x][i] % P);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= y; ++j)</span><br><span class="line">                    f[x][y][z] = pls(f[x][y][z], <span class="number">1L</span>L * f[x][y-j][z] * C[y][j] % P);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= z; ++k)</span><br><span class="line">                    f[x][y][z] = pls(f[x][y][z], <span class="number">1L</span>L * f[x][y][z-k] * C[z][k] % P);</span><br><span class="line">            &#125;</span><br><span class="line">    sort(A+<span class="number">1</span>, A+<span class="number">1</span>+o);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= o; ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> Item&amp; now = A[i];</span><br><span class="line">        g[i] = f[__block_popcount(now.x)][__block_popcount(now.y)][__block_popcount(now.z)];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">            <span class="keyword">const</span> Item&amp; nxt = A[j];</span><br><span class="line">            <span class="keyword">if</span> ((nxt.x &amp; now.x) != nxt.x || (nxt.y &amp; now.y) != nxt.y || (nxt.z &amp; now.z) != nxt.z) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> x = __block_popcount(now.x ^ nxt.x), y = __block_popcount(now.y ^ nxt.y),</span><br><span class="line">                z = __block_popcount(now.z ^ nxt.z);</span><br><span class="line">            g[i] = mns(g[i], <span class="number">1L</span>L * f[x][y][z] * g[j] % P);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, g[o]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「HAOI2017」字符串"><a href="#「HAOI2017」字符串" class="headerlink" title="「HAOI2017」字符串"></a>「HAOI2017」字符串</h3><p>好久没写 AC 自动机了, 看到这道题人没了 = =</p><h4 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2278" target="_blank" rel="noopener">https://loj.ac/problem/2278</a></li></ul><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>题目中将文本串 $S$ 和多个模式串 $p_i$ 匹配, 容易想到 AC 自动机.</p><p><em>以下涉及到反串的位置, 都是以原串位置为准</em></p><p>考虑题意中的匹配是什么意思. 也就是两个失配位置间隔 $k+1$. 换言之, 假设 $S$ 匹配到了位置 $i$, 那么让 $S$ 以 $i+k+1$ 结尾的反串匹配到当前节点对应模式串 $p$ 的反串就可以了.</p><p>这样不好统计, 我们建出 fail 树, 并在 fail 树上统计.</p><p>对于 AC 自动机的某个节点 $u$, 假设 $S$ 到达 $u$ 时同某个模式串 $p$ 匹配到位置 $i$, 我们要在 $u$ 在子树中找到某个节点 $v$, 设 $v$ 上 $S$ 匹配到第 $j$ 个位置, 则位置 $j + k + 1$ 对应节点, 要在 $p$ 的反串第 $i + k + 1$ 位对应节点的 fail 树内, 询问这样的 $v$ 的个数.</p><p><del>这段话虽然主语混乱, 但是很重要.</del></p><p>这就是一个树上数点的问题了, 可以使用树状数组以及差分解决.</p><p>还有一个问题, 每次计算 $S$ 上位置 $i$ 以及 $i + k + 1$ 的匹配时, 如果位置 $i + k$ 匹配, 那么会算重, 需要单独计算这部分的贡献来去重.</p><p>于是可以得到算法流程:</p><p>对所有 $p_i$ 的正反串建 AC 自动机, 把 $S$ 正反两次丢到 AC 自动机上匹配; 建 fail 树, 记录 $p_i$ 和 $S$ 对答案的影响, 也就是修改和查询操作, 并挂在 fail 树对应节点上; 树上差分统计子树信息即可. 因为要去重, 使用两个 BIT 统计.</p><p>注意特判 $p$ 长度小于等于 $k$ 的情况, 如果不特判只有 20 pts = =</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p>我也想知道为什么我的常数那么大, __stdcall 跑得那么快.</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2278</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">4e5</span>+<span class="number">5</span>, SIGMA = <span class="number">95</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ask</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> type, idx, nd;</span><br><span class="line">    Ask(<span class="keyword">int</span> <span class="keyword">_t</span>, <span class="keyword">int</span> _i, <span class="keyword">int</span> _n): type(<span class="keyword">_t</span>), idx(_i), nd(_n) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, K;</span><br><span class="line"><span class="keyword">char</span> S[MAXN], P[MAXN];</span><br><span class="line"><span class="keyword">int</span> pos[<span class="number">2</span>][MAXN], dfn[MAXN], size[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Ans[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;Ask&gt; Q[MAXN], M[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXN];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx, dfs_clock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;;</span><br><span class="line">        head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        size[u] = <span class="number">1</span>, dfn[u] = ++dfs_clock;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt)</span><br><span class="line">            dfs(v = edges[i].to), size[u] += size[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> AC &#123;</span><br><span class="line">    <span class="keyword">int</span> ch[SIGMA][MAXN], fail[MAXN], nidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; nidx = <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp; u, <span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch[v][u]? ch[v][u]: (ch[v][u] = ++nidx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        fail[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; SIGMA; ++c) &#123;</span><br><span class="line">            <span class="keyword">int</span>&amp; v = ch[c][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (v) Q.push(v), fail[v] = <span class="number">1</span>; <span class="keyword">else</span> v = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; SIGMA; ++c) &#123;</span><br><span class="line">                <span class="keyword">int</span>&amp; v = ch[c][u];</span><br><span class="line">                <span class="keyword">if</span> (v) Q.push(v), fail[v] = ch[c][fail[u]];</span><br><span class="line">                <span class="keyword">else</span> v = ch[c][fail[u]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= AC::nidx; ++i) Graph::AddEdge(fail[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> C[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; d, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = d; i &lt;= Graph::dfs_clock; i += lowbit(i)) C[i] += val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = d; i; i -= lowbit(i)) ret += C[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R)</span> </span>&#123; <span class="keyword">return</span> Qry(R) - Qry(L<span class="number">-1</span>); &#125;</span><br><span class="line">&#125; T[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> Graph;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; Q[u].size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> Ask&amp; q = Q[u][i];</span><br><span class="line">        Ans[q.idx] -= q.type * T[q.type &lt; <span class="number">0</span>].Qry(dfn[q.nd], dfn[q.nd] + size[q.nd] - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; M[u].size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> Ask&amp; m = M[u][i];</span><br><span class="line">        T[m.type &lt; <span class="number">0</span>].Mdy(dfn[m.nd], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edges[i].nxt) solve(edges[i].to);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; Q[u].size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> Ask&amp; q = Q[u][i];</span><br><span class="line">        Ans[q.idx] += q.type * T[q.type &lt; <span class="number">0</span>].Qry(dfn[q.nd], dfn[q.nd] + size[q.nd] - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">val</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>&amp; c)</span> </span>&#123; <span class="keyword">return</span> c - <span class="number">33</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    AC::init(), Graph::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%s%d"</span>, &amp;K, S + <span class="number">1</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> Slgt = (<span class="keyword">int</span>) <span class="built_in">strlen</span>(S + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, P + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> Plgt = (<span class="keyword">int</span>) <span class="built_in">strlen</span>(P + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 80pts = =</span></span><br><span class="line">        <span class="keyword">if</span> (Plgt &lt;= K) &#123; Ans[j] = Slgt - Plgt + <span class="number">1</span>; <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="comment">// AC-automaton</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>, i = <span class="number">1</span>; i &lt;= Plgt; ++i) pos[<span class="number">0</span>][i] = u = AC::insert(u, val(P[i]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>, i = Plgt; i &gt;= <span class="number">1</span>; --i) pos[<span class="number">1</span>][i] = u = AC::insert(u, val(P[i]));</span><br><span class="line">        <span class="comment">// maintain</span></span><br><span class="line">        pos[<span class="number">0</span>][<span class="number">0</span>] = pos[<span class="number">1</span>][Plgt + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Plgt - K; ++i)</span><br><span class="line">            Q[pos[<span class="number">0</span>][i]].push_back(Ask(<span class="number">1</span>, j, pos[<span class="number">1</span>][i + K + <span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Plgt - K; ++i)</span><br><span class="line">            Q[pos[<span class="number">0</span>][i]].push_back(Ask(<span class="number">-1</span>, j, pos[<span class="number">1</span>][i + K]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    AC::getFail(), Graph::dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// match</span></span><br><span class="line">    pos[<span class="number">0</span>][<span class="number">0</span>] = pos[<span class="number">1</span>][Slgt + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Slgt; ++i) pos[<span class="number">0</span>][i] = AC::ch[val(S[i])][pos[<span class="number">0</span>][i - <span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = Slgt; i &gt;= <span class="number">1</span>; --i) pos[<span class="number">1</span>][i] = AC::ch[val(S[i])][pos[<span class="number">1</span>][i + <span class="number">1</span>]];</span><br><span class="line">    <span class="comment">// maintain</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Slgt - K; ++i)</span><br><span class="line">        M[pos[<span class="number">0</span>][i]].push_back(Ask(<span class="number">1</span>, <span class="number">0</span>, pos[<span class="number">1</span>][i + K + <span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Slgt - K; ++i)</span><br><span class="line">        M[pos[<span class="number">0</span>][i]].push_back(Ask(<span class="number">-1</span>, <span class="number">0</span>, pos[<span class="number">1</span>][i + K]));</span><br><span class="line">    solve(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「HAOI2017」八纵八横"><a href="#「HAOI2017」八纵八横" class="headerlink" title="「HAOI2017」八纵八横"></a>「HAOI2017」八纵八横</h3><p>在学线段树分治的时候, 看到这道题是 HAOI 就没有写, 于是去写了 <a href="http://codeforces.com/problemset/problem/938/G" target="_blank" rel="noopener">CF938G Shortest Path Queries</a>.</p><p>看到题目后, ???. 不过那场 EDU 是 18 年的… 估计是撞 idea 了 = =</p><h4 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2312" target="_blank" rel="noopener">https://loj.ac/problem/2312</a></li></ul><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>那么这道题的思路就很显然了, 采用线段树分治, 对时间建线段树, 把边的编号挂在对应的节点上.</p><p>然后考虑如何计算答案. 由于这张图是连通的, 考虑图上的环, 容易发现可以构造出一条从 $1$ 开始又回到 $1$ 的路径, 使得仅有环上的路径经过奇数次.</p><p>那么可以记录环上的路径异或值, 并查询其中可以异或到的最大值. 可以使用并查集以及线性基完成.</p><p>不过这屑题中权值二进制位数是 $10^3$ 级别的, 使用 <code>bitset</code> 即可. 考虑到上面都是一些套路性的东西, 于是这道题的难点就是用 <code>bitset</code> 模拟了. = =</p><p>时间复杂度大概是 $O(q \frac{len}{w} \log q \log n)$ ?</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><p>似乎不用写带撤销线性基? 偷懒每次直接大力复制当前线性基到线段树下一节点…</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2312</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">505</span>, MAXM = <span class="number">2005</span>, MAXL = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stk</span> &#123;</span> <span class="keyword">int</span> fu, fv, size; &#125; stk[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Modify</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, L, R; <span class="built_in">bitset</span>&lt;MAXL&gt; w;</span><br><span class="line">&#125; M[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, q, top;</span><br><span class="line"><span class="keyword">char</span> str[MAXL];</span><br><span class="line"></span><br><span class="line"><span class="built_in">bitset</span>&lt;MAXL&gt; fix(<span class="keyword">char</span>* S) &#123;</span><br><span class="line">    <span class="built_in">bitset</span>&lt;MAXL&gt; ret;</span><br><span class="line">    <span class="keyword">int</span> lgt = (<span class="keyword">int</span>) <span class="built_in">strlen</span>(S);</span><br><span class="line">    reverse(S, S + lgt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lgt; ++i) ret[i] = S[i] - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinerBasis</span> &#123;</span></span><br><span class="line">    <span class="built_in">bitset</span>&lt;MAXL&gt; A[MAXL];</span><br><span class="line"></span><br><span class="line">    LinerBasis() &#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXL; ++i) A[i].reset(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">bitset</span>&lt;MAXL&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXL<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) <span class="keyword">if</span> (x[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!A[i].any()) &#123; A[i] = x; <span class="keyword">break</span>; &#125;</span><br><span class="line">            x ^= A[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Qry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// max xor</span></span><br><span class="line">        <span class="built_in">bitset</span>&lt;MAXL&gt; ret; ret.reset();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXL<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) <span class="keyword">if</span> (!ret[i]) ret ^= A[i];</span><br><span class="line">        <span class="comment">// output</span></span><br><span class="line">        <span class="keyword">int</span> i = MAXL<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; !ret[i]) --i;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span>) <span class="built_in">putchar</span>(ret[i--] + <span class="string">'0'</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> DSU &#123;</span><br><span class="line">    <span class="keyword">int</span> fa[MAXN], size[MAXN];</span><br><span class="line">    <span class="built_in">bitset</span>&lt;MAXL&gt; dist[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) fa[i] = i, size[i] = <span class="number">1</span>, dist[i].reset();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">findfa</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (u != fa[u]) u = fa[u];</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="built_in">bitset</span>&lt;MAXL&gt; findist(<span class="keyword">int</span> u) &#123;</span><br><span class="line">        <span class="built_in">bitset</span>&lt;MAXL&gt; ret; ret.reset();</span><br><span class="line">        <span class="keyword">while</span> (u != fa[u]) ret ^= dist[u], u = fa[u];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SGT &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc (nd&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc (nd&lt;&lt;1|1)</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> DSU;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dat[MAXM &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR, <span class="keyword">const</span> <span class="keyword">int</span>&amp; idx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= L &amp;&amp; R &lt;= opR) <span class="keyword">return</span> <span class="keyword">void</span>( dat[nd].push_back(idx) );</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= Mid) Mdy(lc, L, Mid, opL, opR, idx);</span><br><span class="line">        <span class="keyword">if</span> (opR &gt; Mid) Mdy(rc, Mid+<span class="number">1</span>, R, opL, opR, idx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Divide</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, LinerBasis S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L &gt; R) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> k = top;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; dat[nd].size(); ++i) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span>&amp; idx = dat[nd][i];</span><br><span class="line">            <span class="keyword">int</span> fu = findfa(M[idx].u), fv = findfa(M[idx].v);</span><br><span class="line">            <span class="built_in">bitset</span>&lt;MAXL&gt; w = M[idx].w ^ findist(M[idx].u) ^ findist(M[idx].v);</span><br><span class="line">            <span class="keyword">if</span> (fu == fv) S.insert(w);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (size[fu] &lt; size[fv]) swap(fu, fv);</span><br><span class="line">                fa[fv] = fu, size[fu] += size[fv], dist[fv] = w;</span><br><span class="line">                stk[++top] = (Stk)&#123; fu, fv, size[fv] &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (L == R) S.Qry();</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">            Divide(lc, L, Mid, S), Divide(rc, Mid+<span class="number">1</span>, R, S);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (top &gt; k) &#123;</span><br><span class="line">            Stk u = stk[top--];</span><br><span class="line">            dist[u.fv].reset(), fa[u.fv] = u.fv, size[u.fu] -= u.size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> lc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    LinerBasis S;</span><br><span class="line">    DSU::init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>, &amp;u, &amp;v, str);</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">namespace</span> DSU;</span><br><span class="line">        <span class="keyword">int</span> fu = findfa(u), fv = findfa(v);</span><br><span class="line">        <span class="built_in">bitset</span>&lt;MAXL&gt; w = fix(str) ^ findist(u) ^ findist(v);</span><br><span class="line">        <span class="keyword">if</span> (fu == fv) S.insert(w);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (size[fu] &lt; size[fv]) swap(fu, fv);</span><br><span class="line">            fa[fv] = fu, size[fu] += size[fv], dist[fv] = w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    S.Qry();</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="comment">// 指定编号就很难受 = =</span></span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>, ex = <span class="number">550</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> x, y, k; <span class="keyword">static</span> <span class="keyword">char</span> opt[<span class="number">16</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, opt);</span><br><span class="line">        <span class="keyword">switch</span> (opt[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>, &amp;x, &amp;y, str);</span><br><span class="line">                M[++idx] = (Modify)&#123; x, y, i, <span class="number">-1</span>, fix(str) &#125;;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>: <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k), M[k].R = i - <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;k, str);</span><br><span class="line">                M[++ex] = M[k];</span><br><span class="line">                M[ex].R = i - <span class="number">1</span>, M[k].L = i, M[k].w = fix(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERR\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= idx; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (M[i].R == <span class="number">-1</span>) M[i].R = q;</span><br><span class="line">        <span class="keyword">if</span> (M[i].L &lt;= M[i].R) SGT::Mdy(<span class="number">1</span>, <span class="number">1</span>, q, M[i].L, M[i].R, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">551</span>; i &lt;= ex; ++i)</span><br><span class="line">        <span class="keyword">if</span> (M[i].L &lt;= M[i].R) SGT::Mdy(<span class="number">1</span>, <span class="number">1</span>, q, M[i].L, M[i].R, i);</span><br><span class="line">    <span class="comment">// DSU::init();</span></span><br><span class="line">    SGT::Divide(<span class="number">1</span>, <span class="number">1</span>, q, S);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「HAOI2017」供给侧改革"><a href="#「HAOI2017」供给侧改革" class="headerlink" title="「HAOI2017」供给侧改革"></a>「HAOI2017」供给侧改革</h3><p>出题人终于承认数据是他用脚随的了.</p><h4 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h4><ul><li><a href="https://loj.ac/problem/2313" target="_blank" rel="noopener">https://loj.ac/problem/2313</a></li></ul><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p><del>根据题目中 “串 S 中的每一位都是在 0 和 1 之间随机产生的” 可以猜测, 这道题适合瞎搞.</del></p><p>既然数据随机, 那么很多不对劲的算法就可以拿过来用了.</p><p><del>似乎可以直接猜最长 LCP 长度然后大力枚举?</del></p><p>还是考虑一种看起来对劲的做法, 先建出原串的后缀树. 这里采用对反串建 SAM, 后缀链接就是原串的后缀树了.</p><p>将所有询问离线, 按 $R$ 从小到大排序, 扫描 $S$ 的每一位, 每次在后缀树上更新一条链, 在后缀树上维护最长 LCP 大小 <code>MaxLCP</code>, 以及节点和前缀长度对应到 $S$ 上的最靠后位置, 分别记作 <code>idx[u]</code> 和 <code>Lidx[l]</code>.</p><p>如果当前扫描位置包含了某个询问的区间, 就把这个询问拿出来计算答案. 从大到小枚举最长 LCP 长度, 如果当前长度 $i$ 对应的 <code>Lidx[i]</code> 比记录的上一次更新位置 <code>lst</code> 要大就更新答案.</p><p>由于答案的单调性, 也就是 $[L,\ R]$ 的答案一定大于等于 $[L+1,\ R],\ \ldots,\ [R-1,\ R]$, 所以分块计算的正确性可以得到保证.</p><p>时间复杂度 $O(\texttt{玄学})$.</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOJ #2313</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ask</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> idx, L, R;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Ask&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R &lt; rhs.R || (R == rhs.R &amp;&amp; L &lt; rhs.L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">char</span> S[MAXN];</span><br><span class="line"><span class="keyword">int</span> pos[MAXN], Ans[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SAM &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXN = ::MAXN &lt;&lt; <span class="number">1</span>, SIGMA = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> ch[SIGMA][MAXN], lnk[MAXN], len[MAXN], nidx, last;</span><br><span class="line">    <span class="keyword">int</span> idx[MAXN], Lidx[MAXN], MaxLCP;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; nidx = last = <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nd = ++nidx, p = last;</span><br><span class="line">        len[nd] = len[last] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p &amp;&amp; !ch[val][p]) ch[val][p] = nd, p = lnk[p];</span><br><span class="line">        <span class="keyword">if</span> (!p) lnk[nd] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> q = ch[val][p];</span><br><span class="line">            <span class="keyword">if</span> (len[q] == len[p] + <span class="number">1</span>) lnk[nd] = q;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> nxt = ++nidx;</span><br><span class="line">                len[nxt] = len[p] + <span class="number">1</span>, lnk[nxt] = lnk[q];</span><br><span class="line">                ch[<span class="number">0</span>][nxt] = ch[<span class="number">0</span>][q], ch[<span class="number">1</span>][nxt] = ch[<span class="number">1</span>][q];</span><br><span class="line">                <span class="keyword">while</span> (p &amp;&amp; ch[val][p] == q) ch[val][p] = nxt, p = lnk[p];</span><br><span class="line">                lnk[q] = lnk[nd] = nxt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> last = nd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Upd</span><span class="params">(<span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u = pos[R]; u &gt; <span class="number">1</span>; u = lnk[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (idx[u]) &#123;</span><br><span class="line">                MaxLCP = max(MaxLCP, len[u]);</span><br><span class="line">                Lidx[len[u]] = max(Lidx[len[u]], idx[u]);</span><br><span class="line">            &#125;</span><br><span class="line">            idx[u] = max(idx[u], R);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> L)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> lst = L - <span class="number">1</span>, i = MaxLCP; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            <span class="keyword">if</span> (lst &lt; Lidx[i]) ret += i * (Lidx[i] - lst), lst = Lidx[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    SAM::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>, &amp;n, &amp;q, S+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> L, R, i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;L, &amp;R), Q[i] = (Ask)&#123; i, L, R &#125;;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) pos[i] = SAM::insert(S[i] - <span class="string">'0'</span>);</span><br><span class="line">    sort(Q+<span class="number">1</span>, Q+<span class="number">1</span>+q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">1</span>, i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        SAM::Upd(i);</span><br><span class="line">        <span class="keyword">while</span> (idx &lt;= q &amp;&amp; Q[idx].R &lt;= i)</span><br><span class="line">            Ans[Q[idx].idx] = SAM::Qry(Q[idx].L), ++idx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;HAOI 2017 的神秘弱省省选难度.&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://depletedprism.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>「Luogu P2664」树上游戏</title>
    <link href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/oj/luogu-P2664/"/>
    <id>https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/oj/luogu-P2664/</id>
    <published>2020-02-28T13:40:09.000Z</published>
    <updated>2020-04-09T06:10:52.677Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>题目链接: <a href="https://www.luogu.com.cn/problem/P2664" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P2664</a></li></ul><p>这是一道点分治好题, 至少我现在这么认为. = =</p><a id="more"></a><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><ol><li>点分治</li></ol><h4 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h4><p>考虑点分治. <del>虽然隔壁 O(n) 做法又大又圆但是不管</del></p><blockquote><p>点分治在处理树上路径信息的时候, 把路径分为两类: 一类不经过根节点, 一类经过. 后者为一端点是根节点的路径, 或者可以看作两条端点为根节点的路径拼接而来.</p><p>所以可以依次遍历子树, 每次单独考虑子树中的信息和其他子树信息之间的影响, 从而更新答案.</p></blockquote><p>在处理这道题的时候我们沿用这个思路. 也就是说, 上面是两段废话, 和这题毫无关系.</p><p>为了表述方便, 记 <code>C[u]</code> 为节点 $u$ 的颜色, <code>size[u]</code> 为节点 $u$ 的子树大小.</p><p>可以观察到一个事实, 单独考虑根节点 $root$ 一个子树中的某一个节点 $u$, ($u$ 满足在 $root$ 到 $u$ 的路径中 <code>C[u]</code> 第一次出现), 那么这个节点 $u$ 可以对其他子树中的节点 $v$, ($v$ 满足 $v$ 到 $root$ 路径上不包含 <code>C[u]</code>, 有 <code>size[u]</code> 的贡献.</p><p>正确性显然. 单独考虑每个颜色的贡献, 因为 $u$ 的颜色只在 $u,\ v$ 路径上出现过一次, 所以 $u$ 的子树都可以同 $v$ 构成一个点对, $u$ 的颜色对 $v$ 做一次贡献, 共 <code>size[u]</code>.</p><p>考虑如何在点分治的过程中维护这个东西.</p><p>先维护满足以上条件 $u$ 的子树大小和, (也就是 $u$ 满足 $root$ 到 $u$ 的路径中 (不包括 $root$), $u$ 的颜色第一次出现), 以颜色为下标, 记作 $\operatorname{W}(c) = \sum\limits_{\operatorname{C}(u) = c} \operatorname{size}(u)$.</p><p>并记 <code>tot</code> 为所有 <code>W[c]</code> 的和.</p><ul><li><p>对于根节点, 自身的颜色可以给自己 <code>size[root]</code> 的贡献, 其他节点可以给根节点 <code>tot - W[C[root]]</code> 的贡献.</p><p>其实很好理解, 因为自己的颜色已经计算过了, 自然减掉就好了.</p></li><li><p>对于以 $u$ 为根子树中的点 $v$, 考虑其他子树对该子树的影响.</p><p> 记 <code>num</code> 为 $v$ 到 $root$ 路径 (不包括 $root$) 上的颜色数量.</p><p> 沿路更新 <code>num</code>, <code>tot</code> 的值: 遇到新颜色, 将 <code>tot</code> 减去 <code>W[C[v]]</code>, 并将 <code>num</code> 增加 1.</p><p> 那么对 $v$ 的贡献为 <code>tot + (size[root] - size[u]) * num</code>.</p><p> 也就是满足开始所说的条件的其他子树中的点, 对 $v$ 的答案做贡献; 以及其他子树中的点经过 <code>num</code> 个点来到 $v$, 对 $v$ 的答案做贡献.</p><p> 注意回溯的时候把改变的 <code>tot</code> 以及 <code>num</code> 改回来. = =</p></li></ul><p>那么, 为什么不会算重呢?</p><p><del>实际上计算贡献的方式, 每一步都对应树上不同形式的路径, 细节留给读者思考.</del></p><p>对于根节点的统计, 考虑的是当前分治范围内的子树对其的贡献; 对于子树中节点的统计, 考虑的是其他子树对其的影响, 而不考虑子树内部的贡献, 两者互不影响.</p><p>综上, 可以得到如下的算法流程:</p><ol><li><p>以当前重心为根, DFS 整棵树, 维护 <code>size[u]</code>, <code>W[c]</code>.</p></li><li><p>维护根节点的答案, <code>Ans[root] += tot - W[C[root]] + size[root]</code>.</p></li><li><p>遍历根节点子树, 将当前节点的贡献减去, 计算当前子树答案, <code>Ans[v] += tot + (size[root] - size[v]) * num</code>, 再加回当前节点贡献.</p></li><li><p>清空记录的信息.</p></li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Luogu P2664</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> C[MAXN];</span><br><span class="line">LL Ans[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;;</span><br><span class="line">        head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> TreeDivide &#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> Graph;</span><br><span class="line">    <span class="keyword">bool</span> vis[MAXN];</span><br><span class="line">    <span class="keyword">int</span> cnt[MAXN], num;</span><br><span class="line">    LL W[MAXN], tot, Y;</span><br><span class="line">    <span class="keyword">int</span> Balance[MAXN], size[MAXN], subsize, ct;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)</span> </span>&#123; subsize = x, Balance[ct = <span class="number">0</span>] = MAXN; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findCt</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        Balance[u] = <span class="number">0</span>, size[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) == fa || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">            findCt(v, u), size[u] += size[v];</span><br><span class="line">            Balance[u] = max(Balance[u], size[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        Balance[u] = max(Balance[u], subsize - size[u]);</span><br><span class="line">        <span class="keyword">if</span> (Balance[u] &lt; Balance[ct]) ct = u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 1</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        ++cnt[C[u]], size[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) == fa || vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">            dfs(v, u), size[u] += size[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt[C[u]] == <span class="number">1</span>) tot += size[u], W[C[u]] += size[u];</span><br><span class="line">        --cnt[C[u]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 3</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">subDfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        ++cnt[C[u]];</span><br><span class="line">        <span class="keyword">if</span> (cnt[C[u]] == <span class="number">1</span>) tot -= W[C[u]], ++num;</span><br><span class="line">        Ans[u] += tot + Y * num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt)</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) != fa &amp;&amp; !vis[v]) subDfs(v, u);</span><br><span class="line">        <span class="keyword">if</span> (cnt[C[u]] == <span class="number">1</span>) tot += W[C[u]], --num;</span><br><span class="line">        --cnt[C[u]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 2 --&gt; 3</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">const</span> <span class="keyword">int</span>&amp; type)</span> </span>&#123;</span><br><span class="line">        ++cnt[C[u]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt)</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) != fa &amp;&amp; !vis[v]) Mdy(v, u, type);</span><br><span class="line">        <span class="keyword">if</span> (cnt[C[u]] == <span class="number">1</span>) tot += <span class="number">1L</span>L * type * size[u], W[C[u]] += <span class="number">1L</span>L * type * size[u];</span><br><span class="line">        --cnt[C[u]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 4</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        W[C[u]] = cnt[C[u]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt)</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) != fa &amp;&amp; !vis[v]) clear(v, u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Divide</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// now</span></span><br><span class="line">        <span class="comment">// Step 1</span></span><br><span class="line">        dfs(u, <span class="number">-1</span>);</span><br><span class="line">        <span class="comment">// Step 2</span></span><br><span class="line">        Ans[u] += tot - W[C[u]] + size[u];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[v = edges[i].to]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// Step 2 --&gt; 3</span></span><br><span class="line">            ++cnt[C[u]], tot -= size[v], W[C[u]] -= size[v];</span><br><span class="line">            Mdy(v, u, <span class="number">-1</span>);</span><br><span class="line">            <span class="comment">// Step 3</span></span><br><span class="line">            --cnt[C[u]], Y = size[u] - size[v];</span><br><span class="line">            subDfs(v, u);</span><br><span class="line">            ++cnt[C[u]], tot += size[v], W[C[u]] += size[v];</span><br><span class="line">            Mdy(v, u, <span class="number">1</span>);</span><br><span class="line">            --cnt[C[u]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Step 4</span></span><br><span class="line">        num = tot = <span class="number">0</span>, clear(u, <span class="number">-1</span>);</span><br><span class="line">        <span class="comment">// nxt</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[v = edges[i].to]) <span class="keyword">continue</span>;</span><br><span class="line">            init(size[v]), findCt(v, <span class="number">-1</span>), Divide(ct);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123; init(n), findCt(<span class="number">1</span>, <span class="number">-1</span>), Divide(ct); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    Graph::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(C[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        read(u), read(v), Graph::AddEdge(u, v), Graph::AddEdge(v, u);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    TreeDivide::solve();</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li>Treeloveswater, 洛谷题解, <a href="https://www.luogu.com.cn/blog/user24559/solution-p2664" target="_blank" rel="noopener">https://www.luogu.com.cn/blog/user24559/solution-p2664</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;题目链接: &lt;a href=&quot;https://www.luogu.com.cn/problem/P2664&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.luogu.com.cn/problem/P2664&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是一道点分治好题, 至少我现在这么认为. = =&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://depletedprism.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="Graph" scheme="https://depletedprism.github.io/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>「NOI2018」屠龙勇士 题解</title>
    <link href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/oj/luogu-P4774/"/>
    <id>https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/oj/luogu-P4774/</id>
    <published>2020-02-27T13:11:04.000Z</published>
    <updated>2020-04-09T06:10:52.697Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>NOI 又不怎么考数论题.</p><p>from 某神仙</p></blockquote><ul><li>题目链接: <a href="https://www.luogu.com.cn/problem/P4774" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P4774</a></li></ul><p><del>最近好颓啊 = =, 写题又不想自己写, 学东西又不能静下来好好学</del></p><p>这是一道拓展中国剩余定理的模板题, 由此发现之前学的 Ex CRT 很假, 所以来整理一下.</p><a id="more"></a><p>这还是一道阅读理解题 = =.</p><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><ol><li>基础数论</li><li>拓展中国剩余定理</li></ol><h4 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h4><p>记对第 $i$ 个巨龙使用剑的攻击力为 $A_i$.</p><p>容易发现, $A_i$ 的值其实很好确定, 直接在 <code>multiset</code> 上二分即可. 那么, 现在的问题为</p><p>给定 $a_i,\ A_i,\ p_i$, 有</p><p>$$<br>\begin{equation}<br>\left \{<br>    \begin{array}{ccc} a_1 - A_1 x &amp;\equiv &amp; 0 \pmod {p_1} \\ a_2 - A_2 x &amp;\equiv &amp; 0 \pmod {p_2} \\ &amp;\vdots&amp; \\ a_n - A_n x &amp;\equiv &amp; 0 \pmod {p_n} \end{array}<br>\right.<br>\end{equation}<br>$$</p><p>求满足条件的最小 $x$, 其中 $p_i$ 不一定为互质.</p><p>其实这只是一个 Ex CRT, 把式子稍微转换一下, 得</p><p>$$x \equiv a_i \cdot A_i^{-1} \pmod {p_i}$$</p><p>这就和模板题完全一样了, 注意到 $p_i$ 并不是质数, 求乘法逆元的时候跑 exgcd 就好了. 另外会出现无解的情况, 在下文会细谈.</p><p>现在问题已经解决了大半, 但是有一些特判不能忽略.</p><p>首先考虑无解. 一番分析之后可以发现, 无解有两种情况:</p><ul><li><p>化简同余式时无解</p><p>考虑化简的过程, 我们把 $A_i x \equiv a_i \pmod {p_i}$ 化成不定方程的形式, 即</p><p>$$A_i x + y p_i = a_i$$</p><p>根据裴蜀定理, 该方程有解需要满足 $\gcd(A_i,\ p_i) \mid a_i$, 否则无解.</p><p>虽然无解的情况已经解决了, 不妨顺水推舟, 把化简的过程写完.</p><p>记 $g = \gcd(A_i,\ p_i)$, 于是两边同除 $g$, 有</p><p>$$\frac{A_i}{g} x + \frac{p_i}{g} y = \frac{a_i}{g}$$</p><p>记 $A_i^{-1}$ 为模 $p_i$ 意义下的逆元, 整理, 得</p><p>$$x \equiv \frac{a_i}{g}\cdot A_i^{-1}\pmod{ \frac{p_i}{g} }$$</p></li><li><p>合并同余式时无解</p><p>考虑两同余式转换为不定方程后相减, 和上一情况同理.</p></li></ul><p>其次考虑题目的特殊性质.</p><p>特性 2 没什么好说的, 和文末提示 “你所用到的中间结果可能很大，注意保存中间结果的变量类型” 一样, 要注意每个同余方程模数的数量级都在 $10^{12}$, 建议使用 <code>long long</code> 以及龟速乘.</p><p>考虑特性 1 的反例, 也就是 $a_i &gt; p_i$, 会对以上的过程产生什么影响.</p><p>如果存在一个 $x$, 满足 $A_i x = a_i - p_i$, 依然满足 $A_i x \equiv a_i \pmod {p_i}$, 但显然不满足题意 = =</p><p>幸运的是, 不满足特性 1 的数据点另外满足 $p_i = 1$, 此时答案就是</p><p>$$\max _{i = 1} ^n \{\ \lceil \dfrac{a_i}{A_i} \rceil\ \}$$</p><p><del>放到题目背景里就是一直砍, 一直砍</del></p><p>那么这道题就做完了 = =.</p><p>比较良心的是, 大样例 (from loj) 存在部分数据满足这几个特殊性质.</p><p>作为 Day2 T1 (应该? ) 算是送温暖吧, 但对于我这种背板选手一发 15 pts 还是算了 = =.</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Luogu P4774</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">multiset</span>&lt;LL&gt;::iterator IT;</span><br><span class="line"><span class="comment">// 准备迎接 CCF 的省选了 = =</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">smul</span><span class="params">(LL base, LL b, LL m)</span> </span>&#123;</span><br><span class="line">    LL ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ret = (ret + base) % m;</span><br><span class="line">        base = (base + base) % m, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(LL a, LL b, LL&amp; d, LL&amp; x, LL&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) d = a, x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> exgcd(b, a % b, d, y, x), y -= a / b * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">multiset</span>&lt;LL&gt; S;</span><br><span class="line">LL A[MAXN], a[MAXN], p[MAXN], w[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// pre done</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">static</span> LL x, d, y;</span><br><span class="line">        exgcd(A[i], p[i], d, x, y);</span><br><span class="line">        <span class="keyword">if</span> (a[i] % d != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        p[i] /= d;</span><br><span class="line">        A[i] = smul(a[i] / d, (x % p[i] + p[i]) % p[i], p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// extra CRT</span></span><br><span class="line">    LL ret = A[<span class="number">1</span>], M = p[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">static</span> LL x, y, c, d, mod;</span><br><span class="line">        c = ((A[i] - ret) % p[i] + p[i]) % p[i];</span><br><span class="line">        exgcd(M, p[i], d, x, y);</span><br><span class="line">        <span class="keyword">if</span> (c % d != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        mod = p[i] / d, x = smul(x, c / d, mod);</span><br><span class="line">        ret += x * M, M *= mod, ret = (ret % M + M) % M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">p1solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LL ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ret = max(ret, (a[i] + A[i] - <span class="number">1</span>) / A[i]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> Ti; read(Ti);</span><br><span class="line">    <span class="keyword">while</span> (Ti--) &#123;</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        S.clear();</span><br><span class="line">        <span class="keyword">bool</span> p1 = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        read(n), read(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(a[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(p[i]), p1 &amp;= p[i] == <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(w[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x, i = <span class="number">1</span>; i &lt;= m; ++i) read(x), S.insert(x);</span><br><span class="line">        <span class="comment">// pre done</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            IT ite = (a[i] &lt; *S.begin())? S.begin(): (--S.upper_bound(a[i]));</span><br><span class="line">            A[i] = *ite;</span><br><span class="line">            S.erase(ite), S.insert(w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// output</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, p1? p1solve(): solve());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;NOI 又不怎么考数论题.&lt;/p&gt;
&lt;p&gt;from 某神仙&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;题目链接: &lt;a href=&quot;https://www.luogu.com.cn/problem/P4774&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.luogu.com.cn/problem/P4774&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;del&gt;最近好颓啊 = =, 写题又不想自己写, 学东西又不能静下来好好学&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;这是一道拓展中国剩余定理的模板题, 由此发现之前学的 Ex CRT 很假, 所以来整理一下.&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://depletedprism.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="Number Theory" scheme="https://depletedprism.github.io/tags/Number-Theory/"/>
    
  </entry>
  
  <entry>
    <title>「UVa-10572」Black &amp; White 题解</title>
    <link href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/oj/UVA-10572/"/>
    <id>https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/oj/UVA-10572/</id>
    <published>2020-02-24T12:27:59.000Z</published>
    <updated>2020-03-13T05:41:27.411Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>最后一步判断最为关键, 也最容易想错… 请读者思考如何区分这两种情况.</p></blockquote><ul><li>题目链接: <a href="https://vjudge.net/problem/UVA-10572" target="_blank" rel="noopener">https://vjudge.net/problem/UVA-10572</a></li></ul><p><em>由于某些原因, 链接指向的其实是 vjudge</em></p><p><del>毒瘤啊!</del></p><p>其实是常规的插头 DP 维护棋盘格连通性的问题, 第一次见感觉很新鲜, 然后… 就自闭了. = =</p><a id="more"></a><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>给定一个部分黑白染色的 $n \times m$ 棋盘, 现在给出两种限制</p><ol><li>任意 $2 \times 2$ 的网格不会全黑或者全白.</li><li><strong>所有黑格四连通, 所有白格四连通</strong>.</li></ol><p>现在要把所有的棋盘染色, 求满足以上限制的方案数.</p><h4 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h4><p>容易发现这是一道插头 DP / 轮廓线 DP, 我们依次考虑两种限制.</p><p>对于题目给定的颜色, 容易发现这个限制很好处理, 只不过是在已染色位置按照给定颜色转移.</p><p>对于第一种限制, 容易发现只用记录 “当前转移位置” 的左上棋盘的颜色即可. 这样转移的时候, 抛弃掉引起冲突的颜色就好了.</p><p>对于第二种限制, 则需要考虑每个点的连通情况. 考虑在轮廓线步步推进的过程中, 刚开始不连通的区域可能在某处得到连通, 所以在转移当前状态时, 显然不能在要求当前轮廓线一直保持两种颜色四连通的状态.</p><p><del>一开始没看到第二种限制, 整个人傻掉了</del></p><p>那怎么办呢? 考虑加一些状态, 记录当前轮廓线上每个位置所属的连通分量编号. 暂且不考虑如何记录这个编号, 先来考虑记录之后如何转移, 以及正确性.</p><p>沿用普通的插头 DP 思路, 对于当前状态, 枚举当前位置要放置的颜色, 排除掉已有颜色, 以及 $2 \times 2$ 方格的限制. 新加入棋盘格的连通分量编号呢? 有两种情况:</p><ol><li><p>当前棋盘格颜色和左侧 / 上方棋盘格颜色相同</p><p>此种情况可以通过对连通分量编号进行简单合并解决.</p></li><li><p>当前棋盘格颜色和<strong>上方</strong>棋盘格颜色<strong>不同</strong></p><p>重点考虑这个情况. 为什么要重点分析? 因为当前棋盘格位置上方的棋盘格即将离开轮廓线, 以后就考虑不到了, 但是题目要求颜色各自是四连通的. 如果直接把她抛弃, 那么就… 人没了. = =</p><p>经过思考可以得出, 在轮廓线上还存在上方棋盘格所对应的连通分量就不需要额外考虑这一点了, 即, 可以直接把这个状态扔掉.</p><p>此时我们在状态中记录黑白两色连通分量个数, 并引入 “钦定选择颜色”. 这样, 转移如下:</p><ul><li><p>如果上方棋盘格颜色所属的连通分量个数 $&gt; 1$, 说明以后没有机会再把这些连通分量连接起来了, 放弃吧</p></li><li><p>如果上方棋盘格颜色所属的连通分量满足题目限制, 那么把剩下的所有格子涂满, 涂成当前棋盘格颜色就好了.</p><p>注意到这样做的条件为, 剩下未填满的行数小于 $2$, 否则直接填满无法满足限制 1.</p></li></ul></li></ol><p>现在再来考虑如何记录连通分量的编号. 常用的方法有: 最小表示法, 以及广义括号法. 这里只考虑最小表示法, 虽然另一种方法更快一点…</p><p>所谓 “最小表示法”, 就是用字典序最小的方法把所有连通分量重标号, 然后没了. 注意每次都要把状态这样整理一下.</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>参考了刘汝佳先生的实现…</p><p>毕竟很少有那样清晰的代码和完整的注释了. = =</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UVA-10572</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> ch[] = &#123; <span class="string">'o'</span>, <span class="string">'#'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, exist;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">unsigned</span>, <span class="keyword">int</span>&gt; f[MAXN][MAXN][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> G[MAXN][MAXN+<span class="number">1</span>], Ans[MAXN][MAXN], Now[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">State</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> c[MAXN], g[MAXN], cnt[<span class="number">2</span>], UL, tot;</span><br><span class="line"></span><br><span class="line">    State() &#123; <span class="built_in">memset</span>(<span class="keyword">this</span>, <span class="number">0</span>, <span class="keyword">sizeof</span> *<span class="keyword">this</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最小表示法</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Normalize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> rep[MAXN + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memset</span>(rep, <span class="number">-1</span>, <span class="keyword">sizeof</span> rep);</span><br><span class="line">        tot = cnt[<span class="number">0</span>] = cnt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rep[g[i]] &lt; <span class="number">0</span>) rep[g[i]] = tot++, ++cnt[c[i]];</span><br><span class="line">            g[i] = rep[g[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并: 把 from 对应的连通分量编号改为 to</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> to, <span class="keyword">int</span> from)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (from == to) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) <span class="keyword">if</span> (g[i] == from) g[i] = to;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编码: 最大值 + 1 = 16 ^ m = 2 ^ (4 * 8) = 2 ^ 32, 正好 unsigned int</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">unsigned</span> <span class="title">encode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) ret = ret * <span class="number">16</span> + c[i] * <span class="number">8</span> + g[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, State&amp; S, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (col == m) ++row, col = <span class="number">0</span>;</span><br><span class="line">    S.Normalize();</span><br><span class="line">    <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (S.cnt[<span class="number">0</span>] &gt; <span class="number">1</span> || S.cnt[<span class="number">1</span>] &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 记录方案</span></span><br><span class="line">        <span class="keyword">if</span> (!exist) &#123;</span><br><span class="line">            exist = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) Ans[i][j] = Now[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 一个剪枝: 如果左边颜色和上方颜色不同, 那么左上角的颜色就不重要了</span></span><br><span class="line">    <span class="keyword">if</span> (row &gt; <span class="number">0</span> &amp;&amp; col &gt; <span class="number">0</span> &amp;&amp; S.c[col] != S.c[col<span class="number">-1</span>]) S.UL = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> key;</span><br><span class="line">    <span class="comment">// 只在不钦定颜色的情况下记忆化</span></span><br><span class="line">    <span class="keyword">if</span> (limit &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        key = S.encode();</span><br><span class="line">        <span class="keyword">if</span> (f[row][col][S.UL].count(key) &gt; <span class="number">0</span>) <span class="keyword">return</span> f[row][col][S.UL][key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">2</span>; ++t) &#123;</span><br><span class="line">        <span class="comment">// 钦定颜色 / 限制 0</span></span><br><span class="line">        <span class="keyword">if</span> (limit == (t ^ <span class="number">1</span>) || G[row][col] == ch[t ^ <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 限制 1</span></span><br><span class="line">        <span class="keyword">if</span> (row &gt; <span class="number">0</span> &amp;&amp; col &gt; <span class="number">0</span> &amp;&amp; S.UL == t &amp;&amp; S.c[col] == t &amp;&amp; S.c[col<span class="number">-1</span>] == t) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 新的状态 !</span></span><br><span class="line">        State T = S;</span><br><span class="line">        T.c[col] = t, T.UL = S.c[col];</span><br><span class="line">        <span class="comment">// 通过考虑左侧和上方状态, 来合并一些连通分量</span></span><br><span class="line">        T.g[col] = (row &gt; <span class="number">0</span> &amp;&amp; S.c[col] == t)? S.g[col]: S.tot;</span><br><span class="line">        <span class="keyword">if</span> (col &gt; <span class="number">0</span> &amp;&amp; T.c[col<span class="number">-1</span>] == t) T.merge(T.g[col<span class="number">-1</span>], T.g[col]);</span><br><span class="line">        Now[row][col] = ch[t];</span><br><span class="line">        <span class="keyword">if</span> (row &gt; <span class="number">0</span> &amp;&amp; S.c[col] == (t ^ <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">bool</span> none = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m &amp;&amp; none; ++i)</span><br><span class="line">                <span class="keyword">if</span> (T.g[i] == S.g[col]) none = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (none) &#123;</span><br><span class="line">                <span class="comment">// 注意跳转逻辑: 这些条件满足 / 不满足, 直接向下一颜色进行</span></span><br><span class="line">                <span class="keyword">if</span> (S.cnt[t ^ <span class="number">1</span>] &gt; <span class="number">1</span> || n - row &gt; <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">                ret += dfs(row, col + <span class="number">1</span>, T, t);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ret += dfs(row, col + <span class="number">1</span>, T, limit);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (limit &lt; <span class="number">0</span>) f[row][col][S.UL][key] = ret;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> Ti;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Ti);</span><br><span class="line">    <span class="keyword">while</span> (Ti--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        exist = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; ++k) f[i][j][k].clear();</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, G[i]);</span><br><span class="line">        <span class="comment">// dp</span></span><br><span class="line">        State none; none.Normalize();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dfs(<span class="number">0</span>, <span class="number">0</span>, none, <span class="number">-1</span>));</span><br><span class="line">        <span class="comment">// output</span></span><br><span class="line">        <span class="keyword">if</span> (exist) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i, <span class="built_in">putchar</span>(<span class="string">'\n'</span>))</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) <span class="built_in">putchar</span>(Ans[i][j]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>在 陈丹琦 &lt;基于连通性状态压缩的动态规划问题&gt; 对这一类问题有相当详尽的讲解, 头疼看不懂, 以后再说了 <del>咕咕咕</del></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;最后一步判断最为关键, 也最容易想错… 请读者思考如何区分这两种情况.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;题目链接: &lt;a href=&quot;https://vjudge.net/problem/UVA-10572&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://vjudge.net/problem/UVA-10572&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;由于某些原因, 链接指向的其实是 vjudge&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;毒瘤啊!&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;其实是常规的插头 DP 维护棋盘格连通性的问题, 第一次见感觉很新鲜, 然后… 就自闭了. = =&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://depletedprism.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="Dynamic Programing" scheme="https://depletedprism.github.io/tags/Dynamic-Programing/"/>
    
  </entry>
  
  <entry>
    <title>「JSOI2018」战争 题解</title>
    <link href="https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/oj/luogu-P4557/"/>
    <id>https://depletedprism.github.io/%E9%A2%98%E8%A7%A3/sol/oj/luogu-P4557/</id>
    <published>2020-02-20T04:51:21.000Z</published>
    <updated>2020-04-09T06:10:52.697Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>题目链接: <a href="https://www.luogu.com.cn/problem/P4557" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P4557</a></li></ul><p>这是一道 <del>九条可怜</del> 计算几何题, 在思路上不算困难但是有一些细节值得留念.</p><a id="more"></a><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><ol><li>二维凸包</li><li>闵可夫斯基和</li></ol><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>给定两个大小分别为 $n,\ m$ 的点集, $q$ 次询问, 每次给出一个偏移向量 $\vec{v}$, 问将第二个点集的所有点按这个向量偏移后, 是否存在一个点, 在另一点集的凸包内.</p><p>其中 $3 \le n, m \le 10^5,\ q \le 10^5$</p><h4 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h4><p>考虑最简单的思路, 每次直接将第二个点集暴力平移, 求凸包, 判断是否存在一个点在另一个凸包内.</p><p>时间复杂度 $O(n \log n + q (m \log m + n m)\,)$, 期望得分 40 pts.</p><p>如果再加一些技巧, 大概是 $O(n \log n + m\log m + q(n\log m + m\log n))\,)$, 期望得分 40 pts, 并没有本质区别…</p><p>换一种思路, 考虑造成冲突的向量范围, 容易得到这样的式子</p><p>$$\exists \ \vec{v},\ \text{s.t.}\ b + \vec{v} = a\ (a \in A, b \in B)$$</p><p>那么就可以得到 $\vec{v}$ 的范围</p><p>$$\vec{v} = a - b\ (a \in A, b \in B)$$</p><p>把 $B$ 中点的横纵坐标取反, 就得到了闵可夫斯基和的形式.</p><p>考虑到两个凸包的闵可夫斯基和中的边都由两个凸包中的边构成, 而凸包上的边具有单调性, 直接以类似于合并两个有序表的方式进行合并就好了, 这样合并出来的闵可夫斯基和也是个凸包.</p><p>如何统计答案呢? 直接判断偏移向量是否在闵可夫斯基和中的时间复杂度是 $O(n)$ 的, 可以拿到 70 pts 的好成绩.<br>考虑把一个凸包转化为一点到其他点的向量的形式, 这样判断一个向量是否在凸包内可以根据凸包的单调性, 通过二分查找解决.</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>如果细节明确了, 其实代码不难写…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Luogu P4557</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Geo &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Vector</span> &#123;</span></span><br><span class="line">        LL x, y;</span><br><span class="line">        Vector(LL _x = <span class="number">0</span>, LL _y = <span class="number">0</span>): x(_x), y(_y) &#123; &#125;</span><br><span class="line"></span><br><span class="line">        Vector <span class="keyword">operator</span> + (<span class="keyword">const</span> Vector&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Vector(x + rhs.x, y + rhs.y); &#125;</span><br><span class="line">        Vector <span class="keyword">operator</span> - (<span class="keyword">const</span> Vector&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Vector(x - rhs.x, y - rhs.y); &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">typedef</span> Vector Point;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; A, <span class="keyword">const</span> Point&amp; B) &#123;</span><br><span class="line">        <span class="keyword">return</span> A.x &lt; B.x || (A.x == B.x &amp;&amp; A.y &lt; B.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>== (<span class="keyword">const</span> Point&amp; A, <span class="keyword">const</span> Point&amp; B) &#123; <span class="keyword">return</span> !(A &lt; B) &amp;&amp; !(B &lt; A); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">Dot</span><span class="params">(<span class="keyword">const</span> Vector&amp; A, <span class="keyword">const</span> Vector&amp; B)</span> </span>&#123; <span class="keyword">return</span> A.x * B.x + A.y * B.y; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">Cross</span><span class="params">(<span class="keyword">const</span> Vector&amp; A, <span class="keyword">const</span> Vector&amp; B)</span> </span>&#123; <span class="keyword">return</span> A.x * B.y - A.y * B.x; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">ConvexHull</span><span class="params">(Point* P, <span class="keyword">int</span> n, Point* ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">        sort(P, P+n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (m &gt; <span class="number">1</span> &amp;&amp; Cross(ch[m<span class="number">-1</span>] - ch[m<span class="number">-2</span>], P[i] - ch[m<span class="number">-2</span>]) &lt;= <span class="number">0</span>) --m;</span><br><span class="line">            ch[m++] = P[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> k = m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n<span class="number">-2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (m &gt; k &amp;&amp; Cross(ch[m<span class="number">-1</span>] - ch[m<span class="number">-2</span>], P[i] - ch[m<span class="number">-2</span>]) &lt;= <span class="number">0</span>) --m;</span><br><span class="line">            ch[m++] = P[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m - (n &gt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Geo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, pidx, K;</span><br><span class="line">Point poly[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">Vector v1[MAXN], v2[MAXN];</span><br><span class="line">Point P1[MAXN], P2[MAXN], ch1[MAXN], ch2[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通俗地说, 凸包上的边, 在右侧的边总是在左侧的边的 "左侧"</span></span><br><span class="line"><span class="comment">// 还要考虑向量的模长, 可能太长就冲出去了...</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Point&amp; A, <span class="keyword">const</span> Point&amp; B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Cross(A, B) &gt; <span class="number">0</span> || (Cross(A, B) == <span class="number">0</span> &amp;&amp; Dot(A, A) &lt; Dot(B, B));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">inPoly</span><span class="params">(<span class="keyword">const</span> Vector&amp; v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Cross(v, poly[<span class="number">0</span>]) &gt; <span class="number">0</span> || Cross(v, poly[pidx<span class="number">-1</span>]) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pos = lower_bound(poly, poly+pidx, v, cmp) - poly - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> Cross(v - poly[pos], poly[(pos+<span class="number">1</span>)%pidx] - poly[pos]) &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="comment">// freopen("input.in", "r", stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m), read(K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x, y, i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        read(x), read(y), P1[i] = Point(x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x, y, i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        read(x), read(y), P2[i] = Point(-x, -y);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    n = ConvexHull(P1, n, ch1);</span><br><span class="line">    m = ConvexHull(P2, m, ch2);</span><br><span class="line">    <span class="comment">// 将凸包的点集转化为边集, 以向量的形式体现</span></span><br><span class="line">    ch1[n] = ch1[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) v1[i] = ch1[i+<span class="number">1</span>] - ch1[i];</span><br><span class="line">    ch2[m] = ch2[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) v2[i] = ch2[i+<span class="number">1</span>] - ch2[i];</span><br><span class="line">    <span class="comment">// Minkowski Sum</span></span><br><span class="line">    <span class="comment">// 合并两个凸包, 由于凸包单调性, 类似于合并两个有序表</span></span><br><span class="line">    poly[pidx++] = ch1[<span class="number">0</span>] + ch2[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>, q = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &lt; n &amp;&amp; q &lt; m) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Cross(v1[p], v2[q]) &gt;= <span class="number">0</span>)</span><br><span class="line">            poly[pidx] = poly[pidx<span class="number">-1</span>] + v1[p++], ++pidx;</span><br><span class="line">        <span class="keyword">else</span> poly[pidx] = poly[pidx<span class="number">-1</span>] + v2[q++], ++pidx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p &lt; n) poly[pidx] = poly[pidx<span class="number">-1</span>] + v1[p++], ++pidx;</span><br><span class="line">    <span class="keyword">while</span> (q &lt; m) poly[pidx] = poly[pidx<span class="number">-1</span>] + v2[q++], ++pidx;</span><br><span class="line">    <span class="keyword">while</span> (pidx &gt; <span class="number">1</span> &amp;&amp;</span><br><span class="line">        Cross(poly[pidx<span class="number">-1</span>] - poly[pidx<span class="number">-2</span>], poly[<span class="number">0</span>] - poly[pidx<span class="number">-2</span>]) &lt;= <span class="number">0</span>) --pidx;</span><br><span class="line">    <span class="comment">// 将闵可夫斯基和的点集转化为由一点指向其他点的向量</span></span><br><span class="line">    Point o = poly[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pidx; ++i) poly[i] = poly[i] - o;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">while</span> (K--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> x, y;</span><br><span class="line">        read(x), read(y), <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, inPoly(Vector(x, y) - o));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;题目链接: &lt;a href=&quot;https://www.luogu.com.cn/problem/P4557&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.luogu.com.cn/problem/P4557&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是一道 &lt;del&gt;九条可怜&lt;/del&gt; 计算几何题, 在思路上不算困难但是有一些细节值得留念.&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://depletedprism.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="Geometry" scheme="https://depletedprism.github.io/tags/Geometry/"/>
    
  </entry>
  
  <entry>
    <title>一些简单的偏序维护问题</title>
    <link href="https://depletedprism.github.io/%E7%AC%94%E8%AE%B0/simple-partial-order/"/>
    <id>https://depletedprism.github.io/%E7%AC%94%E8%AE%B0/simple-partial-order/</id>
    <published>2020-02-14T15:15:28.000Z</published>
    <updated>2020-04-24T08:10:55.821Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>拜读了毒瘤的数据结构课件, 深受启发, <del>甚是谔谔, 当即感觉自己之前一直在玩泥巴</del>.</p><p>初学数据结构, 恳请指正.</p><a id="more"></a><h3 id="什么是偏序"><a href="#什么是偏序" class="headerlink" title="什么是偏序"></a>什么是偏序</h3><p><em>其实这一点也不重要</em></p><p>对于一个非空集上的二元关系, 如果其满足<strong>自反性</strong>, <strong>反对称性</strong>, <strong>传递性</strong>, 那么称这个二元关系就是这个集合上的偏序.</p><p>一个简单的例子: 实数集上的小于等于关系是一个偏序关系.</p><h3 id="偏序维护"><a href="#偏序维护" class="headerlink" title="偏序维护"></a>偏序维护</h3><p>现在我们有一个具有很多属性的元素, 比如有 $a_i, b_i, c_i, \ldots$</p><p>接下来对每个属性给出一些限制, 对满足这些限制的元素进行一些操作, 像 $L_1 \leq a_i \leq R_1, L_2 \leq b_i \leq R_2, L_3 \leq c_i \leq R_3, \ldots$</p><p>这就是在维护偏序了, 有时候也把 “属性” 称作 “维度”.</p><h2 id="一些维护方法-amp-例题"><a href="#一些维护方法-amp-例题" class="headerlink" title="一些维护方法 &amp; 例题"></a>一些维护方法 &amp; 例题</h2><blockquote><p>反正我之前是先推出一个 poly log 的数据结构做法</p><p>然后想办法去 log，到一个可以接受的复杂度</p><p>from lxl 某次洛谷网课</p></blockquote><p>先是两个离线方法.</p><h3 id="CDQ-分治"><a href="#CDQ-分治" class="headerlink" title="CDQ 分治"></a>CDQ 分治</h3><p>强烈推荐 <a href="https://www.cnblogs.com/mlystdcall/p/6219421.html" target="_blank" rel="noopener">__stdcall 的 CDQ 分治教程</a>.</p><p>简单来说, CDQ 分治做了这样一件事情: 把操作离线下来, 分成两部分, 递归解决; 考虑把这两部分合并, 就要考虑左半部分操作对右半部分的影响, 然后合并.</p><h4 id="Luogu-P3810【模板】三维偏序"><a href="#Luogu-P3810【模板】三维偏序" class="headerlink" title="Luogu P3810【模板】三维偏序"></a>Luogu P3810【模板】三维偏序</h4><ul><li>题目链接: <a href="https://www.luogu.com.cn/problem/P3810" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P3810</a></li></ul><p>是一道经典题, 考虑 CDQ 分治, 先将第一维排序, CDQ 分治过程中按第二维排序, 使用树状数组统计第三维答案.</p><p>有一个细节: 可能存在相同元素, 按题意来讲这些完全相同的元素互相有贡献, 但是在 CDQ 分治的过程中只能统计左半部分对右半部分的贡献, 所以需要去重, 对重复不同次数的元素给定一个不同的权值.</p><p>时间复杂度: $O (n\log n \log k)$</p><p><strong>代码实现</strong></p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Luogu P3810</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">5</span>, MAXM = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Item</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> idx, a, b, c, w;</span><br><span class="line">    Item(<span class="keyword">int</span> _i = <span class="number">0</span>, <span class="keyword">int</span> _a = <span class="number">0</span>, <span class="keyword">int</span> _b = <span class="number">0</span>, <span class="keyword">int</span> _c = <span class="number">0</span>, <span class="keyword">int</span> _w = <span class="number">0</span>):</span><br><span class="line">        idx(_i), a(_a), b(_b), c(_c), w(_w) &#123; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Item&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (a == rhs.a)? ((b == rhs.b)? c &lt; rhs.c: b &lt; rhs.b): a &lt; rhs.a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>== (<span class="keyword">const</span> Item&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; rhs) &amp;&amp; !(rhs &lt; *<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; A[MAXN], tmp[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, nA, K;</span><br><span class="line"><span class="keyword">int</span> Ans[MAXN], f[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BIT &#123;</span><br><span class="line">    <span class="keyword">int</span> C[MAXM];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; pos, <span class="keyword">const</span> <span class="keyword">int</span>&amp; d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt;= K; i += lowbit(i)) C[i] += d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i; i -= lowbit(i)) ret += C[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &gt;= R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>, p = L, q = Mid+<span class="number">1</span>;</span><br><span class="line">    CDQ(L, Mid), CDQ(Mid+<span class="number">1</span>, R);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) &#123;</span><br><span class="line">        <span class="comment">// 在右半部分排满时移动左半部分</span></span><br><span class="line">        <span class="keyword">if</span> ((p &lt;= Mid &amp;&amp; A[p].b &lt;= A[q].b) || q &gt; R)</span><br><span class="line">            BIT::Mdy(A[p].c, A[p].w), tmp[i] = A[p++];</span><br><span class="line">        <span class="keyword">else</span> Ans[A[q].idx] += BIT::Qry(A[q].c), tmp[i] = A[q++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清空树状数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= Mid; ++i) BIT::Mdy(A[i].c, -A[i].w);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) A[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a, b, c, i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        read(a), read(b), read(c), A[i] = Item(i, a, b, c, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    sort(A+<span class="number">1</span>, A+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; n &amp;&amp; A[i] == A[j+<span class="number">1</span>]) ++j;</span><br><span class="line">        A[++nA] = A[i], A[nA].w = j - i + <span class="number">1</span>;</span><br><span class="line">        i = j;</span><br><span class="line">    &#125;</span><br><span class="line">    CDQ(<span class="number">1</span>, nA);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nA; ++i) f[Ans[A[i].idx] + A[i].w] += A[i].w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h4 id="Luogu-P3374【模板】树状数组-1"><a href="#Luogu-P3374【模板】树状数组-1" class="headerlink" title="Luogu P3374【模板】树状数组 1"></a>Luogu P3374【模板】树状数组 1</h4><blockquote><p>CDQ 分治可以顶替复杂的高级数据结构.</p></blockquote><ul><li>题目链接: <a href="https://www.luogu.com.cn/problem/P3374" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P3374</a></li></ul><p>我们可以把初始值看作在 $0$ 的基础上单点修改, 把查询看作两次询问前缀和, 这样每个操作有时间, 对应操作位置, 权值三个属性.</p><p>时间这一维按给定顺序有序, CDQ 分治过程中按操作位置维护权值和即可, 注意在操作位置相同时, 按照先修改后查询的顺序统计.</p><p><strong>代码实现</strong></p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Luogu P3374</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc(); </span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">500005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ask</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> opt, pos; LL val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Ask&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pos &lt; rhs.pos || (pos == rhs.pos &amp;&amp; opt &lt; rhs.opt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[MAXN * <span class="number">3</span>], tmp[MAXN * <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, qidx, aidx;</span><br><span class="line">LL A[MAXN], Ans[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">    CDQ(L, Mid), CDQ(Mid+<span class="number">1</span>, R);</span><br><span class="line">    LL sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p = L, q = Mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((p &lt;= Mid &amp;&amp; Q[p] &lt; Q[q]) || q &gt; R) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Q[p].opt == <span class="number">1</span>) sum += Q[p].val;</span><br><span class="line">        tmp[i] = Q[p++];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Q[q].opt == <span class="number">2</span>) Ans[Q[q].val] -= sum;</span><br><span class="line">        <span class="keyword">if</span> (Q[q].opt == <span class="number">3</span>) Ans[Q[q].val] += sum;</span><br><span class="line">        tmp[i] = Q[q++];</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) Q[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        read(A[i]);</span><br><span class="line">        Q[++qidx] = (Ask)&#123; <span class="number">1</span>, i, A[i] &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> opt, L, R; LL val;</span><br><span class="line">        read(opt); read(L);</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                read(val);</span><br><span class="line">                Q[++qidx] = (Ask)&#123; opt, L, val &#125;;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                read(R);</span><br><span class="line">                Q[++qidx] = (Ask)&#123; opt, L<span class="number">-1</span>, ++aidx &#125;;</span><br><span class="line">                Q[++qidx] = (Ask)&#123; opt+<span class="number">1</span>, R, aidx &#125;;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="built_in">puts</span>(<span class="string">"ERROR"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    CDQ(<span class="number">1</span>, qidx);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= aidx; ++i) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, Ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h4 id="HDU-5126-stars"><a href="#HDU-5126-stars" class="headerlink" title="HDU 5126 stars"></a>HDU 5126 stars</h4><ul><li>题目链接: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5126" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=5126</a></li></ul><p>对于四维的情况, CDQ 分治可以嵌套使用. <del>但是 CDQ 套 CDQ 套 CDQ… 就和树套树套树… 一样没用, 不如直接写 bitset</del></p><p>这是一个三维数点问题, 因为要考虑操作时间的影响就是四维偏序了, 在此我使用 CDQ 套 CDQ 解决.</p><p>还是参考 <a href="https://www.cnblogs.com/mlystdcall/p/6232324.html" target="_blank" rel="noopener">__stdcall 的 CDQ 套 CDQ 教程</a>, 把第二维按左右两部分重标号, 依此为根据统计答案.</p><p>空间内数点可仿照平面内数点的思路, 统计前缀和按坐标点容斥计算就好了.</p><p>时间复杂度大概是 $O(n \log ^3 n)$</p><p><strong>代码实现</strong></p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HDU 5126</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ask</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> opt, idx, x, y, z, part;</span><br><span class="line">&#125; Q[MAXN], tmp2d[MAXN], tmp3d[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, qidx, aidx;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], B[MAXN &lt;&lt; <span class="number">1</span>], nB;</span><br><span class="line"><span class="keyword">int</span> Ans[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BIT &#123;</span><br><span class="line">    <span class="keyword">int</span> C[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; pos, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt;= nB; i += lowbit(i)) C[i] += val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i; i -= lowbit(i)) ret += C[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ3d</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &gt;= R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>, p = L, q = Mid+<span class="number">1</span>;</span><br><span class="line">    CDQ3d(L, Mid), CDQ3d(Mid+<span class="number">1</span>, R);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((p &lt;= Mid &amp;&amp; tmp2d[p].y &lt;= tmp2d[q].y) || q &gt; R) &#123;</span><br><span class="line">            <span class="comment">// 只考虑两次归并都排布在左半部分的元素的贡献</span></span><br><span class="line">            <span class="keyword">if</span> (tmp2d[p].opt == <span class="number">0</span> &amp;&amp; tmp2d[p].part == <span class="number">0</span>)</span><br><span class="line">                BIT::Mdy(tmp2d[p].z, <span class="number">1</span>);</span><br><span class="line">            tmp3d[i] = tmp2d[p++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 只统计两次归并都排布在右半部分的元素的答案</span></span><br><span class="line">            <span class="keyword">if</span> (tmp2d[q].opt != <span class="number">0</span> &amp;&amp; tmp2d[q].part == <span class="number">1</span>)</span><br><span class="line">                Ans[tmp2d[q].idx] += tmp2d[q].opt * BIT::Qry(tmp2d[q].z);</span><br><span class="line">            tmp3d[i] = tmp2d[q++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= Mid; ++i)</span><br><span class="line">        <span class="keyword">if</span> (tmp2d[i].opt == <span class="number">0</span> &amp;&amp; tmp2d[i].part == <span class="number">0</span>)</span><br><span class="line">            BIT::Mdy(tmp2d[i].z, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) tmp2d[i] = tmp3d[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ2d</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &gt;= R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>, p = L, q = Mid+<span class="number">1</span>;</span><br><span class="line">    CDQ2d(L, Mid), CDQ2d(Mid+<span class="number">1</span>, R);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) &#123;</span><br><span class="line">        <span class="comment">// 重标号: 左半部分标为 0, 右半部分标为 1</span></span><br><span class="line">        <span class="keyword">if</span> ((p &lt;= Mid &amp;&amp; Q[p].x &lt;= Q[q].x) || q &gt; R) &#123;</span><br><span class="line">            Q[p].part = <span class="number">0</span>;</span><br><span class="line">            tmp2d[i] = Q[p++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Q[q].part = <span class="number">1</span>;</span><br><span class="line">            tmp2d[i] = Q[q++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) Q[i] = tmp2d[i];</span><br><span class="line">    CDQ3d(L, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> Ti; read(Ti);</span><br><span class="line">    <span class="keyword">while</span> (Ti--) &#123;</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        qidx = nB = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// input</span></span><br><span class="line">        read(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">int</span> opt, x1, y1, z1, x2, y2, z2;</span><br><span class="line">            read(opt), read(x1), read(y1), read(z1);</span><br><span class="line">            <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    Q[++qidx] = (Ask)&#123; <span class="number">0</span>, i, x1, y1, z1, <span class="number">0</span> &#125;;</span><br><span class="line">                    Ans[i] = <span class="number">-1</span>, B[++nB] = z1;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    read(x2), read(y2), read(z2);</span><br><span class="line">                    --x1, --y1, --z1;</span><br><span class="line">                    <span class="comment">// 容斥</span></span><br><span class="line">                    Q[++qidx] = (Ask)&#123; <span class="number">1</span>, i, x2, y2, z2, <span class="number">0</span> &#125;;</span><br><span class="line">                    Q[++qidx] = (Ask)&#123;<span class="number">-1</span>, i, x1, y1, z1, <span class="number">0</span> &#125;;</span><br><span class="line">                    Q[++qidx] = (Ask)&#123;<span class="number">-1</span>, i, x1, y2, z2, <span class="number">0</span> &#125;;</span><br><span class="line">                    Q[++qidx] = (Ask)&#123;<span class="number">-1</span>, i, x2, y1, z2, <span class="number">0</span> &#125;;</span><br><span class="line">                    Q[++qidx] = (Ask)&#123;<span class="number">-1</span>, i, x2, y2, z1, <span class="number">0</span> &#125;;</span><br><span class="line">                    Q[++qidx] = (Ask)&#123; <span class="number">1</span>, i, x2, y1, z1, <span class="number">0</span> &#125;;</span><br><span class="line">                    Q[++qidx] = (Ask)&#123; <span class="number">1</span>, i, x1, y2, z1, <span class="number">0</span> &#125;;</span><br><span class="line">                    Q[++qidx] = (Ask)&#123; <span class="number">1</span>, i, x1, y1, z2, <span class="number">0</span> &#125;;</span><br><span class="line">                    Ans[i] = <span class="number">0</span>, B[++nB] = z1, B[++nB] = z2;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERR\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// solve</span></span><br><span class="line">        sort(B+<span class="number">1</span>, B+<span class="number">1</span>+nB);</span><br><span class="line">        nB = unique(B+<span class="number">1</span>, B+<span class="number">1</span>+nB) - B - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 这一维要丢到 BIT 里, 于是离散化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= qidx; ++i)</span><br><span class="line">            Q[i].z = lower_bound(B+<span class="number">1</span>, B+<span class="number">1</span>+nB, Q[i].z) - B;</span><br><span class="line">        CDQ2d(<span class="number">1</span>, qidx);</span><br><span class="line">        <span class="comment">// output</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (~Ans[i]) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="整体二分"><a href="#整体二分" class="headerlink" title="整体二分"></a>整体二分</h3><p>对于一个询问, 例如区间第 K 小, 有一个朴素的想法: 每次二分答案的值域, 看当前二分值是否恰好在区间的排名为 K.</p><p>这样看起来很慢, 于是可以将所有操作视为一个整体进行二分, 每次给定一个答案区间和一个操作区间, 这就是整体二分了.</p><h4 id="Luogu-P3834【模板】可持久化线段树-1（主席树）"><a href="#Luogu-P3834【模板】可持久化线段树-1（主席树）" class="headerlink" title="Luogu P3834【模板】可持久化线段树 1（主席树）"></a>Luogu P3834【模板】可持久化线段树 1（主席树）</h4><ul><li>题目链接: <a href="https://www.luogu.com.cn/problem/P3834" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P3834</a></li></ul><p>可持久化线段树 $\times$ 静态区间第 k 小 $\checkmark$</p><p>算是整体二分的经典问题了. 直接使用之前说过的思路, 整体二分即可.</p><p>具体地说, 对于原序列上的数, 按当前二分的值域进行划分; 而对于操作, 则统计当前操作对应区间内数的个数, 以当前操作第 k 小为依据进行划分.</p><p><strong>代码实现</strong></p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Luogu P3834</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ask</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> opt, idx, L, R, k;</span><br><span class="line">&#125; Q[MAXN &lt;&lt; <span class="number">1</span>], tmpL[MAXN &lt;&lt; <span class="number">1</span>], tmpR[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, qidx;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], B[MAXN], nB;</span><br><span class="line"><span class="keyword">int</span> Ans[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BIT &#123;</span><br><span class="line">    <span class="keyword">int</span> C[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; pos, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt;= n; i += lowbit(i)) C[i] += val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i; i -= lowbit(i)) ret += C[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R)</span> </span>&#123; <span class="keyword">return</span> Qry(R) - Qry(L<span class="number">-1</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (opL &gt; opR) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (L == R) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = opL; i &lt;= opR; ++i)</span><br><span class="line">            <span class="keyword">if</span> (Q[i].opt == <span class="number">1</span>) Ans[Q[i].idx] = L;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>, p = <span class="number">0</span>, q = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = opL; i &lt;= opR; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Q[i].opt == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Q[i].R &lt;= Mid)</span><br><span class="line">                BIT::Mdy(Q[i].L, Q[i].k), tmpL[++p] = Q[i];</span><br><span class="line">            <span class="keyword">else</span> tmpR[++q] = Q[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> w = BIT::Qry(Q[i].L, Q[i].R);</span><br><span class="line">            <span class="keyword">if</span> (Q[i].k &lt;= w) tmpL[++p] = Q[i];</span><br><span class="line">            <span class="keyword">else</span> Q[i].k -= w, tmpR[++q] = Q[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; ++i)</span><br><span class="line">        <span class="keyword">if</span> (tmpL[i].opt == <span class="number">0</span>) BIT::Mdy(tmpL[i].L, -tmpL[i].k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; ++i) Q[opL+i<span class="number">-1</span>] = tmpL[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) Q[opL+p+i<span class="number">-1</span>] = tmpR[i];</span><br><span class="line">    divide(L, Mid, opL, opL + p - <span class="number">1</span>), divide(Mid+<span class="number">1</span>, R, opL + p, opR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(A[i]), B[++nB] = A[i];</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    sort(B+<span class="number">1</span>, B+<span class="number">1</span>+nB);</span><br><span class="line">    nB = unique(B+<span class="number">1</span>, B+<span class="number">1</span>+nB) - B - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        A[i] = lower_bound(B+<span class="number">1</span>, B+<span class="number">1</span>+nB, A[i]) - B;</span><br><span class="line">        Q[++qidx] = (Ask)&#123; <span class="number">0</span>, <span class="number">-1</span>, i, A[i], <span class="number">1</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> L, R, k;</span><br><span class="line">        read(L), read(R), read(k);</span><br><span class="line">        Q[++qidx] = (Ask)&#123; <span class="number">1</span>, i, L, R, k &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    divide(<span class="number">1</span>, nB, <span class="number">1</span>, qidx);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, B[Ans[i]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h4 id="Luogu-P3242-HNOI2015-接水果"><a href="#Luogu-P3242-HNOI2015-接水果" class="headerlink" title="Luogu P3242 [HNOI2015] 接水果"></a>Luogu P3242 [HNOI2015] 接水果</h4><ul><li>题目链接: <a href="https://www.luogu.com.cn/problem/P3242" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P3242</a></li></ul><p>通过对路径两端点的 dfs 序的讨论, 路径之间的相互包含可以看作是在二维矩阵中数点, 放在这道题中就是二维矩阵中查询第 k 小了.</p><p>类似的转化还有子树内距离小于等于的点, 将 DFS 序看作一维, 深度看作另一维…</p><p><del>这东西可以写可持久化树套树, 我…</del></p><p>我当然是把矩阵拆成扫描线, 然后整体二分进行统计.</p><p><strong>代码实现</strong></p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Luogu P3242</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">4e4</span>+<span class="number">5</span>, MAXM = <span class="number">5</span> * MAXN;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ask</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> opt, idx, u, L, R, k, val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Ask&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> u &lt; rhs.u || (u == rhs.u &amp;&amp; opt &lt; rhs.opt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[MAXM], tmpL[MAXM], tmpR[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, qc, qidx;</span><br><span class="line"><span class="keyword">int</span> st[MAXN], ed[MAXN];</span><br><span class="line"><span class="keyword">int</span> Ans[MAXN], B[MAXN], nB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nxt, to; &#125; edges[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN], eidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head), eidx = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        edges[++eidx] = (Edge)&#123; head[from], to &#125;;</span><br><span class="line">        head[from] = eidx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> HLD &#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> Graph;</span><br><span class="line">    <span class="keyword">int</span> size[MAXN], depth[MAXN], pre[MAXN], son[MAXN];</span><br><span class="line">    <span class="keyword">int</span> topfa[MAXN], dfs_clock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        depth[u] = depth[fa] + <span class="number">1</span>;</span><br><span class="line">        pre[u] = fa, size[u] = <span class="number">1</span>, son[u] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) == fa) <span class="keyword">continue</span>;</span><br><span class="line">            dfs1(v, u), size[u] += size[v];</span><br><span class="line">            <span class="keyword">if</span> (son[u] == <span class="number">-1</span> || size[v] &gt; size[son[u]]) son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">        topfa[u] = top, st[u] = ++dfs_clock;</span><br><span class="line">        <span class="keyword">if</span> (~son[u]) dfs2(son[u], top);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v, i = head[u]; ~i; i = edges[i].nxt)</span><br><span class="line">            <span class="keyword">if</span> ((v = edges[i].to) != pre[u] &amp;&amp; v != son[u]) dfs2(v, v);</span><br><span class="line">        ed[u] = dfs_clock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (topfa[u] != topfa[v]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (depth[topfa[u]] &lt; depth[topfa[v]]) swap(u, v);</span><br><span class="line">            u = pre[topfa[u]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth[u] &gt; depth[v]? v: u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findson</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (topfa[u] != topfa[v]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre[topfa[u]] == v) <span class="keyword">return</span> topfa[u];</span><br><span class="line">            u = pre[topfa[u]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> son[v];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> root = <span class="number">1</span>)</span> </span>&#123; dfs1(root, <span class="number">0</span>), dfs2(root, root); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BIT &#123;</span><br><span class="line">    <span class="keyword">int</span> C[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; pos, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt;= n; i += lowbit(i)) C[i] += val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        Mdy(L, val), Mdy(R+<span class="number">1</span>, -val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i; i -= lowbit(i)) ret += C[i];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (opL &gt; opR) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (L == R) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = opL; i &lt;= opR; ++i)</span><br><span class="line">            <span class="keyword">if</span> (Q[i].opt == <span class="number">1</span>) Ans[Q[i].idx] = B[L];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>, p = <span class="number">0</span>, q = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = opL; i &lt;= opR; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Q[i].opt == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Q[i].k &lt;= Mid)</span><br><span class="line">                BIT::Mdy(Q[i].L, Q[i].R, Q[i].val), tmpL[++p] = Q[i];</span><br><span class="line">            <span class="keyword">else</span> tmpR[++q] = Q[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> w = BIT::Qry(Q[i].L);</span><br><span class="line">            <span class="keyword">if</span> (Q[i].k &lt;= w) tmpL[++p] = Q[i];</span><br><span class="line">            <span class="keyword">else</span> Q[i].k -= w, tmpR[++q] = Q[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; ++i)</span><br><span class="line">        <span class="keyword">if</span> (tmpL[i].opt == <span class="number">0</span>) BIT::Mdy(tmpL[i].L, tmpL[i].R, -tmpL[i].val);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; ++i) Q[opL + i - <span class="number">1</span>] = tmpL[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) Q[opL + p + i - <span class="number">1</span>] = tmpR[i];</span><br><span class="line">    divide(L, Mid, opL, opL + p - <span class="number">1</span>), divide(Mid+<span class="number">1</span>, R, opL + p, opR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    Graph::init();</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m), read(qc);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        read(u), read(v), Graph::AddEdge(u, v), Graph::AddEdge(v, u);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    HLD::solve();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, w, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        read(u), read(v), read(w);</span><br><span class="line">        <span class="keyword">if</span> (st[u] &gt; st[v]) swap(u, v);</span><br><span class="line">        B[++nB] = w;</span><br><span class="line">        <span class="keyword">if</span> (HLD::LCA(u, v) == u) &#123;</span><br><span class="line">            <span class="keyword">int</span> z = HLD::findson(v, u);</span><br><span class="line">            <span class="keyword">if</span> (st[z] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                Q[++qidx] = (Ask)&#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, st[v], ed[v], w, <span class="number">1</span> &#125;;</span><br><span class="line">                Q[++qidx] = (Ask)&#123; <span class="number">0</span>, <span class="number">-1</span>, st[z], st[v], ed[v], w, <span class="number">-1</span> &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ed[z] &lt; n) &#123;</span><br><span class="line">                Q[++qidx] = (Ask)&#123; <span class="number">0</span>, <span class="number">-1</span>, st[v], ed[z]+<span class="number">1</span>, n, w, <span class="number">1</span> &#125;;</span><br><span class="line">                Q[++qidx] = (Ask)&#123; <span class="number">0</span>, <span class="number">-1</span>, ed[v]+<span class="number">1</span>, ed[z]+<span class="number">1</span>, n, w, <span class="number">-1</span> &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Q[++qidx] = (Ask)&#123; <span class="number">0</span>, <span class="number">-1</span>, st[u], st[v], ed[v], w, <span class="number">1</span> &#125;;</span><br><span class="line">            Q[++qidx] = (Ask)&#123; <span class="number">0</span>, <span class="number">-1</span>, ed[u]+<span class="number">1</span>, st[v], ed[v], w, <span class="number">-1</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(B+<span class="number">1</span>, B+<span class="number">1</span>+nB);</span><br><span class="line">    nB = unique(B+<span class="number">1</span>, B+<span class="number">1</span>+nB) - B - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= qidx; ++i)</span><br><span class="line">        Q[i].k = lower_bound(B+<span class="number">1</span>, B+<span class="number">1</span>+nB, Q[i].k) - B;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, k, i = <span class="number">1</span>; i &lt;= qc; ++i) &#123;</span><br><span class="line">        read(u), read(v), read(k);</span><br><span class="line">        <span class="keyword">if</span> (st[u] &gt; st[v]) swap(u, v);</span><br><span class="line">        Q[++qidx] = (Ask)&#123; <span class="number">1</span>, i, st[u], st[v], <span class="number">-1</span>, k, <span class="number">0</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(Q+<span class="number">1</span>, Q+<span class="number">1</span>+qidx);</span><br><span class="line">    divide(<span class="number">1</span>, nB, <span class="number">1</span>, qidx);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= qc; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>遇到毒瘤出题人强制在线就挂了 = =, 所以还需要一些在线解决问题的科技.</p><h3 id="可持久化"><a href="#可持久化" class="headerlink" title="可持久化"></a>可持久化</h3><p>刚开始学可持久化的时候感觉这个好高级啊, 后来感觉…</p><p>这不就是个数据结构的前缀和吗 = =</p><h4 id="Luogu-P3834【模板】可持久化线段树-1（主席树）-1"><a href="#Luogu-P3834【模板】可持久化线段树-1（主席树）-1" class="headerlink" title="Luogu P3834【模板】可持久化线段树 1（主席树）"></a>Luogu P3834【模板】可持久化线段树 1（主席树）</h4><ul><li>题目链接: <a href="https://www.luogu.com.cn/problem/P3834" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P3834</a></li></ul><p>建权值线段树, 动态开点.</p><p>按照初始序列建可持久化线段树, 每个位置对应的线段树, 就是包含这个位置前缀信息的线段树了.</p><p>具体地说, 先建出一个空树, 然后对于每个位置, 在上一个位置的基础上拓展, 尽量利用之前以及储存过的信息, 再建出一颗新树. 这样每次新增的节点数为 $O(\log n)$, 总共建出 $n$ 颗线段树, 总空间复杂度为 $O(n \log n + n \log n)$.</p><p>这样对于每个询问 $[L,\ R]$, 按照前缀和的基本思想, 在 $L-1,\ R$ 两颗树上进行二分就好了, 即记录当前二分到的两颗树的左子树 size 之差 (因为是求第 $k$ 小), 然后分类讨论移动到左子树还是右子树.</p><p>时间复杂度: $O(n \log n)$</p><p><strong>代码实现</strong></p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Luogu P3834</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, nB;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], B[MAXN], rt[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SGT &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span> <span class="keyword">int</span> lc, rc, sum; &#125; dat[MAXN &lt;&lt; <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> nidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span>&amp; nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        nd = ++nidx;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        build(dat[nd].lc, L, Mid), build(dat[nd].rc, Mid+<span class="number">1</span>, R);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nxt = ++nidx;</span><br><span class="line">        dat[nxt] = dat[nd], ++dat[nxt].sum;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> nxt;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (val &lt;= Mid) dat[nxt].lc = Mdy(dat[nxt].lc, L, Mid, val);</span><br><span class="line">        <span class="keyword">else</span> dat[nxt].rc = Mdy(dat[nxt].rc, Mid+<span class="number">1</span>, R, val);</span><br><span class="line">        <span class="keyword">return</span> nxt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> L;</span><br><span class="line">        <span class="keyword">int</span> d = dat[dat[y].lc].sum - dat[dat[x].lc].sum, Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= d) <span class="keyword">return</span> Qry(dat[x].lc, dat[y].lc, L, Mid, k);</span><br><span class="line">        <span class="keyword">return</span> Qry(dat[x].rc, dat[y].rc, Mid+<span class="number">1</span>, R, k - d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(A[i]), B[i] = A[i];</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    sort(B+<span class="number">1</span>, B+<span class="number">1</span>+n);</span><br><span class="line">    nB = unique(B+<span class="number">1</span>, B+<span class="number">1</span>+n) - B - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) A[i] = lower_bound(B+<span class="number">1</span>, B+<span class="number">1</span>+nB, A[i]) - B;</span><br><span class="line">    SGT::build(rt[<span class="number">0</span>], <span class="number">1</span>, nB);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) rt[i] = SGT::Mdy(rt[i<span class="number">-1</span>], <span class="number">1</span>, nB, A[i]);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> L, R, K;</span><br><span class="line">        read(L), read(R), read(K);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, B[SGT::Qry(rt[L<span class="number">-1</span>], rt[R], <span class="number">1</span>, nB, K)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h4 id="Luogu-P3168-CQOI2015-任务查询系统"><a href="#Luogu-P3168-CQOI2015-任务查询系统" class="headerlink" title="Luogu P3168 [CQOI2015] 任务查询系统"></a>Luogu P3168 [CQOI2015] 任务查询系统</h4><ul><li>题目链接: <a href="https://www.luogu.com.cn/problem/P3168" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P3168</a></li></ul><p>刚才是单点修改, 区间求和, 而现在是区间修改, 单点求和, 那么差分即可解决.</p><p><del>尝试了不先建出空树的写法, 感觉还行 ?</del></p><p>对时间建权值线段树, 把每次区间操作差分, 挂在对应的时间点上, 记录最后操作对应的节点为当前时间点的节点, 对于询问直接在对应时间点的树上二分即可.</p><p><strong>代码实现</strong></p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Luogu P3168</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span>+<span class="number">5</span>, MAXV = <span class="number">1e7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> rt[MAXN], pos[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> PSGT &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mid ((L + R) / 2)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span> <span class="keyword">int</span> lc, rc, size; LL sum; &#125; dat[MAXN &lt;&lt; <span class="number">6</span>];</span><br><span class="line">    <span class="keyword">int</span> nidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Abs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123; <span class="keyword">return</span> v &gt; <span class="number">0</span>? v: -v; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nxt = ++nidx;</span><br><span class="line">        dat[nxt] = dat[nd], dat[nxt].size += (val &lt; <span class="number">0</span>? <span class="number">-1</span>: <span class="number">1</span>), dat[nxt].sum += val;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> nxt;</span><br><span class="line">        <span class="keyword">if</span> (Abs(val) &lt;= Mid) dat[nxt].lc = Mdy(dat[nxt].lc, L, Mid, val);</span><br><span class="line">        <span class="keyword">else</span> dat[nxt].rc = Mdy(dat[nxt].rc, Mid+<span class="number">1</span>, R, val);</span><br><span class="line">        <span class="keyword">return</span> nxt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> k * L;</span><br><span class="line">        <span class="keyword">int</span> d = dat[dat[nd].lc].size;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= d) <span class="keyword">return</span> Qry(dat[nd].lc, L, Mid, k);</span><br><span class="line">        <span class="keyword">return</span> Qry(dat[nd].rc, Mid+<span class="number">1</span>, R, k - d) + dat[dat[nd].lc].sum;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> Mid</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(m), read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> L, R, val;</span><br><span class="line">        read(L), read(R), read(val);</span><br><span class="line">        A[L].push_back(val), A[R+<span class="number">1</span>].push_back(-val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">int</span> nidx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> k = <span class="number">0</span>; k &lt; A[i].size(); ++k)</span><br><span class="line">            ++nidx, rt[nidx] = PSGT::Mdy(rt[nidx<span class="number">-1</span>], <span class="number">1</span>, MAXV, A[i][k]);</span><br><span class="line">        pos[i] = nidx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> x, a, b, c, k, nd; <span class="keyword">static</span> LL pre = <span class="number">1</span>;</span><br><span class="line">        read(x), read(a), read(b), read(c);</span><br><span class="line">        k = <span class="number">1</span> + (a * pre + b) % c, nd = pos[x];</span><br><span class="line">        <span class="keyword">if</span> (PSGT::dat[rt[nd]].size &gt; k) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, pre = PSGT::Qry(rt[nd], <span class="number">1</span>, MAXV, k));</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, pre = PSGT::dat[rt[nd]].sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="K-D-Tree"><a href="#K-D-Tree" class="headerlink" title="K-D Tree"></a>K-D Tree</h3><p>解决 K 维问题 !</p><p>K-D Tree 类似于二叉搜索树, 建树选择一个维度对当前元素进行分割, 采用合适选择方法和优秀实现, 建树的时间复杂度为 $O(n \log n)$. 详情请 <a href="https://oi-wiki.org/ds/kdt/" target="_blank" rel="noopener">OI Wiki</a>.</p><p>考虑到 K-D Tree 的结构, 插入采用类似替罪羊树的平衡方法, 如果有一个节点某一子树的大小超过限制, 就直接重构这个以这一节点为根的子树.</p><p>查询直接仿照二叉搜索树了, 注意到 K-D Tree 某些情况下可以剪枝, 可以多维护一些信息来排除掉一些子树.</p><p>可以证明, 在 $k$ 维情况下, 单次查询时间复杂度为 $O(n ^ {1 - \frac{1}{k}} + \log n )$.</p><p>不过值得注意的是, 这里的查询是类似于矩阵查询的偏序维护, 来个平面最近点对单次操作还是最劣 $O(n)$.</p><h4 id="Luogu-P4148-简单题"><a href="#Luogu-P4148-简单题" class="headerlink" title="Luogu P4148 简单题"></a>Luogu P4148 简单题</h4><ul><li>题目链接: <a href="https://www.luogu.com.cn/problem/P4148" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P4148</a></li></ul><p>感觉 K-D Tree 的模板题, 没什么好说的, 把 K-D Tree 的操作汇总就好了.</p><p><del>然而我重构写挂了调了好久…</del></p><p><strong>代码实现</strong></p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Luogu P4148</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> alpha = <span class="number">0.725</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, nidx, root;</span><br><span class="line"><span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span> <span class="keyword">int</span> x, y, val; &#125; A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> KDT &#123;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">2</span>][MAXN], d[MAXN], g[MAXN], t;</span><br><span class="line">    <span class="keyword">int</span> size[MAXN], datSum[MAXN], mnL[MAXN], mxR[MAXN], mnD[MAXN], mxU[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123; <span class="keyword">return</span> A[a].x &lt; A[b].x; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123; <span class="keyword">return</span> A[a].y &lt; A[b].y; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> nd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> &amp;lc = ch[<span class="number">0</span>][nd], &amp;rc = ch[<span class="number">1</span>][nd];</span><br><span class="line">        size[nd] = <span class="number">1</span>, datSum[nd] = A[nd].val;</span><br><span class="line">        mnL[nd] = mxR[nd] = A[nd].x, mnD[nd] = mxU[nd] = A[nd].y;</span><br><span class="line">        <span class="keyword">if</span> (lc) &#123;</span><br><span class="line">            size[nd] += size[lc], datSum[nd] += datSum[lc];</span><br><span class="line">            mnL[nd] = min(mnL[nd], mnL[lc]), mxR[nd] = max(mxR[nd], mxR[lc]);</span><br><span class="line">            mnD[nd] = min(mnD[nd], mnD[lc]), mxU[nd] = max(mxU[nd], mxU[lc]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rc) &#123;</span><br><span class="line">            size[nd] += size[rc], datSum[nd] += datSum[rc];</span><br><span class="line">            mnL[nd] = min(mnL[nd], mnL[rc]), mxR[nd] = max(mxR[nd], mxR[rc]);</span><br><span class="line">            mnD[nd] = min(mnD[nd], mnD[rc]), mxU[nd] = max(mxU[nd], mxU[rc]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L &gt; R) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">double</span> avx = <span class="number">0</span>, avy = <span class="number">0</span>, x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) avx += A[g[i]].x, avy += A[g[i]].y;</span><br><span class="line">        avx /= (R - L + <span class="number">1.0</span>), avy /= (R - L + <span class="number">1.0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) &#123;</span><br><span class="line">            x += (A[g[i]].x - avx) * (A[g[i]].x - avx);</span><br><span class="line">            y += (A[g[i]].y - avy) * (A[g[i]].y - avy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">            nth_element(g+L, g+Mid, g+R+<span class="number">1</span>, cmp1), d[g[Mid]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            nth_element(g+L, g+Mid, g+R+<span class="number">1</span>, cmp2), d[g[Mid]] = <span class="number">2</span>;</span><br><span class="line">        ch[<span class="number">0</span>][g[Mid]] = build(L, Mid<span class="number">-1</span>), ch[<span class="number">1</span>][g[Mid]] = build(Mid+<span class="number">1</span>, R);</span><br><span class="line">        <span class="keyword">return</span> maintain(g[Mid]), g[Mid];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> nd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!nd) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch[<span class="number">0</span>][nd]) dfs(ch[<span class="number">0</span>][nd]);</span><br><span class="line">        g[++t] = nd;</span><br><span class="line">        <span class="keyword">if</span> (ch[<span class="number">1</span>][nd]) dfs(ch[<span class="number">1</span>][nd]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">(<span class="keyword">int</span>&amp; nd)</span> </span>&#123;</span><br><span class="line">        t = <span class="number">0</span>, dfs(nd), nd = build(<span class="number">1</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">canrb</span><span class="params">(<span class="keyword">int</span> nd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> alpha * size[nd] &lt;= max(size[ch[<span class="number">0</span>][nd]], size[ch[<span class="number">1</span>][nd]]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Ins</span><span class="params">(<span class="keyword">int</span>&amp; nd, <span class="keyword">const</span> <span class="keyword">int</span>&amp; pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!nd) &#123; nd = pos, maintain(nd); <span class="keyword">return</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (d[nd] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[pos].x &lt;= A[nd].x) Ins(ch[<span class="number">0</span>][nd], pos);</span><br><span class="line">            <span class="keyword">else</span> Ins(ch[<span class="number">1</span>][nd], pos);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[pos].y &lt;= A[nd].y) Ins(ch[<span class="number">0</span>][nd], pos);</span><br><span class="line">            <span class="keyword">else</span> Ins(ch[<span class="number">1</span>][nd], pos);</span><br><span class="line">        &#125;</span><br><span class="line">        maintain(nd);</span><br><span class="line">        <span class="keyword">if</span> (canrb(nd)) rebuild(nd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> nd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!nd || x1 &gt; mxR[nd] || x2 &lt; mnL[nd] || y1 &gt; mxU[nd] || y2 &lt; mnD[nd])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (x1 &lt;= mnL[nd] &amp;&amp; mxR[nd] &lt;= x2 &amp;&amp; y1 &lt;= mnD[nd] &amp;&amp; mxU[nd] &lt;= y2)</span><br><span class="line">            <span class="keyword">return</span> datSum[nd];</span><br><span class="line">        <span class="keyword">if</span> (x1 &lt;= A[nd].x &amp;&amp; A[nd].x &lt;= x2 &amp;&amp; y1 &lt;= A[nd].y &amp;&amp; A[nd].y &lt;= y2)</span><br><span class="line">            <span class="keyword">return</span> Qry(ch[<span class="number">0</span>][nd]) + Qry(ch[<span class="number">1</span>][nd]) + A[nd].val;</span><br><span class="line">        <span class="keyword">return</span> Qry(ch[<span class="number">0</span>][nd]) + Qry(ch[<span class="number">1</span>][nd]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"11.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">int</span> opt, val, lastans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (read(opt), opt != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            read(x1), read(y1), read(val);</span><br><span class="line">            x1 ^= lastans, y1 ^= lastans, val ^= lastans;</span><br><span class="line">            A[++nidx] = (Point)&#123; x1, y1, val &#125;;</span><br><span class="line">            KDT::Ins(root, nidx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">            read(x1), read(y1), read(x2), read(y2);</span><br><span class="line">            x1 ^= lastans, y1 ^= lastans, x2 ^= lastans, y2 ^= lastans;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lastans = KDT::Qry(root));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h4 id="Luogu-P5471-NOI2019-弹跳"><a href="#Luogu-P5471-NOI2019-弹跳" class="headerlink" title="Luogu P5471 [NOI2019] 弹跳"></a>Luogu P5471 [NOI2019] 弹跳</h4><ul><li>题目链接: <a href="https://www.luogu.com.cn/problem/P5471" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P5471</a></li></ul><p><em>如果直接用 K-D Tree 建图, <del>如果用四分树甚至可以 AC</del>, 可以收获 88 pts 的好成绩</em></p><p><del><em>卡卡常可以卡过? 为什么不尝试更快的做法呢…</em></del></p><p>这个写法似乎在 UOJ 被叉掉了 (</p><p>那么怎么做呢? 考虑模拟 Dijkstra 的过程, 把这个 K-D Tree 当成堆使用, 记录子树内最小路径长度 (用于更新答案), 以及最大路径长度 (用于剪枝).</p><p>具体地说, 因为每个点的最短距离只会被更新一次, 所以 K-D Tree 要维护</p><ol><li>当前子树覆盖矩阵范围</li><li>当前节点到起点的最短路, 视作当前点的权值</li><li>子树内最小权值, 用于查找节点及更新答案</li><li>当前节点是否被更新过, 换言之, 在 Dijkstra 维护的点集中是否被删去</li></ol><p>另外有一个剪枝: 维护一个子树内最大权值, 这样在修改值 (也就是一个矩阵内更新最小值) 的时候遇到 “最大值比修改值还要小” 的情况就可以剪枝.</p><p>还有一些细节, 在修改整块矩阵的时候打一个类似于线段树的标记, 以及对于已删除节点值的情况要注意分类讨论.</p><p><strong>代码实现</strong></p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Luogu P5471</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">7e4</span>+<span class="number">5</span>, MAXM = <span class="number">15e4</span>, MAXD = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x[MAXD], idx;</span><br><span class="line">    <span class="keyword">int</span>&amp; <span class="keyword">operator</span>[] (<span class="keyword">const</span> <span class="keyword">int</span>&amp; i) &#123; <span class="keyword">return</span> x[i]; &#125;</span><br><span class="line">&#125; A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, W, H;</span><br><span class="line"><span class="keyword">int</span> pos[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> KDT &#123;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">2</span>][MAXN], mn[MAXD][MAXN], mx[MAXD][MAXN];</span><br><span class="line">    <span class="keyword">bool</span> vis[MAXN];</span><br><span class="line">    <span class="keyword">int</span> tag[MAXN], datMin[MAXN], datMax[MAXN], datVal[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; nd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> &amp;lc = ch[<span class="number">0</span>][nd], &amp;rc = ch[<span class="number">1</span>][nd];</span><br><span class="line">        <span class="keyword">if</span> (vis[nd]) &#123;</span><br><span class="line">            datMin[nd] = INF, datMax[nd] = -INF;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; MAXD; ++d) mn[d][nd] = INF, mx[d][nd] = -INF;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            datMin[nd] = datMax[nd] = datVal[nd];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; MAXD; ++d) mn[d][nd] = mx[d][nd] = A[nd][d];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lc) &#123;</span><br><span class="line">            datMin[nd] = min(datMin[nd], datMin[lc]);</span><br><span class="line">            datMax[nd] = max(datMax[nd], datMax[lc]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; MAXD; ++d) &#123;</span><br><span class="line">                mn[d][nd] = min(mn[d][nd], mn[d][lc]);</span><br><span class="line">                mx[d][nd] = max(mx[d][nd], mx[d][lc]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rc) &#123;</span><br><span class="line">            datMin[nd] = min(datMin[nd], datMin[rc]);</span><br><span class="line">            datMax[nd] = max(datMax[nd], datMax[rc]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; MAXD; ++d) &#123;</span><br><span class="line">                mn[d][nd] = min(mn[d][nd], mn[d][rc]);</span><br><span class="line">                mx[d][nd] = max(mx[d][nd], mx[d][rc]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushTag</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; nd, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (val &gt;= datMax[nd] || val &gt;= tag[nd]) <span class="keyword">return</span>;</span><br><span class="line">        datMax[nd] = tag[nd] = val;</span><br><span class="line">        datMin[nd] = min(datMin[nd], val);</span><br><span class="line">        <span class="keyword">if</span> (!vis[nd]) datVal[nd] = min(datVal[nd], val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> nd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!nd || tag[nd] == INF) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> &amp;lc = ch[<span class="number">0</span>][nd], &amp;rc = ch[<span class="number">1</span>][nd];</span><br><span class="line">        <span class="keyword">if</span> (lc) pushTag(lc, tag[nd]);</span><br><span class="line">        <span class="keyword">if</span> (rc) pushTag(rc, tag[nd]);</span><br><span class="line">        tag[nd] = INF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp0</span><span class="params">(<span class="keyword">const</span> Point&amp; a, <span class="keyword">const</span> Point&amp; b)</span> </span>&#123; <span class="keyword">return</span> a.x[<span class="number">0</span>] &lt; b.x[<span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">const</span> Point&amp; a, <span class="keyword">const</span> Point&amp; b)</span> </span>&#123; <span class="keyword">return</span> a.x[<span class="number">1</span>] &lt; b.x[<span class="number">1</span>]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L &gt; R) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">double</span> avx = <span class="number">0</span>, avy = <span class="number">0</span>, x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) avx += A[i][<span class="number">0</span>], avy += A[i][<span class="number">1</span>];</span><br><span class="line">        avx /= (R - L + <span class="number">1.0</span>), avy /= (R - L + <span class="number">1.0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) &#123;</span><br><span class="line">            x += (avx - A[i][<span class="number">0</span>]) * (avx - A[i][<span class="number">0</span>]);</span><br><span class="line">            y += (avy - A[i][<span class="number">1</span>]) * (avy - A[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y) nth_element(A + L, A + Mid, A + R + <span class="number">1</span>, cmp0);</span><br><span class="line">        <span class="keyword">else</span> nth_element(A + L, A + Mid, A + R + <span class="number">1</span>, cmp1);</span><br><span class="line">        pos[Mid] = A[Mid].idx;</span><br><span class="line">        tag[Mid] = INF, datVal[Mid] = (pos[Mid] == <span class="number">1</span>)? <span class="number">0</span>: INF;</span><br><span class="line">        ch[<span class="number">0</span>][Mid] = build(L, Mid<span class="number">-1</span>), ch[<span class="number">1</span>][Mid] = build(Mid+<span class="number">1</span>, R);</span><br><span class="line">        <span class="keyword">return</span> maintain(Mid), Mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">const</span> <span class="keyword">int</span>&amp; L, <span class="keyword">const</span> <span class="keyword">int</span>&amp; R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; D, <span class="keyword">const</span> <span class="keyword">int</span>&amp; U)</span> </span>&#123;</span><br><span class="line">        pushdown(nd);</span><br><span class="line">        <span class="keyword">if</span> (datMax[nd] &lt;= val) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (L &gt; mx[<span class="number">0</span>][nd] || R &lt; mn[<span class="number">0</span>][nd] || D &gt; mx[<span class="number">1</span>][nd] || U &lt; mn[<span class="number">1</span>][nd]) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= mn[<span class="number">0</span>][nd] &amp;&amp; mx[<span class="number">0</span>][nd] &lt;= R &amp;&amp; D &lt;= mn[<span class="number">1</span>][nd] &amp;&amp; mx[<span class="number">1</span>][nd] &lt;= U)</span><br><span class="line">            <span class="keyword">return</span> pushTag(nd, val);</span><br><span class="line">        <span class="keyword">if</span> (!vis[nd] &amp;&amp; L &lt;= A[nd][<span class="number">0</span>] &amp;&amp; A[nd][<span class="number">0</span>] &lt;= R &amp;&amp; D &lt;= A[nd][<span class="number">1</span>] &amp;&amp; A[nd][<span class="number">1</span>] &lt;= U)</span><br><span class="line">            datVal[nd] = min(datVal[nd], val);</span><br><span class="line">        <span class="keyword">if</span> (ch[<span class="number">0</span>][nd]) Mdy(ch[<span class="number">0</span>][nd], val, L, R, D, U);</span><br><span class="line">        <span class="keyword">if</span> (ch[<span class="number">1</span>][nd]) Mdy(ch[<span class="number">1</span>][nd], val, L, R, D, U);</span><br><span class="line">        maintain(nd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        pushdown(nd);</span><br><span class="line">        <span class="keyword">if</span> (!vis[nd] &amp;&amp; datVal[nd] == val) &#123;</span><br><span class="line">            vis[nd] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> maintain(nd), nd;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ch[<span class="number">0</span>][nd] &amp;&amp; datMin[ch[<span class="number">0</span>][nd]] == val) &#123;</span><br><span class="line">            <span class="keyword">int</span> ret = Qry(ch[<span class="number">0</span>][nd], val);</span><br><span class="line">            <span class="keyword">return</span> maintain(nd), ret;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> ret = Qry(ch[<span class="number">1</span>][nd], val);</span><br><span class="line">            <span class="keyword">return</span> maintain(nd), ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Graph &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> L, R, D, U, w; &#125;; </span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt; G[MAXN];</span><br><span class="line">    <span class="keyword">int</span> dist[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> D, <span class="keyword">int</span> U, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        G[from].push_back((Edge)&#123; L, R, D, U, w &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> root = KDT::build(<span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> nd = KDT::Qry(root, KDT::datMin[root]);</span><br><span class="line">            <span class="keyword">int</span> u = pos[nd];</span><br><span class="line">            dist[u] = KDT::datVal[nd];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">size_t</span> k = <span class="number">0</span>; k &lt; G[u].size(); ++k) &#123;</span><br><span class="line">                <span class="keyword">const</span> Edge&amp; e = G[u][k];</span><br><span class="line">                KDT::Mdy(root, dist[u] + e.w, e.L, e.R, e.D, e.U);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dist[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m), read(W), read(H);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        A[i].idx = i, read(A[i][<span class="number">0</span>]), read(A[i][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> p, w, L, R, D, U;</span><br><span class="line">        read(p), read(w), read(L), read(R), read(D), read(U);</span><br><span class="line">        Graph::AddEdge(p, L, R, D, U, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    Graph::Dijkstra();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="树套树"><a href="#树套树" class="headerlink" title="树套树"></a>树套树</h3><p>字面意思, 嵌套数据结构.</p><p>带有巨大常数, 占用大量空间.</p><h4 id="Luogu-P3380【模板】二逼平衡树（树套树）"><a href="#Luogu-P3380【模板】二逼平衡树（树套树）" class="headerlink" title="Luogu P3380【模板】二逼平衡树（树套树）"></a>Luogu P3380【模板】二逼平衡树（树套树）</h4><ul><li>题目链接: <a href="https://www.luogu.com.cn/problem/P3380" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P3380</a></li></ul><p>采用线段树套平衡树的方法, 为了好写一些, 内层平衡树我选择了 无旋 Treap.</p><ol><li><p>$k$ 在区间内的排名</p><p>把区间丢到线段树上处理, 把区间拆分后得到的排名相加即可. 单次操作时间复杂度 $O(\log^2 n)$</p><p>注意一些细节: 数值 $k$ 可能在区间内的贡献可能被计算多次, 所以每次查询内层平衡树时把得到的排名 $-1$, 最后得出答案时再把自己加上.</p></li><li><p>查询区间内排名为 $k$ 的值</p><p>这个问题在普通的平衡树上可以通过二分解决, 但是在多棵平衡树的情况下进行二分好像很困难…</p><p>所以直接采用二分值域的方式, 判断当前二分的值是否在区间内排名为 $k$, 单次操作时间复杂度 $O(\log ^3 n)$.</p><p>(好像在多个 Trie 上二分很可做, 或者用树状数组套 Trie 来维护, 可以做到 $O(\log ^2 n)$, 还没写过, 值得尝试)</p></li><li><p>修改某一位值上的数值</p><p>在线段树上跑一遍单点修改的操作, 沿途把原来的值删除, 再把修改的值加入就好了. 时间复杂度 $O(\log^2 n)$.</p></li><li><p>查询 $k$ 在区间内的前驱</p></li><li><p>查询 $k$ 在区间内的后继</p><p>也是把区间丢到线段树上, 注意把前驱取 $\max$, 后缀取 $\min$. 时间复杂度 $O(\log^2 n)$</p></li></ol><p><strong>代码实现</strong></p><p>只有靠 O2 才勉强续命的样子.</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Luogu P3380</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Treap &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXN = ::MAXN &lt;&lt; <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">2</span>][MAXN], size[MAXN], rnd[MAXN], val[MAXN], nidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maintain</span><span class="params">(<span class="keyword">int</span> nd)</span> </span>&#123;</span><br><span class="line">        size[nd] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch[<span class="number">0</span>][nd]) size[nd] += size[ch[<span class="number">0</span>][nd]];</span><br><span class="line">        <span class="keyword">if</span> (ch[<span class="number">1</span>][nd]) size[nd] += size[ch[<span class="number">1</span>][nd]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val[++nidx] = v, size[nidx] = <span class="number">1</span>, rnd[nidx] = rand(), nidx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">const</span> <span class="keyword">int</span>&amp; k, <span class="keyword">int</span>&amp; x, <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!nd) <span class="keyword">return</span> <span class="keyword">void</span>( x = y = <span class="number">0</span> );</span><br><span class="line">        <span class="keyword">if</span> (val[nd] &lt;= k) x = nd, split(ch[<span class="number">1</span>][nd], k, ch[<span class="number">1</span>][nd], y);</span><br><span class="line">        <span class="keyword">else</span> y = nd, split(ch[<span class="number">0</span>][nd], k, x, ch[<span class="number">0</span>][nd]);</span><br><span class="line">        maintain(nd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line">        <span class="keyword">if</span> (rnd[x] &lt; rnd[y]) <span class="keyword">return</span> ch[<span class="number">1</span>][x] = merge(ch[<span class="number">1</span>][x], y), maintain(x), x;</span><br><span class="line">        <span class="keyword">return</span> ch[<span class="number">0</span>][y] = merge(x, ch[<span class="number">0</span>][y]), maintain(y), y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>&amp; root, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> x, y; x = y = <span class="number">0</span>;</span><br><span class="line">        split(root, v, x, y), root = merge(merge(x, newnode(v)), y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span>&amp; root, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> x, y, z; x = y = z = <span class="number">0</span>;</span><br><span class="line">        split(root, v, x, z), split(x, v<span class="number">-1</span>, x, y);</span><br><span class="line">        y = merge(ch[<span class="number">0</span>][y], ch[<span class="number">1</span>][y]), root = merge(merge(x, y), z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Rnk</span><span class="params">(<span class="keyword">int</span>&amp; root, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> x, y, ret; x = y = ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> split(root, v<span class="number">-1</span>, x, y), ret = size[x] + <span class="number">1</span>, root = merge(x, y), ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Kth</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (nd) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = ch[<span class="number">0</span>][nd]? size[ch[<span class="number">0</span>][nd]] + <span class="number">1</span>: <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (k == t) <span class="keyword">return</span> nd;</span><br><span class="line">            <span class="keyword">if</span> (k &gt; t) k -= t, nd = ch[<span class="number">1</span>][nd];</span><br><span class="line">            <span class="keyword">else</span> nd = ch[<span class="number">0</span>][nd];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">abort</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span>&amp; root, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> x, y, ret; x = y = ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> split(root, v<span class="number">-1</span>, x, y), ret = x? val[Kth(x, size[x])]: -INT_MAX, root = merge(x, y), ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Suf</span><span class="params">(<span class="keyword">int</span>&amp; root, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> x, y, ret; x = y = ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> split(root, v, x, y), ret = y? val[Kth(y, <span class="number">1</span>)]: INT_MAX, root = merge(x, y), ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch[<span class="number">0</span>][u]) dfs(ch[<span class="number">0</span>][u]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, val[u]);</span><br><span class="line">        <span class="keyword">if</span> (ch[<span class="number">1</span>][u]) dfs(ch[<span class="number">1</span>][u]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SGT &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc (nd&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc (nd&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mid ((L + R) / 2)</span></span><br><span class="line">    <span class="keyword">int</span> rt[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) Treap::insert(rt[nd], A[i]);</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span>;</span><br><span class="line">        build(lc, L, Mid), build(rc, Mid+<span class="number">1</span>, R);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; pos, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        Treap::remove(rt[nd], A[pos]), Treap::insert(rt[nd], val);</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= Mid) Mdy(lc, L, Mid, pos, val);</span><br><span class="line">        <span class="keyword">else</span> Mdy(rc, Mid+<span class="number">1</span>, R, pos, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Rnk</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= L &amp;&amp; R &lt;= opR) <span class="keyword">return</span> Treap::Rnk(rt[nd], val) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (opR &lt;= Mid) <span class="keyword">return</span> Rnk(lc, L, Mid, opL, opR, val);</span><br><span class="line">        <span class="keyword">if</span> (opL &gt; Mid) <span class="keyword">return</span> Rnk(rc, Mid+<span class="number">1</span>, R, opL, opR, val);</span><br><span class="line">        <span class="keyword">return</span> Rnk(lc, L, Mid, opL, opR, val) + Rnk(rc, Mid+<span class="number">1</span>, R, opL, opR, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Kth</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR, <span class="keyword">const</span> <span class="keyword">int</span>&amp; k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L = <span class="number">0</span>, R = <span class="number">1e8</span>, ret = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (L &lt;= R) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Rnk(<span class="number">1</span>, <span class="number">1</span>, n, opL, opR, Mid) + <span class="number">1</span> &lt;= k) ret = Mid, L = Mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> R = Mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= L &amp;&amp; R &lt;= opR) <span class="keyword">return</span> Treap::Pre(rt[nd], val);</span><br><span class="line">        <span class="keyword">if</span> (opR &lt;= Mid) <span class="keyword">return</span> Pre(lc, L, Mid, opL, opR, val);</span><br><span class="line">        <span class="keyword">if</span> (opL &gt; Mid) <span class="keyword">return</span> Pre(rc, Mid+<span class="number">1</span>, R, opL, opR, val);</span><br><span class="line">        <span class="keyword">return</span> max(Pre(lc, L, Mid, opL, opR, val), Pre(rc, Mid+<span class="number">1</span>, R, opL, opR, val));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Suf</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= L &amp;&amp; R &lt;= opR) <span class="keyword">return</span> Treap::Suf(rt[nd], val);</span><br><span class="line">        <span class="keyword">if</span> (opR &lt;= Mid) <span class="keyword">return</span> Suf(lc, L, Mid, opL, opR, val);</span><br><span class="line">        <span class="keyword">if</span> (opL &gt; Mid) <span class="keyword">return</span> Suf(rc, Mid+<span class="number">1</span>, R, opL, opR, val);</span><br><span class="line">        <span class="keyword">return</span> min(Suf(lc, L, Mid, opL, opR, val), Suf(rc, Mid+<span class="number">1</span>, R, opL, opR, val));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> lc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> Mid</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    srand( time(<span class="literal">nullptr</span>) );</span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(A[i]);</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    SGT::build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> opt, L, R, K;</span><br><span class="line">        read(opt), read(L), read(R); <span class="keyword">if</span> (opt != <span class="number">3</span>) read(K);</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, SGT::Rnk(<span class="number">1</span>, <span class="number">1</span>, n, L, R, K) + <span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, SGT::Kth(L, R, K)); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: SGT::Mdy(<span class="number">1</span>, <span class="number">1</span>, n, L, R), A[L] = R; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, SGT::Pre(<span class="number">1</span>, <span class="number">1</span>, n, L, R, K)); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, SGT::Suf(<span class="number">1</span>, <span class="number">1</span>, n, L, R, K)); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERR\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h4 id="Luogu-P3332-ZJOI2013-K-大数查询"><a href="#Luogu-P3332-ZJOI2013-K-大数查询" class="headerlink" title="Luogu P3332 [ZJOI2013] K 大数查询"></a>Luogu P3332 [ZJOI2013] K 大数查询</h4><ul><li>题目链接: <a href="https://www.luogu.com.cn/problem/P3332" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P3332</a></li></ul><p>大概是权值线段树套普通线段树 ?</p><p><del>话说这种直接给出操作的数据结构应该是几年前的画风吧 ?</del></p><p>首先对题意进行转化, 将加入的元素看作一个带有两种属性的元素, 那么操作 1 就是加入 $(l, c),\ (l+1, c),\ \ldots, (r, c)$ 这些点, 操作 2 就是查询第一个属性 $a$ 满足 $l \le a \le r$ 的点集中第 $k$ 大.</p><p>于是就可以很自然地联想到树套树了. 但是区间加入一个数的操作不好实现, 所以就有了一个朴素的想法: 在外层线段树上维护权值, 在内层维护位置.</p><p>现在的问题就很明朗了:</p><ul><li><p>对于操作 1: 在外层线段树单点插入一个值, 并在这个位置对应的线段树区间加 1, 表明这个位置加入值了.</p><p>注意到代码中使用了 “标记永久化” 的技巧, 这样会比每次下传标记要快, <del>但是我要卡常为什么不直接写整体二分呢?</del></p><p>单次操作时间复杂度 $O(\log^2 n)$.</p></li><li><p>对于操作 2: 在外层线段树上二分, 和普通权值线段树的操作没什么大的差别, 只是查询子树大小的 $O(\log n)$ 而已…</p><p>单次操作时间复杂度 $O(\log^2 n)$.</p></li></ul><p><strong>代码实现</strong></p><p>活在 O2, 以及被整体二分吊打的空气之下 = =.</p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Luogu P3332</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ask</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> opt, L, R; LL c;</span><br><span class="line">&#125; Q[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">LL B[MAXN], nB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> DSGT &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXN = ::MAXN * <span class="number">17</span> * <span class="number">17</span>;</span><br><span class="line">    <span class="keyword">int</span> lc[MAXN], rc[MAXN], nidx;</span><br><span class="line">    LL datSum[MAXN], tagAdd[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l1, <span class="keyword">int</span> r1, <span class="keyword">int</span> l2, <span class="keyword">int</span> r2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (max(l1, l2) &gt; min(r1, r2)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> min(r1, r2) - max(l1, l2) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 标记永久化</span></span><br><span class="line">        datSum[nd] += calc(L, R, opL, opR);</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= L &amp;&amp; R &lt;= opR) <span class="keyword">return</span> <span class="keyword">void</span>( ++tagAdd[nd] );</span><br><span class="line">        <span class="comment">// 内层线段树需要动态开点, 空间复杂度 O(n log^2 n)</span></span><br><span class="line">        <span class="keyword">if</span> (!lc[nd]) lc[nd] = ++nidx;</span><br><span class="line">        <span class="keyword">if</span> (!rc[nd]) rc[nd] = ++nidx;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= Mid) Mdy(lc[nd], L, Mid, opL, opR);</span><br><span class="line">        <span class="keyword">if</span> (opR &gt; Mid) Mdy(rc[nd], Mid+<span class="number">1</span>, R, opL, opR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR, <span class="keyword">const</span> <span class="keyword">int</span>&amp; tag = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 标记永久化</span></span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= L &amp;&amp; R &lt;= opR) <span class="keyword">return</span> datSum[nd] + tag * (R-L+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>, ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= Mid) ret += Qry(lc[nd], L, Mid, opL, opR, tag + tagAdd[nd]);</span><br><span class="line">        <span class="keyword">if</span> (opR &gt; Mid) ret += Qry(rc[nd], Mid+<span class="number">1</span>, R, opL, opR, tag + tagAdd[nd]);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SGT &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc (nd&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc (nd&lt;&lt;1|1)</span></span><br><span class="line">    <span class="keyword">int</span> rt[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR, <span class="keyword">const</span> <span class="keyword">int</span>&amp; pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!rt[nd]) rt[nd] = ++DSGT::nidx;</span><br><span class="line">        DSGT::Mdy(rt[nd], <span class="number">1</span>, n, opL, opR);</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= Mid) Mdy(lc, L, Mid, opL, opR, pos);</span><br><span class="line">        <span class="keyword">else</span> Mdy(rc, Mid+<span class="number">1</span>, R, opL, opR, pos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Kth</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR, <span class="keyword">const</span> LL&amp; k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> L;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        LL d = DSGT::Qry(rt[rc], <span class="number">1</span>, n, opL, opR);</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= d) <span class="keyword">return</span> Kth(rc, Mid+<span class="number">1</span>, R, opL, opR, k);</span><br><span class="line">        <span class="keyword">return</span> Kth(lc, L, Mid, opL, opR, k - d);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> lc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> opt, L, R; <span class="keyword">static</span> LL c;</span><br><span class="line">        read(opt), read(L), read(R), read(c);</span><br><span class="line">        Q[i] = (Ask)&#123; opt, L, R, c &#125;;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) B[++nB] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    sort(B+<span class="number">1</span>, B+<span class="number">1</span>+nB);</span><br><span class="line">    nB = unique(B+<span class="number">1</span>, B+<span class="number">1</span>+nB) - B - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 需要丢到权值线段树里, 随手离散化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="keyword">if</span> (Q[i].opt == <span class="number">1</span>) Q[i].c = lower_bound(B+<span class="number">1</span>, B+<span class="number">1</span>+nB, Q[i].c) - B;</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> Ask&amp; q = Q[i];</span><br><span class="line">        <span class="keyword">switch</span> (q.opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: SGT::Mdy(<span class="number">1</span>, <span class="number">1</span>, nB, q.L, q.R, q.c); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, B[SGT::Kth(<span class="number">1</span>, <span class="number">1</span>, nB, q.L, q.R, q.c)]); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERR\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h4 id="Luogu-P3759-TJOI2017-不勤劳的图书管理员"><a href="#Luogu-P3759-TJOI2017-不勤劳的图书管理员" class="headerlink" title="Luogu P3759 [TJOI2017] 不勤劳的图书管理员"></a>Luogu P3759 [TJOI2017] 不勤劳的图书管理员</h4><ul><li>题目链接: <a href="https://www.luogu.com.cn/problem/P3759" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P3759</a></li></ul><p>带权动态逆序对.</p><p><del>题外话: 这题有点题意杀, 不过模拟一遍样例就好了</del></p><p>仍然使用上一题的转化思路, 题目所求即为 $n$ 个带有两种属性的元素 $(a_i,\ b_i)$ 中满足 $a_i &lt; a_j$ 且 $b_i &gt; b_j$ 的元素对权值和.</p><p>交换位置的操作可以看作删除两个元素后加入两个新元素, 所以问题的关键在于加入 / 删除元素对答案的影响.</p><p>每次查询一个元素 $(a,\ b)$ 的影响, 对这个元素有贡献的, 一定满足:</p><ul><li><p>第一维 $&lt; a$, 第二维 $&gt; b$</p></li><li><p>第一维 $&gt; a$, 第二维 $&lt; b$</p></li></ul><p>由于记录信息具有可减性, 采用树状数组套权值线段树实现.</p><p><strong>代码实现</strong></p><div><div class="fold_hider"><div class="close hider_title">点击显示 / 隐藏 </div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Luogu P3759</span></span><br><span class="line"><span class="comment">// DeP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">1</span> &lt;&lt; <span class="number">18</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE], *p1, *p2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1 == p2 &amp;&amp;</span><br><span class="line">            (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, MAXSIZE, <span class="built_in">stdin</span>), p1 == p2)? EOF: *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">        x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">0</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f |= ch == <span class="string">'-'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = Gc();</span><br><span class="line">        <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> IO::read;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e4</span>+<span class="number">5</span>, P = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, ans;</span><br><span class="line"><span class="keyword">int</span> A[MAXN], v[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> SGT &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXN = ::MAXN * <span class="number">16</span> * <span class="number">16</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> size, sum;</span><br><span class="line">        Node() &#123; size = sum = <span class="number">0</span>; &#125;</span><br><span class="line">        Node(<span class="keyword">int</span> _s, <span class="keyword">int</span> _v): size(_s), sum(_v) &#123; &#125;</span><br><span class="line">        Node <span class="keyword">operator</span> + (<span class="keyword">const</span> Node&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Node((size + rhs.size) % P, (sum + rhs.sum) % P);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; dat[MAXN];</span><br><span class="line">    <span class="keyword">int</span> lc[MAXN], rc[MAXN], nidx;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; pos, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val, <span class="keyword">const</span> <span class="keyword">int</span>&amp; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!nd) nd = ++nidx;</span><br><span class="line">        dat[nd].size = (dat[nd].size + <span class="number">1L</span>L * type) % P;</span><br><span class="line">        dat[nd].sum = (dat[nd].sum + <span class="number">1L</span>L * type * val) % P;</span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span> nd;</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= Mid) lc[nd] = Mdy(lc[nd], L, Mid, pos, val, type);</span><br><span class="line">        <span class="keyword">else</span> rc[nd] = Mdy(rc[nd], Mid+<span class="number">1</span>, R, pos, val, type);</span><br><span class="line">        <span class="keyword">return</span> nd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node <span class="title">Qry</span><span class="params">(<span class="keyword">int</span> nd, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opL, <span class="keyword">const</span> <span class="keyword">int</span>&amp; opR)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (opL &lt;= L &amp;&amp; R &lt;= opR) <span class="keyword">return</span> dat[nd];</span><br><span class="line">        <span class="keyword">if</span> (!nd) <span class="keyword">return</span> Node(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> Mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (opR &lt;= Mid) <span class="keyword">return</span> Qry(lc[nd], L, Mid, opL, opR);</span><br><span class="line">        <span class="keyword">if</span> (opL &gt; Mid) <span class="keyword">return</span> Qry(rc[nd], Mid+<span class="number">1</span>, R, opL, opR);</span><br><span class="line">        <span class="keyword">return</span> Qry(lc[nd], L, Mid, opL, opR) + Qry(rc[nd], Mid+<span class="number">1</span>, R, opL, opR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BIT &#123;</span><br><span class="line">    <span class="keyword">using</span> SGT::Node;</span><br><span class="line">    <span class="keyword">int</span> rt[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; d1, <span class="keyword">const</span> <span class="keyword">int</span>&amp; d2, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val, <span class="keyword">const</span> <span class="keyword">int</span>&amp; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = d1; i &lt;= n; i += lowbit(i))</span><br><span class="line">            rt[i] = SGT::Mdy(rt[i], <span class="number">1</span>, n, d2, val, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; d1, <span class="keyword">const</span> <span class="keyword">int</span>&amp; d2, <span class="keyword">const</span> <span class="keyword">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = d1; i; i -= lowbit(i)) &#123;</span><br><span class="line">            Node tmp = SGT::Qry(rt[i], <span class="number">1</span>, n, d2, n);</span><br><span class="line">            ret = (ret + tmp.sum + <span class="number">1L</span>L * val * tmp.size) % P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i -= lowbit(i)) &#123;</span><br><span class="line">            Node tmp = SGT::Qry(rt[i], <span class="number">1</span>, n, <span class="number">1</span>, d2);</span><br><span class="line">            ret = (ret + tmp.sum + <span class="number">1L</span>L * val * tmp.size) % P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = d1; i; i -= lowbit(i)) &#123;</span><br><span class="line">            Node tmp = SGT::Qry(rt[i], <span class="number">1</span>, n, <span class="number">1</span>, d2);</span><br><span class="line">            ret = (ret - (tmp.sum + <span class="number">1L</span>L * val * tmp.size) % P + P) % P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        read(A[i]), read(v[i]);</span><br><span class="line">        ans = (ans + BIT::Qry(i, A[i], v[i])) % P;</span><br><span class="line">        BIT::Mdy(i, A[i], v[i], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// solve</span></span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> L, R;</span><br><span class="line">        read(L), read(R);</span><br><span class="line">        <span class="comment">// remove</span></span><br><span class="line">        ans = (ans - BIT::Qry(L, A[L], v[L]) + P) % P;</span><br><span class="line">        BIT::Mdy(L, A[L], v[L], <span class="number">-1</span>);</span><br><span class="line">        ans = (ans - BIT::Qry(R, A[R], v[R]) + P) % P;</span><br><span class="line">        BIT::Mdy(R, A[R], v[R], <span class="number">-1</span>);</span><br><span class="line">        swap(A[L], A[R]), swap(v[L], v[R]);</span><br><span class="line">        <span class="comment">// add</span></span><br><span class="line">        BIT::Mdy(L, A[L], v[L], <span class="number">1</span>);</span><br><span class="line">        ans = (ans + BIT::Qry(L, A[L], v[L])) % P;</span><br><span class="line">        BIT::Mdy(R, A[R], v[R], <span class="number">1</span>);</span><br><span class="line">        ans = (ans + BIT::Qry(R, A[R], v[R])) % P;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>数据结构还是学不明白啊, 真是活该退役.png</p><p><strong>UPD on 2020.2.27</strong></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>nzhtl1477, 简单数据结构</li><li>__stdcall, <a href="https://www.cnblogs.com/mlystdcall/p/6219421.html" target="_blank" rel="noopener">简易 CDQ 分治教程 &amp; 学习笔记</a></li><li>Owen_codeisking, <a href="https://www.luogu.com.cn/blog/Owencodeisking/post-xue-xi-bi-ji-cdq-fen-zhi-hu-zheng-ti-er-fen" target="_blank" rel="noopener">[学习笔记] CDQ 分治和整体二分</a></li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;综述&quot;&gt;&lt;a href=&quot;#综述&quot; class=&quot;headerlink&quot; title=&quot;综述&quot;&gt;&lt;/a&gt;综述&lt;/h2&gt;&lt;p&gt;拜读了毒瘤的数据结构课件, 深受启发, &lt;del&gt;甚是谔谔, 当即感觉自己之前一直在玩泥巴&lt;/del&gt;.&lt;/p&gt;
&lt;p&gt;初学数据结构, 恳请指正.&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://depletedprism.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Data Structure" scheme="https://depletedprism.github.io/tags/Data-Structure/"/>
    
  </entry>
  
</feed>
